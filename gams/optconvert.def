*
* optconvert.def
*

AlphaECP string.opt 0 "alpha.ecp" 1 1 Generates AlphaECP input file
AmplNLC string.opt 0 "amplnlc.c" 1 1 Generate Ampl NLC compatible file
AmplNLCG string.opt 0 "amplnlcg.c" 0 1 Generate GDX compatible Ampl NLC file
Ampl string.opt 0 "ampl.mod" 1 1 Generates Ampl input file
Analyze string.opt 0 "analyze.txt" 1 1 Generates three text files for rows columns and matrix
AnalyzeS string.opt 0 "analyzes.txt" 1 1 Generates short form of Analyze
Baron string.opt 0 "gams.bar" 1 1 Generates Baron input file
CHull string.opt 0 "chull.gms" 0 1 Generate Convex Hull for MINLPs
CplexLP string.opt 0 "cplex.lp" 1 1 Generate CPLEX LP format input file
CplexMPS string.opt 0 "cplex.mps" 1 1 Generate CPLEX MPS format input file
CppAD string.opt 0 "cppadFunc.cpps" 1 1 Generate AD IPOPT format
Dict string.opt 0 "dict.txt" 1 1 Generate Convert to GAMS Dictionary
DictMap string.opt 0 "dictmap.gdx" 1 1 Generate Convert to GAMS Dictionary Map
FixedMPS string.opt 0 "fixed.mps" 1 1 Generate fixed format MPS file
Gams string.opt 0 "gams.gms" 1 1 Generate GAMS scalar model. This is the default conversion format used.
Lago string.opt 0 "lago.gms" 1 1 Generate a partial Lago file
Lgo string.opt 0 "lgomain.for" 1 1 Generate an LGO Fortran file
LindoMPI string.opt 0 "lindo.mpi" 1 1 Generate Lindo MPI file
Lingo string.opt 0 "lingo.lng" 1 1 Generate Lingo input file
LocalSolver string.opt 0 "localsolver.lsp" 1 1 Generate LocalSolver input file (only with ConvertD)
LSPSol string.opt 0 "lspsol.gms" 1 1 Generate Output function in LocalSolver input file (only with ConvertD)
Minopt string.opt 0 "minopt.dat" 1 1 Generate Minopt input file
NLP2MCP string.opt 0 "gamsmcp.gms" 1 1 Generates GAMS scalar MCP model
NLP2MCPE string.opt 0 "gamsmcpe.gms" 0 1 Generates GAMS scalar MCP model plus testing requirements
OSiL string.opt 0 "osil.xml" 1 1 Generates Optimization Services instance Language (OSil) file
PDCO string.opt 0 "data.dat" 0 1 Generates Mike Saunders PDCO input file
SFS string.opt 0 "sfs.oml" 1 1 Generates Solver Foundation Services OML file
UnitBC string.opt 0 "unitbc.gdx" 0 1 Generate unit benefit and cost
ViennaDag string.opt 0 "vienna.dag" 1 1 Generate Vienna Dag input file
Memo string.opt 0 "memo.txt" 1 1 Generate a memo file containing model statistics and files created.
FileList string.opt 0 "files.txt" 1 1 Generate file list of file formats generated
All boolean.nv 0 0 1 1 Generates all supported file formats
Include immediate ReadFile 1 2 Start reading from a new file
ConeReform enumint 0 0 1 2 Reformulation of cone =C= constraints to NLP format
 0 1 keep =C= format
 1 1 convert conic constraints to NLP format
GmsInsert string.opt 0 "$if NOT '%gams.u1%' == '' $include '%gams.u1%'" 1 2 Insert text before solve
ECPInfBnd double 0 0 0 maxdouble 0 2 Infinity value to be used on bounds for AlphaECP
Match boolean.nv 0 0 1 2 Force a complete match for all MCP variable/equation pairs
ObjVar string.opt 0 "objvar" 1 2 Name of objective variable.
Reform integer 0 100 0 maxint 1 2 Force reformulations
Terminate boolean.nv 0 0 1 2 Force Gams to terminate after conversion
NlUgly boolean.nv 0 0 0 2 Generate ugly (unfolded) NL expressions
Dump string.opt 0 "" 0 2 Debug dump routine (default output)
Qmaker string.opt 0 "qmaker.gms" 0 1 Test QP stuff
DCprior integer 0 5 0 maxint 0 2 Generates priority list for Double Contraction
Tester string.opt 0 "" 0 2 Tests new interpreted
Jacobian string.opt 0 "jacobian.gdx" 1 2 Writes GDX version of current point - Jacobian
Hessian string.opt 0 "hessian.gdx" 1 2 Writes GDX version of current point - Jacobian and Hessian
*
* definedvar section
*
defvar  definedvar
myeolchar EOLCOMM #
*
* Groups
* <group-ident> group <group-number <help-context> <help-text>
*
Language group 1 1 Target languages
Other group 2 1 Other options
*** End of file
