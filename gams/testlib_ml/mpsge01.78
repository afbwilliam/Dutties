$title Illustrate correct naming in MPSGE - new rules (MPSGE01,SEQ=78)

$ontext

This model illustrates the NEW naming rules for labels and identifiers
in MPSGE.  The new rules are those imposed by the MPSGE engine that
uses the external equation interface to communicate with the MCP
solver - this was introduced in GAMS Distribution 20.1 on 31 October,
2001.  To use these new rules, you must be running from GAMS
Distribution 21.3 (due early January 2004) or newer - this was when
the "oldnames" check made by GAMS/Base was taken out and the checks
were moved to the MPSGE engines.

Of course, just because something is allowed doesn't make it a good
idea - this is not an illustration of good style.

New rules for names in MPSGE models
-----------------------------------

  Labels must:
    not contain the following characters:  set i / ' !.:"', "'" /
      or in English space, bang, dot, colon, double-quote, single-quote
    not be empty: set i / '' /;
    N.B. There is no MPSGE-specific limit on the label length.

  Other identifiers (e.g. parameters, model name, variables):
    no MPSGE-specific limits


Last update 20 Jan 2004 - Steve Dirkse

$offtext

$eolcom //

$version 137
$if errorfree $goto GAMSBASE_OK
$clearerror
display 'GAMS Rev 137 (CD 21.3) or higher required to test the new rules'
$exit

$label GAMSBASE_OK


SETS
i /
*          1         2         3
* 1234567890123456789012345678901
  veryLongLabelNameWithLengthOf31    // labels may be up to 31 characters long
  i-+-+-____                         // -, +, or _ OK
  'i4         '                      // can end with spaces: GAMS/Base trims
                                     // trailing whitespace before MPSGE
                                     // gets a chance to see it
* this next block was created by taking all the legal UEL characters
* as of GAMS CD 21.3 (GAMS Rev 137) and removing those known to cause
* trouble for MPSGE.  The chars legal in GAMS UELs but not in MPSGE
* are tested in mpsge03 * mpsge09.
  '#OK#'
  '$OK$'
  '%OK%'
  '&OK&'
  '(OK('
  ')OK)'
  '*OK*'
  '+OK+'
  ',OK,'
  '-OK-'
  '/OK/'
  '0OK9'
  ';OK;'
  '<OK<'
  '=OK='
  '>OK>'
  '?OK?'
  '@OK@'
  'aOKA'
  '[OK['
  '\OK\'
  ']OK]'
  '^OK^'
  '_OK_'
  '`OK`'
  '{OK{'
  '|OK|'
* if we run with a demo license, cut down the size of the test
$if set DEMOSIZE $ontext
  '}OK}'
  '~OK~'
  '#'
  '$'
  '%'
  '&'
  '('
  ')'
  '*'
  '+'
  ','
  '-'
  '/'
  '0'
  ';'
  '<'
  '='
  '>'
  '?'
  '@'
  'A'
  '['
  '\'
  ']'
  '^'
  '_'
  '`'
  '{'
  '|'
  '}'
  '~'
$if not set DEMOSIZE $ontext
$offtext

/,
j       / j1
$if not set DEMOSIZE * j2
/,
h       / h1
$if not set DEMOSIZE * h2
/;

* the existence of nasty labels should only matter if they are part of
* the MPSGE model
SET notusedinmpsge / 'a = b            a' /;

parameter       d0345678901234567890(i,h)               Reference demands,
                e0(i,h)         Reference endowments;

d0345678901234567890(i,h) = uniform(0,1);
e0(i,h) = uniform(0,1);

$ontext

$model:exchange9012

$commodities:
        price678901234567890(i,j)

$consumers:
        ra345678901234567890(h)


$demand:ra345678901234567890(h) s:1
        d:price678901234567890(i,j)     q:d0345678901234567890(i,h)
        e:price678901234567890(i,j)     q:e0(i,h)

$offtext

$sysinclude mpsgeset exchange9012


$include EXCHANGE9012.GEN
solve exchange9012 using mcp;

abort$( exchange9012.solvestat <> %solvestat.NormalCompletion% or exchange9012.modelstat <> %modelstat.Optimal%) 'wrong status codes';
