// C++ code generated by apiwrapper for GAMS Version 24.0.2

#include <stdio.h>
#include <assert.h>
#include <errno.h>

#include "gamsxco.hpp"
namespace GAMS {
void GAMSX::create()
{
        for (int i = 0 ; i < GMS_MAX_INDEX_DIM; ++i) {
                DPout[i] = new char[257];
        }
        gamsxHandle_ = (gamsxHandle_t) 0;
        extHandle = 1;
        numInst++;
}

void GAMSX::destroy()
{

        numInst--;
        for (int i = 0 ; i < GMS_MAX_INDEX_DIM; ++i) {
                delete[] DPout[i];
        }
        if (0 != gamsxHandle_ && 0 == extHandle) {
           gamsxFree(&gamsxHandle_);
        }
}

// default constructor
// GAMSX::GAMSX ()
// {
//  int rc;
//  char errBuf[256];
//
//  gamsxHandle_ = 0;
//  gamsxGetReady();
//  assert(isLoaded);
//  rc = gamsxCreate (&gamsxHandle_);
//  assert(rc); // for now we are sloppy here
//  numInst++;
//}

// default constructor
GAMSX::GAMSX ()
{
  create();
}

// constructor
GAMSX::GAMSX (std::string &msg)
{
  create(); Init(msg);
}

// constructor
GAMSX::GAMSX (const std::string &dirname, std::string &msg)
{
  create(); Init(dirname,msg);
}

// constructor
GAMSX::GAMSX (const std::string &dirname, const std::string &libname, std::string &msg)
{
  create(); Init(dirname,libname,msg);
}

// constructor if we already have a gamsxHandle
GAMSX::GAMSX (gamsxHandle_t gamsxHandle, std::string &msg)
{
  create(); Init(gamsxHandle,msg);
}

// constructor if we already have a gamsxHandle
GAMSX::GAMSX (gamsxHandle_t gamsxHandle, const std::string &dirname, std::string &msg)
{
  create(); Init(gamsxHandle,dirname,msg);
}

// destructor
GAMSX::~GAMSX ()
{
  destroy();
}

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GAMSX::
Init (std::string &msg)
{
  char cmsg[257];
  int initresult = gamsxCreate (&gamsxHandle_, cmsg, sizeof(cmsg));
  msg = cmsg;
  extHandle = 0;
  return initresult;
} // Init(std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GAMSX::
Init (const std::string &dirname, std::string &msg)
{
  char cmsg[257];
  int initresult = gamsxCreateD (&gamsxHandle_, dirname.c_str(), cmsg, sizeof(cmsg));
  msg = cmsg;
  extHandle = 0;
  return initresult;
} // Init(const std::string &dirname; std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GAMSX::
Init (const std::string &dirname, const std::string &libname, std::string &msg)
{
  char cmsg[257];
  std::string lib = dirname + libname;

  int initresult = gamsxCreateL (&gamsxHandle_, lib.c_str(), cmsg, sizeof(cmsg));
  msg = cmsg;
  extHandle = 0;
  return initresult;
} // Init(const std::string &dirname; const std::string &libname; std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GAMSX::
Init (gamsxHandle_t gamsxHandle, std::string &msg)
{
  int res;

  res = gamsxGetReady (msg);
  if (res) {
     gamsxHandle_ = gamsxHandle;
  }
  return res;
} // Init(gamsxHandle_t gamsxHandle, std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GAMSX::
Init (gamsxHandle_t gamsxHandle, const std::string &dirname, std::string &msg)
{
  int res;

  res = gamsxGetReady (dirname, msg);
  if (res) {
    gamsxHandle_ = gamsxHandle;
  }
  return res;
} // Init(gamsxHandle_t gamsxHandle, const std::string &dirname, std::string &msg)


gamsxHandle_t GAMSX::
GetHandle ()
{
  return gamsxHandle_;
}

int GAMSX::
gamsxGetReady (std::string& msg)
{
   if (! isLoaded) {
     char str[257]="";
     isLoaded = ::gamsxGetReady(str, sizeof(str));
     msg = str;
   }
   return isLoaded;
}

int GAMSX::
gamsxGetReady (const std::string& dir, std::string& msg)
{
   if (! isLoaded) {
     char str[257]="";
     isLoaded = ::gamsxGetReadyD(dir.c_str(), str, sizeof(str));
     msg = str;
   }
   return isLoaded;
}

int GAMSX::numInst = 0;
int GAMSX::isLoaded = 0;
} // namespace GAMS
