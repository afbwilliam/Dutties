unit gamsxdpdef; { delphi procedure wrapper generated by apiwrapper for gams version 24.0.2 }
{ function interface using a dll, pure delphi, static loading }

{$p- no open parameters ==> no maxlen byte}
{$v+ force var strings}
{$h- short only }

interface

uses
   sysutils,
   gmsgen,
   gxdefs;

const extlib = 'gamsxdclib.dll';

type
   terrorcallback = function(errcount:integer; const msg:shortstring):integer; stdcall;
   tbrkpcallback1 = function (const fn: shortstring; linnr: integer; lstnr: integer; usrmem: pointer): integer; stdcall;
   tbrkpcallback2 = function (const fn: shortstring; linnr: integer; lstnr: integer; usermem1: pointer; usermem2: pointer): integer; stdcall;

//tries to load dll from os default location
//name for the dll is automatic
function  gamsxgetready(var msg: shortstring): boolean;
//tries to load dll from main program directory; if that fails
//loads dll from os default location
//name for the dll is automatic
function  gamsxgetreadyx(var msg: shortstring): boolean;
//loads dll from specified directory
//name for the dll is automatic
function gamsxgetreadyd(const dir: shortstring; var msg: shortstring): boolean;
//loads dll from the full path specified
//no changes are made to the name (platform and file extension)
function gamsxgetreadyl(const libname: shortstring; var msg: shortstring): boolean;

//tries to load dll from os default location
//name for the dll is automatic
function gamsxcreate(var pgamsx: pointer; var msg: shortstring): boolean;
//tries to load dll from main program directory; if that fails
//loads dll from os default location
//name for the dll is automatic
function gamsxcreatex(var pgamsx: pointer; var msg: shortstring): boolean;
//loads dll from specified directory
//name for the dll is automatic
function gamsxcreated(var pgamsx: pointer; const dir: shortstring; var msg: shortstring): boolean;
//loads dll from the full path specified
function gamsxcreatel(var pgamsx: pointer; const libname: shortstring; var msg: shortstring): boolean;

procedure gamsxfree  (var pgamsx: pointer);

// functions and procedures
function  gamsxrunexecdll       (pgamsx: pointer; optptr: pointer; const sysdir: shortstring; averbose: integer; out msg: shortstring): integer; stdcall; external extlib;
procedure gamsxaddbreakpoint    (pgamsx: pointer; const fn: shortstring; linenr: integer); stdcall; external extlib;
procedure gamsxclearbreakpoints (pgamsx: pointer); stdcall; external extlib;
function  gamsxsysteminfo       (pgamsx: pointer; var nrsy: integer; var nruel: integer): integer; stdcall; external extlib;
function  gamsxsymbolinfo       (pgamsx: pointer; synr: integer; out syname: shortstring; out syexpltxt: shortstring; var sydim: integer; var sytyp: integer; var sycount: integer; var syuserinfo: integer): integer; stdcall; external extlib;
function  gamsxfindsymbol       (pgamsx: pointer; const syname: shortstring): integer; stdcall; external extlib;
function  gamsxdatareadrawstart (pgamsx: pointer; synr: integer; var sycount: integer): integer; stdcall; external extlib;
function  gamsxdatareadraw      (pgamsx: pointer; var elements: tgdxuelindex; var vals: tgdxvalues; var fdim: integer): integer; stdcall; external extlib;
function  gamsxdatareaddone     (pgamsx: pointer): integer; stdcall; external extlib;
function  gamsxdatawriteraw     (pgamsx: pointer; const elements: tgdxuelindex; const vals: tgdxvalues): integer; stdcall; external extlib;
function  gamsxdatawritedone    (pgamsx: pointer): integer; stdcall; external extlib;
procedure gamsxregistercb1      (pgamsx: pointer; cb1: tbrkpcallback1; usermem: pointer); stdcall; external extlib;
procedure gamsxregistercb2      (pgamsx: pointer; cb2: tbrkpcallback2; usermem1: pointer; usermem2: pointer); stdcall; external extlib;
function  gamsxgetcb1           (pgamsx: pointer): tbrkpcallback1; stdcall; external extlib;
function  gamsxgetcb2           (pgamsx: pointer): tbrkpcallback2; stdcall; external extlib;
function  gamsxgetcb1um         (pgamsx: pointer): pointer; stdcall; external extlib;
function  gamsxgetcb2um1        (pgamsx: pointer): pointer; stdcall; external extlib;
function  gamsxgetcb2um2        (pgamsx: pointer): pointer; stdcall; external extlib;

// properties as functions and procedures
procedure gamsxswset         (pgamsx: pointer; const x: integer); stdcall; external extlib;

function  gamsxshowerror(pgamsx: pointer; const fnamelog: shortstring; out errorline: shortstring; out errortyp: shortstring; out gmsline: shortstring): boolean; stdcall;
function  gamsxuelname(pgamsx: pointer; uel: integer): shortstring; stdcall;
function  gamsxdatawriterawstart(pgamsx: pointer; synr: integer; const domerge: boolean): integer; stdcall;
function  gamsxstepthrough(pgamsx: pointer): boolean; stdcall;
procedure gamsxstepthroughset(pgamsx: pointer; const x: boolean); stdcall;
function  gamsxruntoend(pgamsx: pointer): boolean; stdcall;
procedure gamsxruntoendset(pgamsx: pointer; const x: boolean); stdcall;
function  gamsxcb1defined(pgamsx: pointer): boolean; stdcall;
function  gamsxcb2defined(pgamsx: pointer): boolean; stdcall;
implementation


procedure xcreate(var pgamsx: pointer); stdcall; external extlib;
procedure xfree  (var pgamsx: pointer); stdcall; external extlib;

function  bool_gamsxshowerror(pgamsx: pointer; const fnamelog: shortstring; out errorline: shortstring; out errortyp: shortstring; out gmsline: shortstring): integer; stdcall; external extlib name 'gamsxshowerror';
procedure sst_gamsxuelname(pgamsx: pointer; uel: integer; var sst_result: shortstring); stdcall; external extlib name 'gamsxuelname';
function  bool_gamsxdatawriterawstart(pgamsx: pointer; synr: integer; const domerge: integer): integer; stdcall; external extlib name 'gamsxdatawriterawstart';
function  bool_gamsxstepthrough(pgamsx: pointer): integer; stdcall; external extlib name 'gamsxstepthrough';
procedure bool_gamsxstepthroughset(pgamsx: pointer; const x: integer); stdcall; external extlib name 'gamsxstepthroughset';
function  bool_gamsxruntoend(pgamsx: pointer): integer; stdcall; external extlib name 'gamsxruntoend';
procedure bool_gamsxruntoendset(pgamsx: pointer; const x: integer); stdcall; external extlib name 'gamsxruntoendset';
function  bool_gamsxcb1defined(pgamsx: pointer): integer; stdcall; external extlib name 'gamsxcb1defined';
function  bool_gamsxcb2defined(pgamsx: pointer): integer; stdcall; external extlib name 'gamsxcb2defined';

function  gamsxshowerror(pgamsx: pointer; const fnamelog: shortstring; out errorline: shortstring; out errortyp: shortstring; out gmsline: shortstring): boolean; stdcall;
begin
result := bool_gamsxshowerror(pgamsx, fnamelog, errorline, errortyp, gmsline) <> 0;
end;

function  gamsxuelname(pgamsx: pointer; uel: integer): shortstring; stdcall;
begin
sst_gamsxuelname(pgamsx, uel, result);
end;

function  gamsxdatawriterawstart(pgamsx: pointer; synr: integer; const domerge: boolean): integer; stdcall;
begin
result := bool_gamsxdatawriterawstart(pgamsx, synr, integer(domerge));
end;

function gamsxstepthrough(pgamsx: pointer): boolean; stdcall;
begin
result := bool_gamsxstepthrough(pgamsx) <> 0;
end;

procedure gamsxstepthroughset(pgamsx: pointer; const x: boolean); stdcall;
begin
bool_gamsxstepthroughset(pgamsx, integer(x));
end;

function gamsxruntoend(pgamsx: pointer): boolean; stdcall;
begin
result := bool_gamsxruntoend(pgamsx) <> 0;
end;

procedure gamsxruntoendset(pgamsx: pointer; const x: boolean); stdcall;
begin
bool_gamsxruntoendset(pgamsx, integer(x));
end;

function gamsxcb1defined(pgamsx: pointer): boolean; stdcall;
begin
result := bool_gamsxcb1defined(pgamsx) <> 0;
end;

function gamsxcb2defined(pgamsx: pointer): boolean; stdcall;
begin
result := bool_gamsxcb2defined(pgamsx) <> 0;
end;
function gamsxgetready(var msg: shortstring): boolean;
begin
msg := '';
result := true;
end;

function gamsxgetreadyx(var msg: shortstring): boolean;
begin
msg := '';
result := true;
end;

function gamsxgetreadyd(const dir: shortstring; var msg: shortstring): boolean;
begin
msg := '';
result := true;
end;

function gamsxgetreadyl(const libname: shortstring; var msg: shortstring): boolean;
begin
msg := '';
result := true;
end;

function gamsxcreate(var pgamsx: pointer; var msg: shortstring): boolean;
begin
xcreate(pgamsx);
if pgamsx = nil
then
   begin
   result := false;
   msg := 'library is loaded but error while creating object';
   end
else
   result := true;
end;

function gamsxcreatex(var pgamsx: pointer; var msg: shortstring): boolean;
begin
xcreate(pgamsx);
if pgamsx = nil
then
   begin
   result := false;
   msg := 'library is loaded but error while creating object';
   end
else
   result := true;
end;

function gamsxcreated(var pgamsx: pointer; const dir: shortstring; var msg: shortstring): boolean;
begin
xcreate(pgamsx);
if pgamsx = nil
then
   begin
   result := false;
   msg := 'library is loaded but error while creating object';
   end
else
   result := true;
end;

function gamsxcreatel(var pgamsx: pointer; const libname: shortstring; var msg: shortstring): boolean;
begin
xcreate(pgamsx);
if pgamsx = nil
then
   begin
   result := false;
   msg := 'library is loaded but error while creating object';
   end
else
   result := true;
end;

procedure gamsxfree  (var pgamsx: pointer);
begin
xfree(pgamsx);
end;

initialization

end.
