unit gdxdcpdef; { Delphi procedure wrapper generated by apiwrapper for GAMS Version 24.0.2 }
{ Function interface using a DLL, pure Delphi }

{$P- no open parameters ==> no maxlen byte}
{$V+ force var strings}
{$H- short only }

interface

uses
   sysutils,
   Windows,
   gmsgen,
   gxdefs;

type
   TErrorCallback = function(ErrCount:Integer; const Msg:ShortString):Integer; stdcall;
   TDataStoreProc = procedure(const Indx: TgdxUELIndex; const Vals: TgdxValues); stdcall;

//tries to load DLL from OS default location
//name for the DLL is automatic
function  gdxGetReady(var Msg: ShortString): boolean;
//tries to load DLL from main program directory; if that fails
//loads DLL from OS default location
//name for the DLL is automatic
function  gdxGetReadyX(var Msg: ShortString): boolean;
//loads DLL from specified directory
//name for the DLL is automatic
function gdxGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
//loads DLL from the full path specified
//no changes are made to the name (platform and file extension)
function gdxGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;

//tries to load DLL from OS default location
//name for the DLL is automatic
function gdxCreate(var pgdx: pointer; var Msg: ShortString): boolean;
//tries to load DLL from main program directory; if that fails
//loads DLL from OS default location
//name for the DLL is automatic
function gdxCreateX(var pgdx: pointer; var Msg: ShortString): boolean;
//loads DLL from specified directory
//name for the DLL is automatic
function gdxCreateD(var pgdx: pointer; const Dir: ShortString; var Msg: shortString): boolean;
//loads DLL from the full path specified
function gdxCreateL(var pgdx: pointer; const LibName: ShortString; var Msg: shortString): boolean;

//returns a handle
function  gdxGetHandle(pgdx: pointer): pointer;

procedure gdxFree  (var pgdx: pointer);
procedure gdxLibraryUnload;
function  gdxLibraryLoaded: boolean;

function  gdxGetScreenIndicator: boolean;
procedure gdxSetScreenIndicator(const ScrInd: boolean);
function  gdxGetExceptionIndicator: boolean;
procedure gdxSetExceptionIndicator(const ExcInd: boolean);
function  gdxGetExitIndicator: boolean;
procedure gdxSetExitIndicator(const ExtInd: boolean);
function  gdxGetErrorCount: Integer;
procedure gdxSetErrorCount(const ecnt: Integer);
function  gdxGetErrorCallback: TErrorCallback;
procedure gdxSetErrorCallback(ecb: TErrorCallback);
procedure gdxErrorHandling(const Msg: ShortString);

function  gdxFuncLoaded(address: pointer): boolean;

// functions and procedures
var gdxSetLoadPath          : procedure(const s: shortString); stdcall;
var gdxGetLoadPath          : procedure(var s: shortString); stdcall;
var gdxInitialize : procedure; stdcall;
var gdxFinalize   : procedure; stdcall;
var gdxAcronymAdd           : function (pgdx: pointer; const AName: ShortString; const Txt: ShortString; AIndx: Integer): Integer; stdcall;
var gdxAcronymCount         : function (pgdx: pointer): Integer; stdcall;
var gdxAcronymGetInfo       : function (pgdx: pointer; N: Integer; out AName: ShortString; out Txt: ShortString; out AIndx: Integer): Integer; stdcall;
var gdxAcronymGetMapping    : function (pgdx: pointer; N: Integer; out orgIndx: Integer; out newIndx: Integer; out autoIndex: Integer): Integer; stdcall;
var gdxAcronymIndex         : function (pgdx: pointer; V: Double): Integer; stdcall;
var gdxAcronymName          : function (pgdx: pointer; V: Double; out AName: ShortString): Integer; stdcall;
var gdxAcronymNextNr        : function (pgdx: pointer; NV: Integer): Integer; stdcall;
var gdxAcronymSetInfo       : function (pgdx: pointer; N: Integer; const AName: ShortString; const Txt: ShortString; AIndx: Integer): Integer; stdcall;
var gdxAcronymValue         : function (pgdx: pointer; AIndx: Integer): Double; stdcall;
var gdxAddAlias             : function (pgdx: pointer; const Id1: ShortString; const Id2: ShortString): Integer; stdcall;
var gdxAddSetText           : function (pgdx: pointer; const Txt: ShortString; out TxtNr: Integer): Integer; stdcall;
var gdxAutoConvert          : function (pgdx: pointer; NV: Integer): Integer; stdcall;
var gdxClose                : function (pgdx: pointer): Integer; stdcall;
var gdxDataErrorCount       : function (pgdx: pointer): Integer; stdcall;
var gdxDataErrorRecord      : function (pgdx: pointer; RecNr: Integer; var KeyInt: TgdxUELIndex; var Values: TgdxValues): Integer; stdcall;
var gdxDataReadDone         : function (pgdx: pointer): Integer; stdcall;
var gdxDataReadFilteredStart: function (pgdx: pointer; SyNr: Integer; const FilterAction: TgdxUELIndex; out NrRecs: Integer): Integer; stdcall;
var gdxDataReadMap          : function (pgdx: pointer; RecNr: Integer; var KeyInt: TgdxUELIndex; var Values: TgdxValues; out DimFrst: Integer): Integer; stdcall;
var gdxDataReadMapStart     : function (pgdx: pointer; SyNr: Integer; out NrRecs: Integer): Integer; stdcall;
var gdxDataReadRaw          : function (pgdx: pointer; var KeyInt: TgdxUELIndex; var Values: TgdxValues; out DimFrst: Integer): Integer; stdcall;
var gdxDataReadRawFast      : function (pgdx: pointer; SyNr: Integer; DP: TDataStoreProc; out NrRecs: Integer): Integer; stdcall;
var gdxDataReadRawStart     : function (pgdx: pointer; SyNr: Integer; out NrRecs: Integer): Integer; stdcall;
var gdxDataReadSlice        : function (pgdx: pointer; const UelFilterStr: TgdxStrIndex; out Dimen: Integer; DP: TDataStoreProc): Integer; stdcall;
var gdxDataReadSliceStart   : function (pgdx: pointer; SyNr: Integer; var ElemCounts: TgdxUELIndex): Integer; stdcall;
var gdxDataReadStr          : function (pgdx: pointer; out KeyStr: TgdxStrIndex; var Values: TgdxValues; out DimFrst: Integer): Integer; stdcall;
var gdxDataReadStrStart     : function (pgdx: pointer; SyNr: Integer; out NrRecs: Integer): Integer; stdcall;
var gdxDataSliceUELS        : function (pgdx: pointer; const SliceKeyInt: TgdxUELIndex; out KeyStr: TgdxStrIndex): Integer; stdcall;
var gdxDataWriteDone        : function (pgdx: pointer): Integer; stdcall;
var gdxDataWriteMap         : function (pgdx: pointer; const KeyInt: TgdxUELIndex; const Values: TgdxValues): Integer; stdcall;
var gdxDataWriteMapStart    : function (pgdx: pointer; const SyId: ShortString; const ExplTxt: ShortString; Dimen: Integer; Typ: Integer; UserInfo: Integer): Integer; stdcall;
var gdxDataWriteRaw         : function (pgdx: pointer; const KeyInt: TgdxUELIndex; const Values: TgdxValues): Integer; stdcall;
var gdxDataWriteRawStart    : function (pgdx: pointer; const SyId: ShortString; const ExplTxt: ShortString; Dimen: Integer; Typ: Integer; UserInfo: Integer): Integer; stdcall;
var gdxDataWriteStr         : function (pgdx: pointer; const KeyStr: TgdxStrIndex; const Values: TgdxValues): Integer; stdcall;
var gdxDataWriteStrStart    : function (pgdx: pointer; const SyId: ShortString; const ExplTxt: ShortString; Dimen: Integer; Typ: Integer; UserInfo: Integer): Integer; stdcall;
var gdxGetDLLVersion        : function (pgdx: pointer; out V: ShortString): Integer; stdcall;
var gdxErrorCount           : function (pgdx: pointer): Integer; stdcall;
var gdxErrorStr             : function (pgdx: pointer; ErrNr: Integer; out ErrMsg: ShortString): Integer; stdcall;
var gdxFileInfo             : function (pgdx: pointer; out FileVer: Integer; out ComprLev: Integer): Integer; stdcall;
var gdxFileVersion          : function (pgdx: pointer; out FileStr: ShortString; out ProduceStr: ShortString): Integer; stdcall;
var gdxFilterExists         : function (pgdx: pointer; FilterNr: Integer): Integer; stdcall;
var gdxFilterRegister       : function (pgdx: pointer; UelMap: Integer): Integer; stdcall;
var gdxFilterRegisterDone   : function (pgdx: pointer): Integer; stdcall;
var gdxFilterRegisterStart  : function (pgdx: pointer; FilterNr: Integer): Integer; stdcall;
var gdxFindSymbol           : function (pgdx: pointer; const SyId: ShortString; out SyNr: Integer): Integer; stdcall;
var gdxGetElemText          : function (pgdx: pointer; TxtNr: Integer; out Txt: ShortString; out Node: Integer): Integer; stdcall;
var gdxGetLastError         : function (pgdx: pointer): Integer; stdcall;
var gdxGetMemoryUsed        : function (pgdx: pointer): Int64; stdcall;
var gdxGetSpecialValues     : function (pgdx: pointer; var AVals: TgdxSVals): Integer; stdcall;
var gdxGetUEL               : function (pgdx: pointer; UelNr: Integer; out Uel: ShortString): Integer; stdcall;
var gdxMapValue             : function (pgdx: pointer; D: Double; out sv: Integer): Integer; stdcall;
var gdxOpenAppend           : function (pgdx: pointer; const FileName: ShortString; const Producer: ShortString; out ErrNr: Integer): Integer; stdcall;
var gdxOpenRead             : function (pgdx: pointer; const FileName: ShortString; out ErrNr: Integer): Integer; stdcall;
var gdxOpenWrite            : function (pgdx: pointer; const FileName: ShortString; const Producer: ShortString; out ErrNr: Integer): Integer; stdcall;
var gdxOpenWriteEx          : function (pgdx: pointer; const FileName: ShortString; const Producer: ShortString; Compr: Integer; out ErrNr: Integer): Integer; stdcall;
var gdxResetSpecialValues   : function (pgdx: pointer): Integer; stdcall;
var gdxSetHasText           : function (pgdx: pointer; SyNr: Integer): Integer; stdcall;
var gdxSetReadSpecialValues : function (pgdx: pointer; const AVals: TgdxSVals): Integer; stdcall;
var gdxSetSpecialValues     : function (pgdx: pointer; const AVals: TgdxSVals): Integer; stdcall;
var gdxSetTextNodeNr        : function (pgdx: pointer; TxtNr: Integer; Node: Integer): Integer; stdcall;
var gdxSetTraceLevel        : function (pgdx: pointer; N: Integer; const s: ShortString): Integer; stdcall;
var gdxSymbIndxMaxLength    : function (pgdx: pointer; SyNr: Integer; var LengthInfo: TgdxUELIndex): Integer; stdcall;
var gdxSymbMaxLength        : function (pgdx: pointer): Integer; stdcall;
var gdxSymbolAddComment     : function (pgdx: pointer; SyNr: Integer; const Txt: ShortString): Integer; stdcall;
var gdxSymbolGetComment     : function (pgdx: pointer; SyNr: Integer; N: Integer; out Txt: ShortString): Integer; stdcall;
var gdxSymbolGetDomain      : function (pgdx: pointer; SyNr: Integer; var DomainSyNrs: TgdxUELIndex): Integer; stdcall;
var gdxSymbolGetDomainX     : function (pgdx: pointer; SyNr: Integer; out DomainIDs: TgdxStrIndex): Integer; stdcall;
var gdxSymbolDim            : function (pgdx: pointer; SyNr: Integer): Integer; stdcall;
var gdxSymbolInfo           : function (pgdx: pointer; SyNr: Integer; out SyId: ShortString; out Dimen: Integer; out Typ: Integer): Integer; stdcall;
var gdxSymbolInfoX          : function (pgdx: pointer; SyNr: Integer; out RecCnt: Integer; out UserInfo: Integer; out ExplTxt: ShortString): Integer; stdcall;
var gdxSymbolSetDomain      : function (pgdx: pointer; const DomainIDs: TgdxStrIndex): Integer; stdcall;
var gdxSymbolSetDomainX     : function (pgdx: pointer; SyNr: Integer; const DomainIDs: TgdxStrIndex): Integer; stdcall;
var gdxSystemInfo           : function (pgdx: pointer; out SyCnt: Integer; out UelCnt: Integer): Integer; stdcall;
var gdxUELMaxLength         : function (pgdx: pointer): Integer; stdcall;
var gdxUELRegisterDone      : function (pgdx: pointer): Integer; stdcall;
var gdxUELRegisterMap       : function (pgdx: pointer; UMap: Integer; const Uel: ShortString): Integer; stdcall;
var gdxUELRegisterMapStart  : function (pgdx: pointer): Integer; stdcall;
var gdxUELRegisterRaw       : function (pgdx: pointer; const Uel: ShortString): Integer; stdcall;
var gdxUELRegisterRawStart  : function (pgdx: pointer): Integer; stdcall;
var gdxUELRegisterStr       : function (pgdx: pointer; const Uel: ShortString; out UelNr: Integer): Integer; stdcall;
var gdxUELRegisterStrStart  : function (pgdx: pointer): Integer; stdcall;
var gdxUMFindUEL            : function (pgdx: pointer; const Uel: ShortString; out UelNr: Integer; out UelMap: Integer): Integer; stdcall;
var gdxUMUelGet             : function (pgdx: pointer; UelNr: Integer; out Uel: ShortString; out UelMap: Integer): Integer; stdcall;
var gdxUMUelInfo            : function (pgdx: pointer; out UelCnt: Integer; out HighMap: Integer): Integer; stdcall;
var gdxCurrentDim           : function (pgdx: pointer): Integer; stdcall;
implementation

const
   APIVersion     = 7;
   DLLWrapsObject = true;
   Debug          = false;
{$IFDEF VER130}
// From Delphi7 system, sysutils units
   PathDelim  = {$IFDEF MSWINDOWS} '\'; {$ELSE} '/'; {$ENDIF}

type
   IntegerArray  = array[0..$effffff] of Integer;
   PIntegerArray = ^IntegerArray;

function ExcludeTrailingPathDelimiter(const S: string): string;
begin
Result := S;
if IsPathDelimiter(Result, Length(Result))
then
   SetLength(Result, Length(Result)-1);
end;
{$ENDIF}

var
   LibHandle         : THandle;
   LibFileName       : ShortString;
   ScreenIndicator   : Boolean = true;
   ExceptionIndicator: Boolean = false;
   ExitIndicator     : Boolean = true;
   ObjectCount       : Integer = 0;
   APIErrorCount     : Integer = 0;
   ErrorCallback     : TErrorCallback = nil;

var XCreate: procedure (var pgdx: pointer); stdcall;
var XFree  : procedure (var pgdx: pointer); stdcall;

var XAPIVersion: function (const api: integer; var msg: ShortString; var comp: Integer): Integer; stdcall;
var XCheck: function (const funcn: shortString; const NrArg: integer; const sign: PIntegerArray; var msg: ShortString): Integer; stdcall;

Function  d_gdxAcronymAdd(pgdx: pointer; const AName: ShortString; const Txt: ShortString; AIndx: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;d_sign[3] := 3;
XCheck('gdxAcronymAdd', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymAdd could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymCount(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxAcronymCount', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymGetInfo(pgdx: pointer; N: Integer; out AName: ShortString; out Txt: ShortString; out AIndx: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 12;d_sign[4] := 4;
XCheck('gdxAcronymGetInfo', 4, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymGetInfo could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymGetMapping(pgdx: pointer; N: Integer; out orgIndx: Integer; out newIndx: Integer; out autoIndex: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;d_sign[3] := 4;d_sign[4] := 4;
XCheck('gdxAcronymGetMapping', 4, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymGetMapping could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymIndex(pgdx: pointer; V: Double): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 13;
XCheck('gdxAcronymIndex', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymIndex could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymName(pgdx: pointer; V: Double; out AName: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 13;d_sign[2] := 12;
XCheck('gdxAcronymName', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymName could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymNextNr(pgdx: pointer; NV: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('gdxAcronymNextNr', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymNextNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymSetInfo(pgdx: pointer; N: Integer; const AName: ShortString; const Txt: ShortString; AIndx: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 11;d_sign[3] := 11;d_sign[4] := 3;
XCheck('gdxAcronymSetInfo', 4, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymSetInfo could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAcronymValue(pgdx: pointer; AIndx: Integer): Double; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 13;d_sign[1] := 3;
XCheck('gdxAcronymValue', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxAcronymValue could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0.0;
end;

Function  d_gdxAddAlias(pgdx: pointer; const Id1: ShortString; const Id2: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;
XCheck('gdxAddAlias', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxAddAlias could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAddSetText(pgdx: pointer; const Txt: ShortString; out TxtNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 4;
XCheck('gdxAddSetText', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxAddSetText could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxAutoConvert(pgdx: pointer; NV: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('gdxAutoConvert', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxAutoConvert could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxClose(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxClose', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxClose could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataErrorCount(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxDataErrorCount', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxDataErrorCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataErrorRecord(pgdx: pointer; RecNr: Integer; var KeyInt: TgdxUELIndex; var Values: TgdxValues): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 52;d_sign[3] := 54;
XCheck('gdxDataErrorRecord', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxDataErrorRecord could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadDone(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxDataReadDone', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadDone could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadFilteredStart(pgdx: pointer; SyNr: Integer; const FilterAction: TgdxUELIndex; out NrRecs: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 51;d_sign[3] := 4;
XCheck('gdxDataReadFilteredStart', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadFilteredStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadMap(pgdx: pointer; RecNr: Integer; var KeyInt: TgdxUELIndex; var Values: TgdxValues; out DimFrst: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 52;d_sign[3] := 54;d_sign[4] := 4;
XCheck('gdxDataReadMap', 4, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadMap could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadMapStart(pgdx: pointer; SyNr: Integer; out NrRecs: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('gdxDataReadMapStart', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadMapStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadRaw(pgdx: pointer; var KeyInt: TgdxUELIndex; var Values: TgdxValues; out DimFrst: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 52;d_sign[2] := 54;d_sign[3] := 4;
XCheck('gdxDataReadRaw', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadRaw could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadRawFast(pgdx: pointer; SyNr: Integer; DP: TDataStoreProc; out NrRecs: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 59;d_sign[3] := 4;
XCheck('gdxDataReadRawFast', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadRawFast could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadRawStart(pgdx: pointer; SyNr: Integer; out NrRecs: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('gdxDataReadRawStart', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadRawStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadSlice(pgdx: pointer; const UelFilterStr: TgdxStrIndex; out Dimen: Integer; DP: TDataStoreProc): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 55;d_sign[2] := 4;d_sign[3] := 59;
XCheck('gdxDataReadSlice', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadSlice could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadSliceStart(pgdx: pointer; SyNr: Integer; var ElemCounts: TgdxUELIndex): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 52;
XCheck('gdxDataReadSliceStart', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadSliceStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadStr(pgdx: pointer; out KeyStr: TgdxStrIndex; var Values: TgdxValues; out DimFrst: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 56;d_sign[2] := 54;d_sign[3] := 4;
XCheck('gdxDataReadStr', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataReadStrStart(pgdx: pointer; SyNr: Integer; out NrRecs: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('gdxDataReadStrStart', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataReadStrStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataSliceUELS(pgdx: pointer; const SliceKeyInt: TgdxUELIndex; out KeyStr: TgdxStrIndex): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 51;d_sign[2] := 56;
XCheck('gdxDataSliceUELS', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataSliceUELS could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataWriteDone(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxDataWriteDone', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxDataWriteDone could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataWriteMap(pgdx: pointer; const KeyInt: TgdxUELIndex; const Values: TgdxValues): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 51;d_sign[2] := 53;
XCheck('gdxDataWriteMap', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataWriteMap could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataWriteMapStart(pgdx: pointer; const SyId: ShortString; const ExplTxt: ShortString; Dimen: Integer; Typ: Integer; UserInfo: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..5] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;d_sign[3] := 3;d_sign[4] := 3;d_sign[5] := 3;
XCheck('gdxDataWriteMapStart', 5, @d_sign, d_Msg);
gdxErrorHandling('gdxDataWriteMapStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataWriteRaw(pgdx: pointer; const KeyInt: TgdxUELIndex; const Values: TgdxValues): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 51;d_sign[2] := 53;
XCheck('gdxDataWriteRaw', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataWriteRaw could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataWriteRawStart(pgdx: pointer; const SyId: ShortString; const ExplTxt: ShortString; Dimen: Integer; Typ: Integer; UserInfo: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..5] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;d_sign[3] := 3;d_sign[4] := 3;d_sign[5] := 3;
XCheck('gdxDataWriteRawStart', 5, @d_sign, d_Msg);
gdxErrorHandling('gdxDataWriteRawStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataWriteStr(pgdx: pointer; const KeyStr: TgdxStrIndex; const Values: TgdxValues): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 55;d_sign[2] := 53;
XCheck('gdxDataWriteStr', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxDataWriteStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxDataWriteStrStart(pgdx: pointer; const SyId: ShortString; const ExplTxt: ShortString; Dimen: Integer; Typ: Integer; UserInfo: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..5] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;d_sign[3] := 3;d_sign[4] := 3;d_sign[5] := 3;
XCheck('gdxDataWriteStrStart', 5, @d_sign, d_Msg);
gdxErrorHandling('gdxDataWriteStrStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxGetDLLVersion(pgdx: pointer; out V: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 12;
XCheck('gdxGetDLLVersion', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxGetDLLVersion could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxErrorCount(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxErrorCount', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxErrorCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxErrorStr(pgdx: pointer; ErrNr: Integer; out ErrMsg: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;
XCheck('gdxErrorStr', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxErrorStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxFileInfo(pgdx: pointer; out FileVer: Integer; out ComprLev: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 4;d_sign[2] := 4;
XCheck('gdxFileInfo', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxFileInfo could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxFileVersion(pgdx: pointer; out FileStr: ShortString; out ProduceStr: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 12;d_sign[2] := 12;
XCheck('gdxFileVersion', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxFileVersion could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxFilterExists(pgdx: pointer; FilterNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('gdxFilterExists', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxFilterExists could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxFilterRegister(pgdx: pointer; UelMap: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('gdxFilterRegister', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxFilterRegister could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxFilterRegisterDone(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxFilterRegisterDone', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxFilterRegisterDone could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxFilterRegisterStart(pgdx: pointer; FilterNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('gdxFilterRegisterStart', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxFilterRegisterStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxFindSymbol(pgdx: pointer; const SyId: ShortString; out SyNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 4;
XCheck('gdxFindSymbol', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxFindSymbol could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxGetElemText(pgdx: pointer; TxtNr: Integer; out Txt: ShortString; out Node: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;
XCheck('gdxGetElemText', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxGetElemText could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxGetLastError(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxGetLastError', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxGetLastError could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxGetMemoryUsed(pgdx: pointer): Int64; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 23;
XCheck('gdxGetMemoryUsed', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxGetMemoryUsed could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxGetSpecialValues(pgdx: pointer; var AVals: TgdxSVals): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 58;
XCheck('gdxGetSpecialValues', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxGetSpecialValues could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxGetUEL(pgdx: pointer; UelNr: Integer; out Uel: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;
XCheck('gdxGetUEL', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxGetUEL could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxMapValue(pgdx: pointer; D: Double; out sv: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 13;d_sign[2] := 4;
XCheck('gdxMapValue', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxMapValue could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxOpenAppend(pgdx: pointer; const FileName: ShortString; const Producer: ShortString; out ErrNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;d_sign[3] := 4;
XCheck('gdxOpenAppend', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxOpenAppend could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxOpenRead(pgdx: pointer; const FileName: ShortString; out ErrNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 4;
XCheck('gdxOpenRead', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxOpenRead could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxOpenWrite(pgdx: pointer; const FileName: ShortString; const Producer: ShortString; out ErrNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;d_sign[3] := 4;
XCheck('gdxOpenWrite', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxOpenWrite could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxOpenWriteEx(pgdx: pointer; const FileName: ShortString; const Producer: ShortString; Compr: Integer; out ErrNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 11;d_sign[3] := 3;d_sign[4] := 4;
XCheck('gdxOpenWriteEx', 4, @d_sign, d_Msg);
gdxErrorHandling('gdxOpenWriteEx could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxResetSpecialValues(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxResetSpecialValues', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxResetSpecialValues could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSetHasText(pgdx: pointer; SyNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('gdxSetHasText', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxSetHasText could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSetReadSpecialValues(pgdx: pointer; const AVals: TgdxSVals): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 57;
XCheck('gdxSetReadSpecialValues', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxSetReadSpecialValues could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSetSpecialValues(pgdx: pointer; const AVals: TgdxSVals): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 57;
XCheck('gdxSetSpecialValues', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxSetSpecialValues could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSetTextNodeNr(pgdx: pointer; TxtNr: Integer; Node: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;
XCheck('gdxSetTextNodeNr', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSetTextNodeNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSetTraceLevel(pgdx: pointer; N: Integer; const s: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 11;
XCheck('gdxSetTraceLevel', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSetTraceLevel could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbIndxMaxLength(pgdx: pointer; SyNr: Integer; var LengthInfo: TgdxUELIndex): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 52;
XCheck('gdxSymbIndxMaxLength', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbIndxMaxLength could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbMaxLength(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxSymbMaxLength', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbMaxLength could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolAddComment(pgdx: pointer; SyNr: Integer; const Txt: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 11;
XCheck('gdxSymbolAddComment', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolAddComment could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolGetComment(pgdx: pointer; SyNr: Integer; N: Integer; out Txt: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 12;
XCheck('gdxSymbolGetComment', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolGetComment could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolGetDomain(pgdx: pointer; SyNr: Integer; var DomainSyNrs: TgdxUELIndex): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 52;
XCheck('gdxSymbolGetDomain', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolGetDomain could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolGetDomainX(pgdx: pointer; SyNr: Integer; out DomainIDs: TgdxStrIndex): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 56;
XCheck('gdxSymbolGetDomainX', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolGetDomainX could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolDim(pgdx: pointer; SyNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('gdxSymbolDim', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolDim could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolInfo(pgdx: pointer; SyNr: Integer; out SyId: ShortString; out Dimen: Integer; out Typ: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;d_sign[4] := 4;
XCheck('gdxSymbolInfo', 4, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolInfo could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolInfoX(pgdx: pointer; SyNr: Integer; out RecCnt: Integer; out UserInfo: Integer; out ExplTxt: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;d_sign[3] := 4;d_sign[4] := 12;
XCheck('gdxSymbolInfoX', 4, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolInfoX could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolSetDomain(pgdx: pointer; const DomainIDs: TgdxStrIndex): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 55;
XCheck('gdxSymbolSetDomain', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolSetDomain could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSymbolSetDomainX(pgdx: pointer; SyNr: Integer; const DomainIDs: TgdxStrIndex): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 55;
XCheck('gdxSymbolSetDomainX', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSymbolSetDomainX could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxSystemInfo(pgdx: pointer; out SyCnt: Integer; out UelCnt: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 4;d_sign[2] := 4;
XCheck('gdxSystemInfo', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxSystemInfo could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELMaxLength(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxUELMaxLength', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxUELMaxLength could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELRegisterDone(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxUELRegisterDone', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxUELRegisterDone could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELRegisterMap(pgdx: pointer; UMap: Integer; const Uel: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 11;
XCheck('gdxUELRegisterMap', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxUELRegisterMap could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELRegisterMapStart(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxUELRegisterMapStart', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxUELRegisterMapStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELRegisterRaw(pgdx: pointer; const Uel: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;
XCheck('gdxUELRegisterRaw', 1, @d_sign, d_Msg);
gdxErrorHandling('gdxUELRegisterRaw could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELRegisterRawStart(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxUELRegisterRawStart', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxUELRegisterRawStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELRegisterStr(pgdx: pointer; const Uel: ShortString; out UelNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 4;
XCheck('gdxUELRegisterStr', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxUELRegisterStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUELRegisterStrStart(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxUELRegisterStrStart', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxUELRegisterStrStart could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUMFindUEL(pgdx: pointer; const Uel: ShortString; out UelNr: Integer; out UelMap: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 4;d_sign[3] := 4;
XCheck('gdxUMFindUEL', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxUMFindUEL could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUMUelGet(pgdx: pointer; UelNr: Integer; out Uel: ShortString; out UelMap: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;
XCheck('gdxUMUelGet', 3, @d_sign, d_Msg);
gdxErrorHandling('gdxUMUelGet could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxUMUelInfo(pgdx: pointer; out UelCnt: Integer; out HighMap: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 4;d_sign[2] := 4;
XCheck('gdxUMUelInfo', 2, @d_sign, d_Msg);
gdxErrorHandling('gdxUMUelInfo could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_gdxCurrentDim(pgdx: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('gdxCurrentDim', 0, @d_sign, d_Msg);
gdxErrorHandling('gdxCurrentDim could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

function  gdxGetScreenIndicator: boolean;
begin
Result := ScreenIndicator;
end;

procedure gdxSetScreenIndicator(const ScrInd: boolean);
begin
ScreenIndicator := ScrInd;
end;

function  gdxGetExceptionIndicator: boolean;
begin
Result := ExceptionIndicator;
end;

procedure gdxSetExceptionIndicator(const ExcInd: boolean);
begin
ExceptionIndicator := ExcInd;
end;

function  gdxGetExitIndicator: boolean;
begin
Result := ExitIndicator;
end;

procedure gdxSetExitIndicator(const ExtInd: boolean);
begin
ExitIndicator := ExtInd;
end;

function  gdxGetErrorCount: Integer;
begin
Result := APIErrorCount;
end;

procedure gdxSetErrorCount(const ecnt: Integer);
begin
APIErrorCount := ecnt;
end;

function  gdxGetErrorCallback: TErrorCallback;
begin
Result := @ErrorCallback;
end;

procedure gdxSetErrorCallback(ecb: TErrorCallback);
begin
ErrorCallback := ecb;
end;

Procedure gdxErrorHandling(const Msg: ShortString);
begin
inc(APIErrorCount);
if ScreenIndicator then begin writeln(Msg); flush(output); end;
assert(not ExceptionIndicator, Msg);
if (@ErrorCallback <> nil) and (ErrorCallback(APIErrorCount, Msg) <> 0) then halt(123);
if ExitIndicator then halt(123);
end;

const NoOfEntryPts = 84;
var AddrOfFuncLoaded: Array[1..NoOfEntryPts] of Pointer;

function gdxFuncLoaded(address: pointer): boolean;
var
   cnt: Integer;
begin
result := false;
for cnt:=1 to NoOfEntryPts
do if address = AddrOfFuncLoaded[cnt]
   then
      begin
      result := true;
      break;
      end;
end;

function XLibraryLoad(var LoadMsg: ShortString): boolean;
var
   comp: Integer;
   sign: Array[0..5] of Integer;
   funcCount: Integer;

   function LoadEntry(const Name: ShortString; const NoArgs: Integer; const d_x: Pointer): pointer;
   var
      NameX: Ansistring;
   begin
   Result := nil;
   if (comp >= 0) then inc(funcCount);
   if (comp < 0) or (XCheck(Name, NoArgs, @sign, LoadMsg) > 0)
   then
      begin
      NameX := LowerCase(Name);
      Result := GetProcAddress(LibHandle, PAnsiChar(NameX));
      if Result = nil
      then
         begin
         NameX := Name;
         Result := GetProcAddress(LibHandle, PAnsiChar(NameX));
         end;
      if Result = nil
      then
         begin
         NameX := UpperCase(Name);
         Result := GetProcAddress(LibHandle, PAnsiChar(NameX));
         end;
      if Result = nil
      then
         LoadMsg := 'Entry not found: ' + Name + ' in ' + LibFileName;
      end;
   if (comp >= 0) then AddrOfFuncLoaded[funcCount] := Result;
   if Result = nil
   then
      Result := d_x;
   if Debug and (LoadMsg <> '') then gdxErrorHandling(LoadMsg);
   end;

var
{$IF RTLVersion < 20}      //versions before Delphi2009
   LibFileNameX: AnsiString;
{$ELSE}
   LibFileNameX: WideString;
{$IFEND}
begin
Result  := false;
LoadMsg := '';
if LibHandle <> 0
then
   begin
   Result := true;
   exit;
   end;

LibFileNameX := LibFileName;
{$IF RTLVersion < 20}
LibHandle := LoadLibrary(PAnsiChar(LibFileNameX));
{$ELSE}
LibHandle := LoadLibrary(PWideChar(LibFileNameX));
{$IFEND}
if LibHandle = 0
then
   begin
   LoadMsg := 'Cannot load library ' + LibFileName;
   exit;
   end;

comp := -1;
funcCount := 0;
@gdxSetLoadPath := LoadEntry('gdxSetLoadPath', 0, nil);
@gdxGetLoadPath := LoadEntry('gdxGetLoadPath', 0, nil);
LoadMsg := '';  //not an error
if DLLWrapsObject
then
   begin
   @XCreate := LoadEntry('XCreate', 0, nil);
   if @XCreate = nil then exit;
   @XFree   := LoadEntry('XFree', 0, nil);
   if @XFree = nil then exit;
   end;
@XCheck := LoadEntry('XCheck', 0, nil);
if @XCheck = nil then exit;
@XAPIVersion := LoadEntry('XAPIVersion', 0, nil);
if @XAPIVersion = nil then exit;

@gdxInitialize := LoadEntry('gdxInitialize', 0, nil);
@gdxFinalize   := LoadEntry('gdxFinalize', 0, nil);
if @gdxInitialize <> nil then gdxInitialize;
if (XAPIVersion(APIversion, LoadMsg, comp) = 0)
then
   exit;

funcCount := 0;
sign[0] := 3;sign[1] := 11;sign[2] := 11;sign[3] := 3;
@gdxAcronymAdd := LoadEntry('gdxAcronymAdd', 3, @d_gdxAcronymAdd);
sign[0] := 3;
@gdxAcronymCount := LoadEntry('gdxAcronymCount', 0, @d_gdxAcronymCount);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;sign[4] := 4;
@gdxAcronymGetInfo := LoadEntry('gdxAcronymGetInfo', 4, @d_gdxAcronymGetInfo);
sign[0] := 3;sign[1] := 3;sign[2] := 4;sign[3] := 4;sign[4] := 4;
@gdxAcronymGetMapping := LoadEntry('gdxAcronymGetMapping', 4, @d_gdxAcronymGetMapping);
sign[0] := 3;sign[1] := 13;
@gdxAcronymIndex := LoadEntry('gdxAcronymIndex', 1, @d_gdxAcronymIndex);
sign[0] := 3;sign[1] := 13;sign[2] := 12;
@gdxAcronymName := LoadEntry('gdxAcronymName', 2, @d_gdxAcronymName);
sign[0] := 3;sign[1] := 3;
@gdxAcronymNextNr := LoadEntry('gdxAcronymNextNr', 1, @d_gdxAcronymNextNr);
sign[0] := 3;sign[1] := 3;sign[2] := 11;sign[3] := 11;sign[4] := 3;
@gdxAcronymSetInfo := LoadEntry('gdxAcronymSetInfo', 4, @d_gdxAcronymSetInfo);
sign[0] := 13;sign[1] := 3;
@gdxAcronymValue := LoadEntry('gdxAcronymValue', 1, @d_gdxAcronymValue);
sign[0] := 3;sign[1] := 11;sign[2] := 11;
@gdxAddAlias := LoadEntry('gdxAddAlias', 2, @d_gdxAddAlias);
sign[0] := 3;sign[1] := 11;sign[2] := 4;
@gdxAddSetText := LoadEntry('gdxAddSetText', 2, @d_gdxAddSetText);
sign[0] := 3;sign[1] := 3;
@gdxAutoConvert := LoadEntry('gdxAutoConvert', 1, @d_gdxAutoConvert);
sign[0] := 3;
@gdxClose := LoadEntry('gdxClose', 0, @d_gdxClose);
sign[0] := 3;
@gdxDataErrorCount := LoadEntry('gdxDataErrorCount', 0, @d_gdxDataErrorCount);
sign[0] := 3;sign[1] := 3;sign[2] := 52;sign[3] := 54;
@gdxDataErrorRecord := LoadEntry('gdxDataErrorRecord', 3, @d_gdxDataErrorRecord);
sign[0] := 3;
@gdxDataReadDone := LoadEntry('gdxDataReadDone', 0, @d_gdxDataReadDone);
sign[0] := 3;sign[1] := 3;sign[2] := 51;sign[3] := 4;
@gdxDataReadFilteredStart := LoadEntry('gdxDataReadFilteredStart', 3, @d_gdxDataReadFilteredStart);
sign[0] := 3;sign[1] := 3;sign[2] := 52;sign[3] := 54;sign[4] := 4;
@gdxDataReadMap := LoadEntry('gdxDataReadMap', 4, @d_gdxDataReadMap);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@gdxDataReadMapStart := LoadEntry('gdxDataReadMapStart', 2, @d_gdxDataReadMapStart);
sign[0] := 3;sign[1] := 52;sign[2] := 54;sign[3] := 4;
@gdxDataReadRaw := LoadEntry('gdxDataReadRaw', 3, @d_gdxDataReadRaw);
sign[0] := 3;sign[1] := 3;sign[2] := 59;sign[3] := 4;
@gdxDataReadRawFast := LoadEntry('gdxDataReadRawFast', 3, @d_gdxDataReadRawFast);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@gdxDataReadRawStart := LoadEntry('gdxDataReadRawStart', 2, @d_gdxDataReadRawStart);
sign[0] := 3;sign[1] := 55;sign[2] := 4;sign[3] := 59;
@gdxDataReadSlice := LoadEntry('gdxDataReadSlice', 3, @d_gdxDataReadSlice);
sign[0] := 3;sign[1] := 3;sign[2] := 52;
@gdxDataReadSliceStart := LoadEntry('gdxDataReadSliceStart', 2, @d_gdxDataReadSliceStart);
sign[0] := 3;sign[1] := 56;sign[2] := 54;sign[3] := 4;
@gdxDataReadStr := LoadEntry('gdxDataReadStr', 3, @d_gdxDataReadStr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@gdxDataReadStrStart := LoadEntry('gdxDataReadStrStart', 2, @d_gdxDataReadStrStart);
sign[0] := 3;sign[1] := 51;sign[2] := 56;
@gdxDataSliceUELS := LoadEntry('gdxDataSliceUELS', 2, @d_gdxDataSliceUELS);
sign[0] := 3;
@gdxDataWriteDone := LoadEntry('gdxDataWriteDone', 0, @d_gdxDataWriteDone);
sign[0] := 3;sign[1] := 51;sign[2] := 53;
@gdxDataWriteMap := LoadEntry('gdxDataWriteMap', 2, @d_gdxDataWriteMap);
sign[0] := 3;sign[1] := 11;sign[2] := 11;sign[3] := 3;sign[4] := 3;sign[5] := 3;
@gdxDataWriteMapStart := LoadEntry('gdxDataWriteMapStart', 5, @d_gdxDataWriteMapStart);
sign[0] := 3;sign[1] := 51;sign[2] := 53;
@gdxDataWriteRaw := LoadEntry('gdxDataWriteRaw', 2, @d_gdxDataWriteRaw);
sign[0] := 3;sign[1] := 11;sign[2] := 11;sign[3] := 3;sign[4] := 3;sign[5] := 3;
@gdxDataWriteRawStart := LoadEntry('gdxDataWriteRawStart', 5, @d_gdxDataWriteRawStart);
sign[0] := 3;sign[1] := 55;sign[2] := 53;
@gdxDataWriteStr := LoadEntry('gdxDataWriteStr', 2, @d_gdxDataWriteStr);
sign[0] := 3;sign[1] := 11;sign[2] := 11;sign[3] := 3;sign[4] := 3;sign[5] := 3;
@gdxDataWriteStrStart := LoadEntry('gdxDataWriteStrStart', 5, @d_gdxDataWriteStrStart);
sign[0] := 3;sign[1] := 12;
@gdxGetDLLVersion := LoadEntry('gdxGetDLLVersion', 1, @d_gdxGetDLLVersion);
sign[0] := 3;
@gdxErrorCount := LoadEntry('gdxErrorCount', 0, @d_gdxErrorCount);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@gdxErrorStr := LoadEntry('gdxErrorStr', 2, @d_gdxErrorStr);
sign[0] := 3;sign[1] := 4;sign[2] := 4;
@gdxFileInfo := LoadEntry('gdxFileInfo', 2, @d_gdxFileInfo);
sign[0] := 3;sign[1] := 12;sign[2] := 12;
@gdxFileVersion := LoadEntry('gdxFileVersion', 2, @d_gdxFileVersion);
sign[0] := 3;sign[1] := 3;
@gdxFilterExists := LoadEntry('gdxFilterExists', 1, @d_gdxFilterExists);
sign[0] := 3;sign[1] := 3;
@gdxFilterRegister := LoadEntry('gdxFilterRegister', 1, @d_gdxFilterRegister);
sign[0] := 3;
@gdxFilterRegisterDone := LoadEntry('gdxFilterRegisterDone', 0, @d_gdxFilterRegisterDone);
sign[0] := 3;sign[1] := 3;
@gdxFilterRegisterStart := LoadEntry('gdxFilterRegisterStart', 1, @d_gdxFilterRegisterStart);
sign[0] := 3;sign[1] := 11;sign[2] := 4;
@gdxFindSymbol := LoadEntry('gdxFindSymbol', 2, @d_gdxFindSymbol);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;
@gdxGetElemText := LoadEntry('gdxGetElemText', 3, @d_gdxGetElemText);
sign[0] := 3;
@gdxGetLastError := LoadEntry('gdxGetLastError', 0, @d_gdxGetLastError);
sign[0] := 23;
@gdxGetMemoryUsed := LoadEntry('gdxGetMemoryUsed', 0, @d_gdxGetMemoryUsed);
sign[0] := 3;sign[1] := 58;
@gdxGetSpecialValues := LoadEntry('gdxGetSpecialValues', 1, @d_gdxGetSpecialValues);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@gdxGetUEL := LoadEntry('gdxGetUEL', 2, @d_gdxGetUEL);
sign[0] := 3;sign[1] := 13;sign[2] := 4;
@gdxMapValue := LoadEntry('gdxMapValue', 2, @d_gdxMapValue);
sign[0] := 3;sign[1] := 11;sign[2] := 11;sign[3] := 4;
@gdxOpenAppend := LoadEntry('gdxOpenAppend', 3, @d_gdxOpenAppend);
sign[0] := 3;sign[1] := 11;sign[2] := 4;
@gdxOpenRead := LoadEntry('gdxOpenRead', 2, @d_gdxOpenRead);
sign[0] := 3;sign[1] := 11;sign[2] := 11;sign[3] := 4;
@gdxOpenWrite := LoadEntry('gdxOpenWrite', 3, @d_gdxOpenWrite);
sign[0] := 3;sign[1] := 11;sign[2] := 11;sign[3] := 3;sign[4] := 4;
@gdxOpenWriteEx := LoadEntry('gdxOpenWriteEx', 4, @d_gdxOpenWriteEx);
sign[0] := 3;
@gdxResetSpecialValues := LoadEntry('gdxResetSpecialValues', 0, @d_gdxResetSpecialValues);
sign[0] := 3;sign[1] := 3;
@gdxSetHasText := LoadEntry('gdxSetHasText', 1, @d_gdxSetHasText);
sign[0] := 3;sign[1] := 57;
@gdxSetReadSpecialValues := LoadEntry('gdxSetReadSpecialValues', 1, @d_gdxSetReadSpecialValues);
sign[0] := 3;sign[1] := 57;
@gdxSetSpecialValues := LoadEntry('gdxSetSpecialValues', 1, @d_gdxSetSpecialValues);
sign[0] := 3;sign[1] := 3;sign[2] := 3;
@gdxSetTextNodeNr := LoadEntry('gdxSetTextNodeNr', 2, @d_gdxSetTextNodeNr);
sign[0] := 3;sign[1] := 3;sign[2] := 11;
@gdxSetTraceLevel := LoadEntry('gdxSetTraceLevel', 2, @d_gdxSetTraceLevel);
sign[0] := 3;sign[1] := 3;sign[2] := 52;
@gdxSymbIndxMaxLength := LoadEntry('gdxSymbIndxMaxLength', 2, @d_gdxSymbIndxMaxLength);
sign[0] := 3;
@gdxSymbMaxLength := LoadEntry('gdxSymbMaxLength', 0, @d_gdxSymbMaxLength);
sign[0] := 3;sign[1] := 3;sign[2] := 11;
@gdxSymbolAddComment := LoadEntry('gdxSymbolAddComment', 2, @d_gdxSymbolAddComment);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@gdxSymbolGetComment := LoadEntry('gdxSymbolGetComment', 3, @d_gdxSymbolGetComment);
sign[0] := 3;sign[1] := 3;sign[2] := 52;
@gdxSymbolGetDomain := LoadEntry('gdxSymbolGetDomain', 2, @d_gdxSymbolGetDomain);
sign[0] := 3;sign[1] := 3;sign[2] := 56;
@gdxSymbolGetDomainX := LoadEntry('gdxSymbolGetDomainX', 2, @d_gdxSymbolGetDomainX);
sign[0] := 3;sign[1] := 3;
@gdxSymbolDim := LoadEntry('gdxSymbolDim', 1, @d_gdxSymbolDim);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 4;
@gdxSymbolInfo := LoadEntry('gdxSymbolInfo', 4, @d_gdxSymbolInfo);
sign[0] := 3;sign[1] := 3;sign[2] := 4;sign[3] := 4;sign[4] := 12;
@gdxSymbolInfoX := LoadEntry('gdxSymbolInfoX', 4, @d_gdxSymbolInfoX);
sign[0] := 3;sign[1] := 55;
@gdxSymbolSetDomain := LoadEntry('gdxSymbolSetDomain', 1, @d_gdxSymbolSetDomain);
sign[0] := 3;sign[1] := 3;sign[2] := 55;
@gdxSymbolSetDomainX := LoadEntry('gdxSymbolSetDomainX', 2, @d_gdxSymbolSetDomainX);
sign[0] := 3;sign[1] := 4;sign[2] := 4;
@gdxSystemInfo := LoadEntry('gdxSystemInfo', 2, @d_gdxSystemInfo);
sign[0] := 3;
@gdxUELMaxLength := LoadEntry('gdxUELMaxLength', 0, @d_gdxUELMaxLength);
sign[0] := 3;
@gdxUELRegisterDone := LoadEntry('gdxUELRegisterDone', 0, @d_gdxUELRegisterDone);
sign[0] := 3;sign[1] := 3;sign[2] := 11;
@gdxUELRegisterMap := LoadEntry('gdxUELRegisterMap', 2, @d_gdxUELRegisterMap);
sign[0] := 3;
@gdxUELRegisterMapStart := LoadEntry('gdxUELRegisterMapStart', 0, @d_gdxUELRegisterMapStart);
sign[0] := 3;sign[1] := 11;
@gdxUELRegisterRaw := LoadEntry('gdxUELRegisterRaw', 1, @d_gdxUELRegisterRaw);
sign[0] := 3;
@gdxUELRegisterRawStart := LoadEntry('gdxUELRegisterRawStart', 0, @d_gdxUELRegisterRawStart);
sign[0] := 3;sign[1] := 11;sign[2] := 4;
@gdxUELRegisterStr := LoadEntry('gdxUELRegisterStr', 2, @d_gdxUELRegisterStr);
sign[0] := 3;
@gdxUELRegisterStrStart := LoadEntry('gdxUELRegisterStrStart', 0, @d_gdxUELRegisterStrStart);
sign[0] := 3;sign[1] := 11;sign[2] := 4;sign[3] := 4;
@gdxUMFindUEL := LoadEntry('gdxUMFindUEL', 3, @d_gdxUMFindUEL);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;
@gdxUMUelGet := LoadEntry('gdxUMUelGet', 3, @d_gdxUMUelGet);
sign[0] := 3;sign[1] := 4;sign[2] := 4;
@gdxUMUelInfo := LoadEntry('gdxUMUelInfo', 2, @d_gdxUMUelInfo);
sign[0] := 3;
@gdxCurrentDim := LoadEntry('gdxCurrentDim', 0, @d_gdxCurrentDim);
Result := true;
end;

procedure XLibraryUnload;
begin
if LibHandle <> 0
then
   begin
   if @gdxFinalize <> nil
   then
      gdxFinalize;

   FreeLibrary(LibHandle);
   LibHandle := 0;
   end;

@XCreate                       := nil;
@XFree                         := nil;
@gdxInitialize                 := nil;
@gdxFinalize                   := nil;
@gdxAcronymAdd                 := nil;
@gdxAcronymCount               := nil;
@gdxAcronymGetInfo             := nil;
@gdxAcronymGetMapping          := nil;
@gdxAcronymIndex               := nil;
@gdxAcronymName                := nil;
@gdxAcronymNextNr              := nil;
@gdxAcronymSetInfo             := nil;
@gdxAcronymValue               := nil;
@gdxAddAlias                   := nil;
@gdxAddSetText                 := nil;
@gdxAutoConvert                := nil;
@gdxClose                      := nil;
@gdxDataErrorCount             := nil;
@gdxDataErrorRecord            := nil;
@gdxDataReadDone               := nil;
@gdxDataReadFilteredStart      := nil;
@gdxDataReadMap                := nil;
@gdxDataReadMapStart           := nil;
@gdxDataReadRaw                := nil;
@gdxDataReadRawFast            := nil;
@gdxDataReadRawStart           := nil;
@gdxDataReadSlice              := nil;
@gdxDataReadSliceStart         := nil;
@gdxDataReadStr                := nil;
@gdxDataReadStrStart           := nil;
@gdxDataSliceUELS              := nil;
@gdxDataWriteDone              := nil;
@gdxDataWriteMap               := nil;
@gdxDataWriteMapStart          := nil;
@gdxDataWriteRaw               := nil;
@gdxDataWriteRawStart          := nil;
@gdxDataWriteStr               := nil;
@gdxDataWriteStrStart          := nil;
@gdxGetDLLVersion              := nil;
@gdxErrorCount                 := nil;
@gdxErrorStr                   := nil;
@gdxFileInfo                   := nil;
@gdxFileVersion                := nil;
@gdxFilterExists               := nil;
@gdxFilterRegister             := nil;
@gdxFilterRegisterDone         := nil;
@gdxFilterRegisterStart        := nil;
@gdxFindSymbol                 := nil;
@gdxGetElemText                := nil;
@gdxGetLastError               := nil;
@gdxGetMemoryUsed              := nil;
@gdxGetSpecialValues           := nil;
@gdxGetUEL                     := nil;
@gdxMapValue                   := nil;
@gdxOpenAppend                 := nil;
@gdxOpenRead                   := nil;
@gdxOpenWrite                  := nil;
@gdxOpenWriteEx                := nil;
@gdxResetSpecialValues         := nil;
@gdxSetHasText                 := nil;
@gdxSetReadSpecialValues       := nil;
@gdxSetSpecialValues           := nil;
@gdxSetTextNodeNr              := nil;
@gdxSetTraceLevel              := nil;
@gdxSymbIndxMaxLength          := nil;
@gdxSymbMaxLength              := nil;
@gdxSymbolAddComment           := nil;
@gdxSymbolGetComment           := nil;
@gdxSymbolGetDomain            := nil;
@gdxSymbolGetDomainX           := nil;
@gdxSymbolDim                  := nil;
@gdxSymbolInfo                 := nil;
@gdxSymbolInfoX                := nil;
@gdxSymbolSetDomain            := nil;
@gdxSymbolSetDomainX           := nil;
@gdxSystemInfo                 := nil;
@gdxUELMaxLength               := nil;
@gdxUELRegisterDone            := nil;
@gdxUELRegisterMap             := nil;
@gdxUELRegisterMapStart        := nil;
@gdxUELRegisterRaw             := nil;
@gdxUELRegisterRawStart        := nil;
@gdxUELRegisterStr             := nil;
@gdxUELRegisterStrStart        := nil;
@gdxUMFindUEL                  := nil;
@gdxUMUelGet                   := nil;
@gdxUMUelInfo                  := nil;
@gdxCurrentDim                 := nil;
@gdxSetLoadPath                := nil;
@gdxGetLoadPath                := nil;
end;

function LibLoader(const Path, Name: ShortString; var Msg: ShortString): boolean;
var
   xName  : ShortString;
   xPath  : ShortString;
begin
if Name <> ''
then
   xName := Name
else
   xName := 'gdxdclib.dll';
if Path = ''
then
   begin
   xPath       := '';
   LibFileName := xName
   end
else
   begin
   xPath       := ExcludeTrailingPathDelimiter(Path);
   LibFileName := xPath + PathDelim + xName;
   end;

Result := XLibraryLoad(Msg);
if @gdxSetLoadPath <> nil
then
   begin
   if Result
   then
      gdxSetLoadPath(xPath)
   else
      gdxSetLoadPath('');
   end;
end;

function gdxGetReady(var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   Result := LibLoader('', '', Msg)
else
   begin
   Msg := '';
   Result := true
   end;
end;

function gdxGetReadyX(var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   begin
   Result := LibLoader(ExtractFilePath(ParamStr(0)), '', Msg);
   if LibHandle = 0
   then
      Result := LibLoader('', '', Msg);
   end
else
   begin
   Msg := '';
   Result := true
   end;
end;

function gdxGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   Result := LibLoader(Dir, '', Msg)
else
   begin
   Msg := '';
   Result := true
   end;
end;

function gdxGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   Result := LibLoader(ExtractFilePath(LibName), ExtractFileName(LibName), Msg)
else
   begin
   Msg := '';
   Result := true
   end;
end;

function  gdxGetHandle(pgdx: pointer): pointer;
begin
Result := pgdx;
end;

function gdxCreate(var pgdx: pointer; var Msg: ShortString): boolean;
begin
Assert(DLLWrapsObject, 'gdxdcpdef.gdxCreate without an Object');
Result := gdxGetReady(Msg);
if Result
then
   begin
   XCreate(pgdx);
   if pgdx = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   pgdx := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function gdxCreateX(var pgdx: pointer; var Msg: ShortString): boolean;
begin
Assert(DLLWrapsObject, 'gdxdcpdef.gdxCreate without an Object');
Result := gdxGetReadyX(Msg);
if Result
then
   begin
   XCreate(pgdx);
   if pgdx = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   pgdx := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function gdxCreateD(var pgdx: pointer; const Dir: ShortString; var Msg: shortString): boolean;
begin
Assert(DLLWrapsObject, 'gdxdcpdef.gdxCreateD without an Object');
Result := gdxGetReadyD(Dir, Msg);
if Result
then
   begin
   XCreate(pgdx);
   if pgdx = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   pgdx := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function gdxCreateL(var pgdx: pointer; const LibName: ShortString; var Msg: shortString): boolean;
begin
Assert(DLLWrapsObject, 'gdxdcpdef.gdxCreateL without an Object');
Result := gdxGetReadyL(LibName, Msg);
if Result
then
   begin
   XCreate(pgdx);
   if pgdx = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   pgdx := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

procedure gdxFree  (var pgdx: pointer);
begin
if @XFree <> nil
then
   begin
   XFree(pgdx); pgdx := nil;
   dec(ObjectCount);
   end;
end;

function gdxLibraryLoaded: boolean;
begin
Result := LibHandle <> 0;
end;

procedure gdxLibraryUnload;
begin
if LibHandle <> 0
then
   begin
   if ObjectCount<>0
   then
      begin
      writeln('Could not unload library, object not freed.');
      exit;
      end;
   XLibraryUnload;
   end;
end;

initialization

Libhandle := 0;
XLibraryUnload;

end.
