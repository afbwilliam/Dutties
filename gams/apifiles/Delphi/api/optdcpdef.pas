unit optdcpdef; { Delphi procedure wrapper generated by apiwrapper for GAMS Version 24.0.2 }
{ Function interface using a DLL, pure Delphi }

{$P- no open parameters ==> no maxlen byte}
{$V+ force var strings}
{$H- short only }

interface

uses
   sysutils,
   Windows,
   gmsgen;

const optDataNone    = 0;  { optDataType }
      optDataInteger = 1;
      optDataDouble  = 2;
      optDataString  = 3;
      optDataStrList = 4;

const optTypeInteger   = 0;  { optOptionType }
      optTypeDouble    = 1;
      optTypeString    = 2;
      optTypeBoolean   = 3;
      optTypeEnumStr   = 4;
      optTypeEnumInt   = 5;
      optTypeMultiList = 6;
      optTypeStrList   = 7;
      optTypeMacro     = 8;
      optTypeImmediate = 9;

const optsubRequired = 0;  { optOptionSubType }
      optsubNoValue  = 1;
      optsubOptional = 2;
      optsub2Values  = 3;

const optMsgInputEcho    = 0;  { optMsgType }
      optMsgHelp         = 1;
      optMsgDefineError  = 2;
      optMsgValueError   = 3;
      optMsgValueWarning = 4;
      optMsgDeprecated   = 5;
      optMsgFileEnter    = 6;
      optMsgFileLeave    = 7;
      optMsgTooManyMsgs  = 8;
      optMsgUserError    = 9;

const optMapIndicator  = 0;  { optVarEquMapType }
      optMapDefinedVar = 1;

type
   TErrorCallback = function(ErrCount:Integer; const Msg:ShortString):Integer; stdcall;

//tries to load DLL from OS default location
//name for the DLL is automatic
function  optGetReady(var Msg: ShortString): boolean;
//tries to load DLL from main program directory; if that fails
//loads DLL from OS default location
//name for the DLL is automatic
function  optGetReadyX(var Msg: ShortString): boolean;
//loads DLL from specified directory
//name for the DLL is automatic
function optGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
//loads DLL from the full path specified
//no changes are made to the name (platform and file extension)
function optGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;

//tries to load DLL from OS default location
//name for the DLL is automatic
function optCreate(var popt: pointer; var Msg: ShortString): boolean;
//tries to load DLL from main program directory; if that fails
//loads DLL from OS default location
//name for the DLL is automatic
function optCreateX(var popt: pointer; var Msg: ShortString): boolean;
//loads DLL from specified directory
//name for the DLL is automatic
function optCreateD(var popt: pointer; const Dir: ShortString; var Msg: shortString): boolean;
//loads DLL from the full path specified
function optCreateL(var popt: pointer; const LibName: ShortString; var Msg: shortString): boolean;

//returns a handle
function  optGetHandle(popt: pointer): pointer;

procedure optFree  (var popt: pointer);
procedure optLibraryUnload;
function  optLibraryLoaded: boolean;

function  optGetScreenIndicator: boolean;
procedure optSetScreenIndicator(const ScrInd: boolean);
function  optGetExceptionIndicator: boolean;
procedure optSetExceptionIndicator(const ExcInd: boolean);
function  optGetExitIndicator: boolean;
procedure optSetExitIndicator(const ExtInd: boolean);
function  optGetErrorCount: Integer;
procedure optSetErrorCount(const ecnt: Integer);
function  optGetErrorCallback: TErrorCallback;
procedure optSetErrorCallback(ecb: TErrorCallback);
procedure optErrorHandling(const Msg: ShortString);

function  optFuncLoaded(address: pointer): boolean;

// functions and procedures
var optSetLoadPath       : procedure(const s: shortString); stdcall;
var optGetLoadPath       : procedure(var s: shortString); stdcall;
var optInitialize : procedure; stdcall;
var optFinalize   : procedure; stdcall;
var optReadDefinition    : function (popt: pointer; const fn: ShortString): Integer; stdcall;
var optReadParameterFile : function (popt: pointer; const fn: ShortString): Integer; stdcall;
var optReadFromStr       : procedure(popt: pointer; const s: ShortString); stdcall;
var optWriteParameterFile: function (popt: pointer; const fn: ShortString): Integer; stdcall;
var optClearMessages     : procedure(popt: pointer); stdcall;
var optAddMessage        : procedure(popt: pointer; const info: ShortString); stdcall;
var optGetMessage        : procedure(popt: pointer; NrMsg: Integer; out info: ShortString; out iType: Integer); stdcall;
var optResetAll          : procedure(popt: pointer); stdcall;
var optResetAllRecent    : procedure(popt: pointer); stdcall;
var optResetRecentChanges: procedure(popt: pointer); stdcall;
var optShowHelp          : procedure(popt: pointer; const HlpID: ShortString); stdcall;
var optResetNr           : function (popt: pointer; ANr: Integer): Integer; stdcall;
var optFindStr           : function (popt: pointer; const AName: ShortString; out ANr: Integer; out ARefNr: Integer): Integer; stdcall;
var optGetInfoNr         : function (popt: pointer; ANr: Integer; out ADefined: Integer; out ADefinedR: Integer; out ARefNr: Integer; out ADataType: Integer; out AOptType: Integer; out ASubType: Integer): Integer; stdcall;
var optGetValuesNr       : function (popt: pointer; ANr: Integer; out ASName: ShortString; out AIVal: Integer; out ADVal: Double; out ASVal: ShortString): Integer; stdcall;
var optSetValuesNr       : function (popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; stdcall;
var optSetValues2Nr      : function (popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; stdcall;
var optVersion           : procedure(popt: pointer; out sversion: ShortString); stdcall;
var optDefinitionFile    : procedure(popt: pointer; out sfilename: ShortString); stdcall;
var optGetFromAnyStrList : function (popt: pointer; idash: Integer; out skey: ShortString; out sval: ShortString): Integer; stdcall;
var optGetFromListStr    : function (popt: pointer; const skey: ShortString; out sval: ShortString): Integer; stdcall;
var optListCountStr      : function (popt: pointer; const skey: ShortString): Integer; stdcall;
var optReadFromListStr   : function (popt: pointer; const skey: ShortString; iPos: Integer; out sval: ShortString): Integer; stdcall;
var optSynonymCount      : function (popt: pointer): Integer; stdcall;
var optGetSynonym        : function (popt: pointer; NrSyn: Integer; out SSyn: ShortString; out SName: ShortString): Integer; stdcall;
var optEchoSet           : procedure(popt: pointer; AIVal: Integer); stdcall;
var optEOLOnlySet        : function (popt: pointer; AIVal: Integer): Integer; stdcall;
var optNoBoundsSet       : procedure(popt: pointer; AIVal: Integer); stdcall;
var optErrorCount        : procedure(popt: pointer; out iErrors: Integer; out iWarnings: Integer); stdcall;
var optGetBoundsInt      : function (popt: pointer; ANr: Integer; out ilval: Integer; out ihval: Integer; out idval: Integer): Integer; stdcall;
var optGetBoundsDbl      : function (popt: pointer; ANr: Integer; out dlval: Double; out dhval: Double; out ddval: Double): Integer; stdcall;
var optGetDefaultStr     : function (popt: pointer; ANr: Integer; out sval: ShortString): Integer; stdcall;
var optGetIntNr          : function (popt: pointer; ANr: Integer; out AIVal: Integer): Integer; stdcall;
var optGetInt2Nr         : function (popt: pointer; ANr: Integer; out AIVal: Integer): Integer; stdcall;
var optSetIntNr          : function (popt: pointer; ANr: Integer; AIVal: Integer): Integer; stdcall;
var optSetInt2Nr         : function (popt: pointer; ANr: Integer; AIVal: Integer): Integer; stdcall;
var optGetStrNr          : function (popt: pointer; ANr: Integer; out ASVal: ShortString): Integer; stdcall;
var optGetOptHelpNr      : function (popt: pointer; ANr: Integer; out AName: ShortString; out AHc: Integer; out AGroup: Integer): Integer; stdcall;
var optGetEnumHelp       : function (popt: pointer; ANr: Integer; AOrd: Integer; out AHc: Integer; out AHelpStr: ShortString): Integer; stdcall;
var optGetEnumStrNr      : function (popt: pointer; ANr: Integer; out ASVal: ShortString; out AOrd: Integer): Integer; stdcall;
var optGetEnumCount      : function (popt: pointer; ANr: Integer; out ACount: Integer): Integer; stdcall;
var optGetEnumValue      : function (popt: pointer; ANr: Integer; AOrd: Integer; out AValInt: Integer; out AValStr: ShortString): Integer; stdcall;
var optGetStr2Nr         : function (popt: pointer; ANr: Integer; out ASVal: ShortString): Integer; stdcall;
var optSetStrNr          : function (popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; stdcall;
var optSetStr2Nr         : function (popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; stdcall;
var optGetDblNr          : function (popt: pointer; ANr: Integer; out ADVal: Double): Integer; stdcall;
var optGetDbl2Nr         : function (popt: pointer; ANr: Integer; out ADVal: Double): Integer; stdcall;
var optSetDblNr          : function (popt: pointer; ANr: Integer; ADVal: Double): Integer; stdcall;
var optSetDbl2Nr         : function (popt: pointer; ANr: Integer; ADVal: Double): Integer; stdcall;
var optGetValStr         : function (popt: pointer; const AName: ShortString; out ASVal: ShortString): Integer; stdcall;
var optGetVal2Str        : function (popt: pointer; const AName: ShortString; out ASVal: ShortString): Integer; stdcall;
var optGetNameNr         : function (popt: pointer; ANr: Integer; out ASName: ShortString): Integer; stdcall;
var optGetDefinedNr      : function (popt: pointer; ANr: Integer; out AIVal: Integer): Integer; stdcall;
var optGetHelpNr         : function (popt: pointer; ANr: Integer; out ASOpt: ShortString; out ASHelp: ShortString): Integer; stdcall;
var optGetGroupNr        : function (popt: pointer; ANr: Integer; out AName: ShortString; out AGroup: Integer; out AHc: Integer; out AHelp: ShortString): Integer; stdcall;
var optGetGroupGrpNr     : function (popt: pointer; AGroup: Integer): Integer; stdcall;
var optGetOptGroupNr     : function (popt: pointer; ANr: Integer): Integer; stdcall;
var optGetDotOptNr       : function (popt: pointer; ANr: Integer; out VEName: ShortString; out AObjNr: Integer; out ADim: Integer; out AValue: Double): Integer; stdcall;
var optGetDotOptUel      : function (popt: pointer; ANr: Integer; ADim: Integer; out AUEL: ShortString): Integer; stdcall;
var optGetVarEquMapNr    : function (popt: pointer; maptype: Integer; ANr: Integer; out EquName: ShortString; out VarName: ShortString; out EquDim: Integer; out VarDim: Integer; out AValue: Integer): Integer; stdcall;
var optGetEquVarEquMapNr : function (popt: pointer; maptype: Integer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var optGetVarVarEquMapNr : function (popt: pointer; maptype: Integer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var optVarEquMapCount    : function (popt: pointer; maptype: Integer; out ANrErrors: Integer): Integer; stdcall;
var optGetIndicatorNr    : function (popt: pointer; ANr: Integer; out EquName: ShortString; out VarName: ShortString; out EquDim: Integer; out VarDim: Integer; out AValue: Integer): Integer; stdcall;
var optGetEquIndicatorNr : function (popt: pointer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var optGetVarIndicatorNr : function (popt: pointer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var optIndicatorCount    : function (popt: pointer; out ANrErrors: Integer): Integer; stdcall;
var optDotOptCount       : function (popt: pointer; out ANrErrors: Integer): Integer; stdcall;
var optSetRefNr          : function (popt: pointer; ANr: Integer; ARefNr: Integer): Integer; stdcall;
var optSetRefNrStr       : function (popt: pointer; const AOpt: ShortString; ARefNr: Integer): Integer; stdcall;
var optGetConstName      : function (popt: pointer; cgroup: Integer; cindex: Integer; out cname: ShortString): Integer; stdcall;
var optGetTypeName       : function (popt: pointer; TNr: Integer; out sTName: ShortString): Integer; stdcall;
var optLookUp            : function (popt: pointer; const AOpt: ShortString): Integer; stdcall;
var optReadFromPChar     : procedure(popt: pointer; p: PChar); stdcall;
var optGetNameOpt        : function (popt: pointer; const ASVal: ShortString; out solver: ShortString; out opt: Integer): Integer; stdcall;
var optGetIntStr         : function (popt: pointer; const AName: ShortString): Integer; stdcall;
var optGetDblStr         : function (popt: pointer; const AName: ShortString): Double; stdcall;
var optSetIntStr         : procedure(popt: pointer; const AName: ShortString; AIVal: Integer); stdcall;
var optSetDblStr         : procedure(popt: pointer; const AName: ShortString; ADVal: Double); stdcall;
var optSetStrStr         : procedure(popt: pointer; const AName: ShortString; const ASVal: ShortString); stdcall;

// properties as functions and procedures
var optCount           : function  (popt: pointer): Integer; stdcall;
var optMessageCount    : function  (popt: pointer): Integer; stdcall;
var optGroupCount      : function  (popt: pointer): Integer; stdcall;
var optRecentEnabled   : function  (popt: pointer): Integer; stdcall;
var optRecentEnabledSet: procedure (popt: pointer; const x: Integer); stdcall;

Function  optGetDefinedStr(popt: pointer; const AName: ShortString): Boolean; stdcall;
Function  optGetStrStr(popt: pointer; const AName: ShortString): ShortString; stdcall;
implementation

const
   APIVersion     = 2;
   DLLWrapsObject = true;
   Debug          = false;
{$IFDEF VER130}
// From Delphi7 system, sysutils units
   PathDelim  = {$IFDEF MSWINDOWS} '\'; {$ELSE} '/'; {$ENDIF}

type
   IntegerArray  = array[0..$effffff] of Integer;
   PIntegerArray = ^IntegerArray;

function ExcludeTrailingPathDelimiter(const S: string): string;
begin
Result := S;
if IsPathDelimiter(Result, Length(Result))
then
   SetLength(Result, Length(Result)-1);
end;
{$ENDIF}

var
   LibHandle         : THandle;
   LibFileName       : ShortString;
   ScreenIndicator   : Boolean = true;
   ExceptionIndicator: Boolean = false;
   ExitIndicator     : Boolean = true;
   ObjectCount       : Integer = 0;
   APIErrorCount     : Integer = 0;
   ErrorCallback     : TErrorCallback = nil;

var XCreate: procedure (var popt: pointer); stdcall;
var XFree  : procedure (var popt: pointer); stdcall;

var XAPIVersion: function (const api: integer; var msg: ShortString; var comp: Integer): Integer; stdcall;
var XCheck: function (const funcn: shortString; const NrArg: integer; const sign: PIntegerArray; var msg: ShortString): Integer; stdcall;

var bool_optGetDefinedStr: function (popt: pointer; const AName: ShortString): Integer; stdcall;
var sst_optGetStrStr: procedure(popt: pointer; const AName: ShortString; var sst_result: ShortString); stdcall;

Function  d_optReadDefinition(popt: pointer; const fn: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;
XCheck('optReadDefinition', 1, @d_sign, d_Msg);
optErrorHandling('optReadDefinition could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optReadParameterFile(popt: pointer; const fn: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;
XCheck('optReadParameterFile', 1, @d_sign, d_Msg);
optErrorHandling('optReadParameterFile could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Procedure d_optReadFromStr(popt: pointer; const s: ShortString); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 11;
XCheck('optReadFromStr', 1, @d_sign, d_Msg);
optErrorHandling('optReadFromStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Function  d_optWriteParameterFile(popt: pointer; const fn: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;
XCheck('optWriteParameterFile', 1, @d_sign, d_Msg);
optErrorHandling('optWriteParameterFile could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Procedure d_optClearMessages(popt: pointer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 0;
XCheck('optClearMessages', 0, @d_sign, d_Msg);
optErrorHandling('optClearMessages could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optAddMessage(popt: pointer; const info: ShortString); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 11;
XCheck('optAddMessage', 1, @d_sign, d_Msg);
optErrorHandling('optAddMessage could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optGetMessage(popt: pointer; NrMsg: Integer; out info: ShortString; out iType: Integer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;
XCheck('optGetMessage', 3, @d_sign, d_Msg);
optErrorHandling('optGetMessage could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optResetAll(popt: pointer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 0;
XCheck('optResetAll', 0, @d_sign, d_Msg);
optErrorHandling('optResetAll could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optResetAllRecent(popt: pointer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 0;
XCheck('optResetAllRecent', 0, @d_sign, d_Msg);
optErrorHandling('optResetAllRecent could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optResetRecentChanges(popt: pointer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 0;
XCheck('optResetRecentChanges', 0, @d_sign, d_Msg);
optErrorHandling('optResetRecentChanges could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optShowHelp(popt: pointer; const HlpID: ShortString); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 11;
XCheck('optShowHelp', 1, @d_sign, d_Msg);
optErrorHandling('optShowHelp could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Function  d_optResetNr(popt: pointer; ANr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('optResetNr', 1, @d_sign, d_Msg);
optErrorHandling('optResetNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optFindStr(popt: pointer; const AName: ShortString; out ANr: Integer; out ARefNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 4;d_sign[3] := 4;
XCheck('optFindStr', 3, @d_sign, d_Msg);
optErrorHandling('optFindStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetInfoNr(popt: pointer; ANr: Integer; out ADefined: Integer; out ADefinedR: Integer; out ARefNr: Integer; out ADataType: Integer; out AOptType: Integer; out ASubType: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..7] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;d_sign[3] := 4;d_sign[4] := 4;d_sign[5] := 4;d_sign[6] := 4;d_sign[7] := 4;
XCheck('optGetInfoNr', 7, @d_sign, d_Msg);
optErrorHandling('optGetInfoNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetValuesNr(popt: pointer; ANr: Integer; out ASName: ShortString; out AIVal: Integer; out ADVal: Double; out ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..5] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;d_sign[4] := 14;d_sign[5] := 12;
XCheck('optGetValuesNr', 5, @d_sign, d_Msg);
optErrorHandling('optGetValuesNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetValuesNr(popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 13;d_sign[4] := 11;
XCheck('optSetValuesNr', 4, @d_sign, d_Msg);
optErrorHandling('optSetValuesNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetValues2Nr(popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 13;d_sign[4] := 11;
XCheck('optSetValues2Nr', 4, @d_sign, d_Msg);
optErrorHandling('optSetValues2Nr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Procedure d_optVersion(popt: pointer; out sversion: ShortString); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 12;
XCheck('optVersion', 1, @d_sign, d_Msg);
optErrorHandling('optVersion could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optDefinitionFile(popt: pointer; out sfilename: ShortString); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 12;
XCheck('optDefinitionFile', 1, @d_sign, d_Msg);
optErrorHandling('optDefinitionFile could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Function  d_optGetFromAnyStrList(popt: pointer; idash: Integer; out skey: ShortString; out sval: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 12;
XCheck('optGetFromAnyStrList', 3, @d_sign, d_Msg);
optErrorHandling('optGetFromAnyStrList could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetFromListStr(popt: pointer; const skey: ShortString; out sval: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 12;
XCheck('optGetFromListStr', 2, @d_sign, d_Msg);
optErrorHandling('optGetFromListStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optListCountStr(popt: pointer; const skey: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;
XCheck('optListCountStr', 1, @d_sign, d_Msg);
optErrorHandling('optListCountStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optReadFromListStr(popt: pointer; const skey: ShortString; iPos: Integer; out sval: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 3;d_sign[3] := 12;
XCheck('optReadFromListStr', 3, @d_sign, d_Msg);
optErrorHandling('optReadFromListStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSynonymCount(popt: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('optSynonymCount', 0, @d_sign, d_Msg);
optErrorHandling('optSynonymCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetSynonym(popt: pointer; NrSyn: Integer; out SSyn: ShortString; out SName: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 12;
XCheck('optGetSynonym', 3, @d_sign, d_Msg);
optErrorHandling('optGetSynonym could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Procedure d_optEchoSet(popt: pointer; AIVal: Integer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 3;
XCheck('optEchoSet', 1, @d_sign, d_Msg);
optErrorHandling('optEchoSet could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Function  d_optEOLOnlySet(popt: pointer; AIVal: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('optEOLOnlySet', 1, @d_sign, d_Msg);
optErrorHandling('optEOLOnlySet could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Procedure d_optNoBoundsSet(popt: pointer; AIVal: Integer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 3;
XCheck('optNoBoundsSet', 1, @d_sign, d_Msg);
optErrorHandling('optNoBoundsSet could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optErrorCount(popt: pointer; out iErrors: Integer; out iWarnings: Integer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 4;d_sign[2] := 4;
XCheck('optErrorCount', 2, @d_sign, d_Msg);
optErrorHandling('optErrorCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Function  d_optGetBoundsInt(popt: pointer; ANr: Integer; out ilval: Integer; out ihval: Integer; out idval: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;d_sign[3] := 4;d_sign[4] := 4;
XCheck('optGetBoundsInt', 4, @d_sign, d_Msg);
optErrorHandling('optGetBoundsInt could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetBoundsDbl(popt: pointer; ANr: Integer; out dlval: Double; out dhval: Double; out ddval: Double): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 14;d_sign[3] := 14;d_sign[4] := 14;
XCheck('optGetBoundsDbl', 4, @d_sign, d_Msg);
optErrorHandling('optGetBoundsDbl could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDefaultStr(popt: pointer; ANr: Integer; out sval: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;
XCheck('optGetDefaultStr', 2, @d_sign, d_Msg);
optErrorHandling('optGetDefaultStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetIntNr(popt: pointer; ANr: Integer; out AIVal: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('optGetIntNr', 2, @d_sign, d_Msg);
optErrorHandling('optGetIntNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetInt2Nr(popt: pointer; ANr: Integer; out AIVal: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('optGetInt2Nr', 2, @d_sign, d_Msg);
optErrorHandling('optGetInt2Nr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetIntNr(popt: pointer; ANr: Integer; AIVal: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;
XCheck('optSetIntNr', 2, @d_sign, d_Msg);
optErrorHandling('optSetIntNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetInt2Nr(popt: pointer; ANr: Integer; AIVal: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;
XCheck('optSetInt2Nr', 2, @d_sign, d_Msg);
optErrorHandling('optSetInt2Nr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetStrNr(popt: pointer; ANr: Integer; out ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;
XCheck('optGetStrNr', 2, @d_sign, d_Msg);
optErrorHandling('optGetStrNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetOptHelpNr(popt: pointer; ANr: Integer; out AName: ShortString; out AHc: Integer; out AGroup: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;d_sign[4] := 4;
XCheck('optGetOptHelpNr', 4, @d_sign, d_Msg);
optErrorHandling('optGetOptHelpNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetEnumHelp(popt: pointer; ANr: Integer; AOrd: Integer; out AHc: Integer; out AHelpStr: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 4;d_sign[4] := 12;
XCheck('optGetEnumHelp', 4, @d_sign, d_Msg);
optErrorHandling('optGetEnumHelp could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetEnumStrNr(popt: pointer; ANr: Integer; out ASVal: ShortString; out AOrd: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;
XCheck('optGetEnumStrNr', 3, @d_sign, d_Msg);
optErrorHandling('optGetEnumStrNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetEnumCount(popt: pointer; ANr: Integer; out ACount: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('optGetEnumCount', 2, @d_sign, d_Msg);
optErrorHandling('optGetEnumCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetEnumValue(popt: pointer; ANr: Integer; AOrd: Integer; out AValInt: Integer; out AValStr: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 4;d_sign[4] := 12;
XCheck('optGetEnumValue', 4, @d_sign, d_Msg);
optErrorHandling('optGetEnumValue could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetStr2Nr(popt: pointer; ANr: Integer; out ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;
XCheck('optGetStr2Nr', 2, @d_sign, d_Msg);
optErrorHandling('optGetStr2Nr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetStrNr(popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 11;
XCheck('optSetStrNr', 2, @d_sign, d_Msg);
optErrorHandling('optSetStrNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetStr2Nr(popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 11;
XCheck('optSetStr2Nr', 2, @d_sign, d_Msg);
optErrorHandling('optSetStr2Nr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDblNr(popt: pointer; ANr: Integer; out ADVal: Double): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 14;
XCheck('optGetDblNr', 2, @d_sign, d_Msg);
optErrorHandling('optGetDblNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDbl2Nr(popt: pointer; ANr: Integer; out ADVal: Double): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 14;
XCheck('optGetDbl2Nr', 2, @d_sign, d_Msg);
optErrorHandling('optGetDbl2Nr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetDblNr(popt: pointer; ANr: Integer; ADVal: Double): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 13;
XCheck('optSetDblNr', 2, @d_sign, d_Msg);
optErrorHandling('optSetDblNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetDbl2Nr(popt: pointer; ANr: Integer; ADVal: Double): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 13;
XCheck('optSetDbl2Nr', 2, @d_sign, d_Msg);
optErrorHandling('optSetDbl2Nr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetValStr(popt: pointer; const AName: ShortString; out ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 12;
XCheck('optGetValStr', 2, @d_sign, d_Msg);
optErrorHandling('optGetValStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetVal2Str(popt: pointer; const AName: ShortString; out ASVal: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 12;
XCheck('optGetVal2Str', 2, @d_sign, d_Msg);
optErrorHandling('optGetVal2Str could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetNameNr(popt: pointer; ANr: Integer; out ASName: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;
XCheck('optGetNameNr', 2, @d_sign, d_Msg);
optErrorHandling('optGetNameNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDefinedNr(popt: pointer; ANr: Integer; out AIVal: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('optGetDefinedNr', 2, @d_sign, d_Msg);
optErrorHandling('optGetDefinedNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetHelpNr(popt: pointer; ANr: Integer; out ASOpt: ShortString; out ASHelp: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 12;
XCheck('optGetHelpNr', 3, @d_sign, d_Msg);
optErrorHandling('optGetHelpNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetGroupNr(popt: pointer; ANr: Integer; out AName: ShortString; out AGroup: Integer; out AHc: Integer; out AHelp: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..5] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;d_sign[4] := 4;d_sign[5] := 12;
XCheck('optGetGroupNr', 5, @d_sign, d_Msg);
optErrorHandling('optGetGroupNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetGroupGrpNr(popt: pointer; AGroup: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('optGetGroupGrpNr', 1, @d_sign, d_Msg);
optErrorHandling('optGetGroupGrpNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetOptGroupNr(popt: pointer; ANr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;
XCheck('optGetOptGroupNr', 1, @d_sign, d_Msg);
optErrorHandling('optGetOptGroupNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDotOptNr(popt: pointer; ANr: Integer; out VEName: ShortString; out AObjNr: Integer; out ADim: Integer; out AValue: Double): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..5] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 4;d_sign[4] := 4;d_sign[5] := 14;
XCheck('optGetDotOptNr', 5, @d_sign, d_Msg);
optErrorHandling('optGetDotOptNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDotOptUel(popt: pointer; ANr: Integer; ADim: Integer; out AUEL: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 12;
XCheck('optGetDotOptUel', 3, @d_sign, d_Msg);
optErrorHandling('optGetDotOptUel could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetVarEquMapNr(popt: pointer; maptype: Integer; ANr: Integer; out EquName: ShortString; out VarName: ShortString; out EquDim: Integer; out VarDim: Integer; out AValue: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..7] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 12;d_sign[4] := 12;d_sign[5] := 4;d_sign[6] := 4;d_sign[7] := 4;
XCheck('optGetVarEquMapNr', 7, @d_sign, d_Msg);
optErrorHandling('optGetVarEquMapNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetEquVarEquMapNr(popt: pointer; maptype: Integer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 3;d_sign[4] := 12;
XCheck('optGetEquVarEquMapNr', 4, @d_sign, d_Msg);
optErrorHandling('optGetEquVarEquMapNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetVarVarEquMapNr(popt: pointer; maptype: Integer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..4] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 3;d_sign[4] := 12;
XCheck('optGetVarVarEquMapNr', 4, @d_sign, d_Msg);
optErrorHandling('optGetVarVarEquMapNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optVarEquMapCount(popt: pointer; maptype: Integer; out ANrErrors: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 4;
XCheck('optVarEquMapCount', 2, @d_sign, d_Msg);
optErrorHandling('optVarEquMapCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetIndicatorNr(popt: pointer; ANr: Integer; out EquName: ShortString; out VarName: ShortString; out EquDim: Integer; out VarDim: Integer; out AValue: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..6] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;d_sign[3] := 12;d_sign[4] := 4;d_sign[5] := 4;d_sign[6] := 4;
XCheck('optGetIndicatorNr', 6, @d_sign, d_Msg);
optErrorHandling('optGetIndicatorNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetEquIndicatorNr(popt: pointer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 12;
XCheck('optGetEquIndicatorNr', 3, @d_sign, d_Msg);
optErrorHandling('optGetEquIndicatorNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetVarIndicatorNr(popt: pointer; ANr: Integer; ADim: Integer; out AIndex: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 12;
XCheck('optGetVarIndicatorNr', 3, @d_sign, d_Msg);
optErrorHandling('optGetVarIndicatorNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optIndicatorCount(popt: pointer; out ANrErrors: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 4;
XCheck('optIndicatorCount', 1, @d_sign, d_Msg);
optErrorHandling('optIndicatorCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optDotOptCount(popt: pointer; out ANrErrors: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 4;
XCheck('optDotOptCount', 1, @d_sign, d_Msg);
optErrorHandling('optDotOptCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetRefNr(popt: pointer; ANr: Integer; ARefNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;
XCheck('optSetRefNr', 2, @d_sign, d_Msg);
optErrorHandling('optSetRefNr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optSetRefNrStr(popt: pointer; const AOpt: ShortString; ARefNr: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 3;
XCheck('optSetRefNrStr', 2, @d_sign, d_Msg);
optErrorHandling('optSetRefNrStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetConstName(popt: pointer; cgroup: Integer; cindex: Integer; out cname: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 3;d_sign[3] := 12;
XCheck('optGetConstName', 3, @d_sign, d_Msg);
optErrorHandling('optGetConstName could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetTypeName(popt: pointer; TNr: Integer; out sTName: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 3;d_sign[2] := 12;
XCheck('optGetTypeName', 2, @d_sign, d_Msg);
optErrorHandling('optGetTypeName could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optLookUp(popt: pointer; const AOpt: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;
XCheck('optLookUp', 1, @d_sign, d_Msg);
optErrorHandling('optLookUp could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Procedure d_optReadFromPChar(popt: pointer; p: PChar); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 10;
XCheck('optReadFromPChar', 1, @d_sign, d_Msg);
optErrorHandling('optReadFromPChar could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Function  d_optGetNameOpt(popt: pointer; const ASVal: ShortString; out solver: ShortString; out opt: Integer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..3] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;d_sign[2] := 12;d_sign[3] := 4;
XCheck('optGetNameOpt', 3, @d_sign, d_Msg);
optErrorHandling('optGetNameOpt could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDefinedStr(popt: pointer; const AName: ShortString): Boolean; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 15;d_sign[1] := 11;
XCheck('optGetDefinedStr', 1, @d_sign, d_Msg);
optErrorHandling('optGetDefinedStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := true;
end;

Function  d_optGetIntStr(popt: pointer; const AName: ShortString): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 3;d_sign[1] := 11;
XCheck('optGetIntStr', 1, @d_sign, d_Msg);
optErrorHandling('optGetIntStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGetDblStr(popt: pointer; const AName: ShortString): Double; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 13;d_sign[1] := 11;
XCheck('optGetDblStr', 1, @d_sign, d_Msg);
optErrorHandling('optGetDblStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0.0;
end;

Function  d_optGetStrStr(popt: pointer; const AName: ShortString): ShortString; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 12;d_sign[1] := 11;
XCheck('optGetStrStr', 1, @d_sign, d_Msg);
optErrorHandling('optGetStrStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := ' ';
end;

Procedure d_optSetIntStr(popt: pointer; const AName: ShortString; AIVal: Integer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 11;d_sign[2] := 3;
XCheck('optSetIntStr', 2, @d_sign, d_Msg);
optErrorHandling('optSetIntStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optSetDblStr(popt: pointer; const AName: ShortString; ADVal: Double); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 11;d_sign[2] := 13;
XCheck('optSetDblStr', 2, @d_sign, d_Msg);
optErrorHandling('optSetDblStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Procedure d_optSetStrStr(popt: pointer; const AName: ShortString; const ASVal: ShortString); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..2] of Integer;
begin
d_sign[0] := 0;d_sign[1] := 11;d_sign[2] := 11;
XCheck('optSetStrStr', 2, @d_sign, d_Msg);
optErrorHandling('optSetStrStr could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

Function  d_optCount(popt: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('optCount', 0, @d_sign, d_Msg);
optErrorHandling('optCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optMessageCount(popt: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('optMessageCount', 0, @d_sign, d_Msg);
optErrorHandling('optMessageCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optGroupCount(popt: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('optGroupCount', 0, @d_sign, d_Msg);
optErrorHandling('optGroupCount could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Function  d_optRecentEnabled(popt: pointer): Integer; stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..0] of Integer;
begin
d_sign[0] := 3;
XCheck('optRecentEnabled', 0, @d_sign, d_Msg);
optErrorHandling('optRecentEnabled could not be loaded from ' + LibFileName + ': ' + d_Msg);
Result := 0;
end;

Procedure d_optRecentEnabledSet(popt: pointer; const x: Integer); stdcall;
var
   d_Msg: ShortString;
   d_sign : Array[0..1] of Integer;
begin
d_sign[0] := 0; d_sign[1] := 3;
XCheck('optRecentEnabledSet', 1, @d_sign, d_Msg);
optErrorHandling('optRecentEnabledSet could not be loaded from ' + LibFileName + ': ' + d_Msg);
end;

function  optGetDefinedStr(popt: pointer; const AName: ShortString): Boolean; stdcall;
begin
result := bool_optGetDefinedStr(popt, AName) <> 0;
end;

function  optGetStrStr(popt: pointer; const AName: ShortString): ShortString; stdcall;
begin
sst_optGetStrStr(popt, AName, result);
end;

function  optGetScreenIndicator: boolean;
begin
Result := ScreenIndicator;
end;

procedure optSetScreenIndicator(const ScrInd: boolean);
begin
ScreenIndicator := ScrInd;
end;

function  optGetExceptionIndicator: boolean;
begin
Result := ExceptionIndicator;
end;

procedure optSetExceptionIndicator(const ExcInd: boolean);
begin
ExceptionIndicator := ExcInd;
end;

function  optGetExitIndicator: boolean;
begin
Result := ExitIndicator;
end;

procedure optSetExitIndicator(const ExtInd: boolean);
begin
ExitIndicator := ExtInd;
end;

function  optGetErrorCount: Integer;
begin
Result := APIErrorCount;
end;

procedure optSetErrorCount(const ecnt: Integer);
begin
APIErrorCount := ecnt;
end;

function  optGetErrorCallback: TErrorCallback;
begin
Result := @ErrorCallback;
end;

procedure optSetErrorCallback(ecb: TErrorCallback);
begin
ErrorCallback := ecb;
end;

Procedure optErrorHandling(const Msg: ShortString);
begin
inc(APIErrorCount);
if ScreenIndicator then begin writeln(Msg); flush(output); end;
assert(not ExceptionIndicator, Msg);
if (@ErrorCallback <> nil) and (ErrorCallback(APIErrorCount, Msg) <> 0) then halt(123);
if ExitIndicator then halt(123);
end;

const NoOfEntryPts = 87;
var AddrOfFuncLoaded: Array[1..NoOfEntryPts] of Pointer;

function optFuncLoaded(address: pointer): boolean;
var
   cnt: Integer;
begin
result := false;
for cnt:=1 to NoOfEntryPts
do if address = AddrOfFuncLoaded[cnt]
   then
      begin
      result := true;
      break;
      end;
end;

function XLibraryLoad(var LoadMsg: ShortString): boolean;
var
   comp: Integer;
   sign: Array[0..7] of Integer;
   funcCount: Integer;

   function LoadEntry(const Name: ShortString; const NoArgs: Integer; const d_x: Pointer): pointer;
   var
      NameX: Ansistring;
   begin
   Result := nil;
   if (comp >= 0) then inc(funcCount);
   if (comp < 0) or (XCheck(Name, NoArgs, @sign, LoadMsg) > 0)
   then
      begin
      NameX := LowerCase(Name);
      Result := GetProcAddress(LibHandle, PAnsiChar(NameX));
      if Result = nil
      then
         begin
         NameX := Name;
         Result := GetProcAddress(LibHandle, PAnsiChar(NameX));
         end;
      if Result = nil
      then
         begin
         NameX := UpperCase(Name);
         Result := GetProcAddress(LibHandle, PAnsiChar(NameX));
         end;
      if Result = nil
      then
         LoadMsg := 'Entry not found: ' + Name + ' in ' + LibFileName;
      end;
   if (comp >= 0) then AddrOfFuncLoaded[funcCount] := Result;
   if Result = nil
   then
      Result := d_x;
   if Debug and (LoadMsg <> '') then optErrorHandling(LoadMsg);
   end;

var
{$IF RTLVersion < 20}      //versions before Delphi2009
   LibFileNameX: AnsiString;
{$ELSE}
   LibFileNameX: WideString;
{$IFEND}
begin
Result  := false;
LoadMsg := '';
if LibHandle <> 0
then
   begin
   Result := true;
   exit;
   end;

LibFileNameX := LibFileName;
{$IF RTLVersion < 20}
LibHandle := LoadLibrary(PAnsiChar(LibFileNameX));
{$ELSE}
LibHandle := LoadLibrary(PWideChar(LibFileNameX));
{$IFEND}
if LibHandle = 0
then
   begin
   LoadMsg := 'Cannot load library ' + LibFileName;
   exit;
   end;

comp := -1;
funcCount := 0;
@optSetLoadPath := LoadEntry('optSetLoadPath', 0, nil);
@optGetLoadPath := LoadEntry('optGetLoadPath', 0, nil);
LoadMsg := '';  //not an error
if DLLWrapsObject
then
   begin
   @XCreate := LoadEntry('XCreate', 0, nil);
   if @XCreate = nil then exit;
   @XFree   := LoadEntry('XFree', 0, nil);
   if @XFree = nil then exit;
   end;
@XCheck := LoadEntry('XCheck', 0, nil);
if @XCheck = nil then exit;
@XAPIVersion := LoadEntry('XAPIVersion', 0, nil);
if @XAPIVersion = nil then exit;

@optInitialize := LoadEntry('optInitialize', 0, nil);
@optFinalize   := LoadEntry('optFinalize', 0, nil);
if @optInitialize <> nil then optInitialize;
if (XAPIVersion(APIversion, LoadMsg, comp) = 0)
then
   exit;

funcCount := 0;
sign[0] := 3;sign[1] := 11;
@optReadDefinition := LoadEntry('optReadDefinition', 1, @d_optReadDefinition);
sign[0] := 3;sign[1] := 11;
@optReadParameterFile := LoadEntry('optReadParameterFile', 1, @d_optReadParameterFile);
sign[0] := 0;sign[1] := 11;
@optReadFromStr := LoadEntry('optReadFromStr', 1, @d_optReadFromStr);
sign[0] := 3;sign[1] := 11;
@optWriteParameterFile := LoadEntry('optWriteParameterFile', 1, @d_optWriteParameterFile);
sign[0] := 0;
@optClearMessages := LoadEntry('optClearMessages', 0, @d_optClearMessages);
sign[0] := 0;sign[1] := 11;
@optAddMessage := LoadEntry('optAddMessage', 1, @d_optAddMessage);
sign[0] := 0;sign[1] := 3;sign[2] := 12;sign[3] := 4;
@optGetMessage := LoadEntry('optGetMessage', 3, @d_optGetMessage);
sign[0] := 0;
@optResetAll := LoadEntry('optResetAll', 0, @d_optResetAll);
sign[0] := 0;
@optResetAllRecent := LoadEntry('optResetAllRecent', 0, @d_optResetAllRecent);
sign[0] := 0;
@optResetRecentChanges := LoadEntry('optResetRecentChanges', 0, @d_optResetRecentChanges);
sign[0] := 0;sign[1] := 11;
@optShowHelp := LoadEntry('optShowHelp', 1, @d_optShowHelp);
sign[0] := 3;sign[1] := 3;
@optResetNr := LoadEntry('optResetNr', 1, @d_optResetNr);
sign[0] := 3;sign[1] := 11;sign[2] := 4;sign[3] := 4;
@optFindStr := LoadEntry('optFindStr', 3, @d_optFindStr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;sign[3] := 4;sign[4] := 4;sign[5] := 4;sign[6] := 4;sign[7] := 4;
@optGetInfoNr := LoadEntry('optGetInfoNr', 7, @d_optGetInfoNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 14;sign[5] := 12;
@optGetValuesNr := LoadEntry('optGetValuesNr', 5, @d_optGetValuesNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 13;sign[4] := 11;
@optSetValuesNr := LoadEntry('optSetValuesNr', 4, @d_optSetValuesNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 13;sign[4] := 11;
@optSetValues2Nr := LoadEntry('optSetValues2Nr', 4, @d_optSetValues2Nr);
sign[0] := 0;sign[1] := 12;
@optVersion := LoadEntry('optVersion', 1, @d_optVersion);
sign[0] := 0;sign[1] := 12;
@optDefinitionFile := LoadEntry('optDefinitionFile', 1, @d_optDefinitionFile);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;
@optGetFromAnyStrList := LoadEntry('optGetFromAnyStrList', 3, @d_optGetFromAnyStrList);
sign[0] := 3;sign[1] := 11;sign[2] := 12;
@optGetFromListStr := LoadEntry('optGetFromListStr', 2, @d_optGetFromListStr);
sign[0] := 3;sign[1] := 11;
@optListCountStr := LoadEntry('optListCountStr', 1, @d_optListCountStr);
sign[0] := 3;sign[1] := 11;sign[2] := 3;sign[3] := 12;
@optReadFromListStr := LoadEntry('optReadFromListStr', 3, @d_optReadFromListStr);
sign[0] := 3;
@optSynonymCount := LoadEntry('optSynonymCount', 0, @d_optSynonymCount);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;
@optGetSynonym := LoadEntry('optGetSynonym', 3, @d_optGetSynonym);
sign[0] := 0;sign[1] := 3;
@optEchoSet := LoadEntry('optEchoSet', 1, @d_optEchoSet);
sign[0] := 3;sign[1] := 3;
@optEOLOnlySet := LoadEntry('optEOLOnlySet', 1, @d_optEOLOnlySet);
sign[0] := 0;sign[1] := 3;
@optNoBoundsSet := LoadEntry('optNoBoundsSet', 1, @d_optNoBoundsSet);
sign[0] := 0;sign[1] := 4;sign[2] := 4;
@optErrorCount := LoadEntry('optErrorCount', 2, @d_optErrorCount);
sign[0] := 3;sign[1] := 3;sign[2] := 4;sign[3] := 4;sign[4] := 4;
@optGetBoundsInt := LoadEntry('optGetBoundsInt', 4, @d_optGetBoundsInt);
sign[0] := 3;sign[1] := 3;sign[2] := 14;sign[3] := 14;sign[4] := 14;
@optGetBoundsDbl := LoadEntry('optGetBoundsDbl', 4, @d_optGetBoundsDbl);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetDefaultStr := LoadEntry('optGetDefaultStr', 2, @d_optGetDefaultStr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetIntNr := LoadEntry('optGetIntNr', 2, @d_optGetIntNr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetInt2Nr := LoadEntry('optGetInt2Nr', 2, @d_optGetInt2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;
@optSetIntNr := LoadEntry('optSetIntNr', 2, @d_optSetIntNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;
@optSetInt2Nr := LoadEntry('optSetInt2Nr', 2, @d_optSetInt2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetStrNr := LoadEntry('optGetStrNr', 2, @d_optGetStrNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 4;
@optGetOptHelpNr := LoadEntry('optGetOptHelpNr', 4, @d_optGetOptHelpNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 4;sign[4] := 12;
@optGetEnumHelp := LoadEntry('optGetEnumHelp', 4, @d_optGetEnumHelp);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;
@optGetEnumStrNr := LoadEntry('optGetEnumStrNr', 3, @d_optGetEnumStrNr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetEnumCount := LoadEntry('optGetEnumCount', 2, @d_optGetEnumCount);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 4;sign[4] := 12;
@optGetEnumValue := LoadEntry('optGetEnumValue', 4, @d_optGetEnumValue);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetStr2Nr := LoadEntry('optGetStr2Nr', 2, @d_optGetStr2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 11;
@optSetStrNr := LoadEntry('optSetStrNr', 2, @d_optSetStrNr);
sign[0] := 3;sign[1] := 3;sign[2] := 11;
@optSetStr2Nr := LoadEntry('optSetStr2Nr', 2, @d_optSetStr2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 14;
@optGetDblNr := LoadEntry('optGetDblNr', 2, @d_optGetDblNr);
sign[0] := 3;sign[1] := 3;sign[2] := 14;
@optGetDbl2Nr := LoadEntry('optGetDbl2Nr', 2, @d_optGetDbl2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 13;
@optSetDblNr := LoadEntry('optSetDblNr', 2, @d_optSetDblNr);
sign[0] := 3;sign[1] := 3;sign[2] := 13;
@optSetDbl2Nr := LoadEntry('optSetDbl2Nr', 2, @d_optSetDbl2Nr);
sign[0] := 3;sign[1] := 11;sign[2] := 12;
@optGetValStr := LoadEntry('optGetValStr', 2, @d_optGetValStr);
sign[0] := 3;sign[1] := 11;sign[2] := 12;
@optGetVal2Str := LoadEntry('optGetVal2Str', 2, @d_optGetVal2Str);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetNameNr := LoadEntry('optGetNameNr', 2, @d_optGetNameNr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetDefinedNr := LoadEntry('optGetDefinedNr', 2, @d_optGetDefinedNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;
@optGetHelpNr := LoadEntry('optGetHelpNr', 3, @d_optGetHelpNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 4;sign[5] := 12;
@optGetGroupNr := LoadEntry('optGetGroupNr', 5, @d_optGetGroupNr);
sign[0] := 3;sign[1] := 3;
@optGetGroupGrpNr := LoadEntry('optGetGroupGrpNr', 1, @d_optGetGroupGrpNr);
sign[0] := 3;sign[1] := 3;
@optGetOptGroupNr := LoadEntry('optGetOptGroupNr', 1, @d_optGetOptGroupNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 4;sign[5] := 14;
@optGetDotOptNr := LoadEntry('optGetDotOptNr', 5, @d_optGetDotOptNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetDotOptUel := LoadEntry('optGetDotOptUel', 3, @d_optGetDotOptUel);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;sign[4] := 12;sign[5] := 4;sign[6] := 4;sign[7] := 4;
@optGetVarEquMapNr := LoadEntry('optGetVarEquMapNr', 7, @d_optGetVarEquMapNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 3;sign[4] := 12;
@optGetEquVarEquMapNr := LoadEntry('optGetEquVarEquMapNr', 4, @d_optGetEquVarEquMapNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 3;sign[4] := 12;
@optGetVarVarEquMapNr := LoadEntry('optGetVarVarEquMapNr', 4, @d_optGetVarVarEquMapNr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optVarEquMapCount := LoadEntry('optVarEquMapCount', 2, @d_optVarEquMapCount);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;sign[4] := 4;sign[5] := 4;sign[6] := 4;
@optGetIndicatorNr := LoadEntry('optGetIndicatorNr', 6, @d_optGetIndicatorNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetEquIndicatorNr := LoadEntry('optGetEquIndicatorNr', 3, @d_optGetEquIndicatorNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetVarIndicatorNr := LoadEntry('optGetVarIndicatorNr', 3, @d_optGetVarIndicatorNr);
sign[0] := 3;sign[1] := 4;
@optIndicatorCount := LoadEntry('optIndicatorCount', 1, @d_optIndicatorCount);
sign[0] := 3;sign[1] := 4;
@optDotOptCount := LoadEntry('optDotOptCount', 1, @d_optDotOptCount);
sign[0] := 3;sign[1] := 3;sign[2] := 3;
@optSetRefNr := LoadEntry('optSetRefNr', 2, @d_optSetRefNr);
sign[0] := 3;sign[1] := 11;sign[2] := 3;
@optSetRefNrStr := LoadEntry('optSetRefNrStr', 2, @d_optSetRefNrStr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetConstName := LoadEntry('optGetConstName', 3, @d_optGetConstName);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetTypeName := LoadEntry('optGetTypeName', 2, @d_optGetTypeName);
sign[0] := 3;sign[1] := 11;
@optLookUp := LoadEntry('optLookUp', 1, @d_optLookUp);
sign[0] := 0;sign[1] := 10;
@optReadFromPChar := LoadEntry('optReadFromPChar', 1, @d_optReadFromPChar);
sign[0] := 3;sign[1] := 11;sign[2] := 12;sign[3] := 4;
@optGetNameOpt := LoadEntry('optGetNameOpt', 3, @d_optGetNameOpt);
sign[0] := 15;sign[1] := 11;
@bool_optGetDefinedStr := LoadEntry('optGetDefinedStr', 1, @d_optGetDefinedStr);
sign[0] := 3;sign[1] := 11;
@optGetIntStr := LoadEntry('optGetIntStr', 1, @d_optGetIntStr);
sign[0] := 13;sign[1] := 11;
@optGetDblStr := LoadEntry('optGetDblStr', 1, @d_optGetDblStr);
sign[0] := 12;sign[1] := 11;
@sst_optGetStrStr := LoadEntry('optGetStrStr', 1, @d_optGetStrStr);
sign[0] := 0;sign[1] := 11;sign[2] := 3;
@optSetIntStr := LoadEntry('optSetIntStr', 2, @d_optSetIntStr);
sign[0] := 0;sign[1] := 11;sign[2] := 13;
@optSetDblStr := LoadEntry('optSetDblStr', 2, @d_optSetDblStr);
sign[0] := 0;sign[1] := 11;sign[2] := 11;
@optSetStrStr := LoadEntry('optSetStrStr', 2, @d_optSetStrStr);
sign[0] := 3;
@optCount := LoadEntry('optCount', 0, @d_optCount);
sign[0] := 3;
@optMessageCount := LoadEntry('optMessageCount', 0, @d_optMessageCount);
sign[0] := 3;
@optGroupCount := LoadEntry('optGroupCount', 0, @d_optGroupCount);
sign[0] := 3;
@optRecentEnabled := LoadEntry('optRecentEnabled', 0, @d_optRecentEnabled);
sign[0] := 0; sign[1] := 3;
@optRecentEnabledSet := LoadEntry('optRecentEnabledSet', 1, @d_optRecentEnabledSet);
Result := true;
end;

procedure XLibraryUnload;
begin
if LibHandle <> 0
then
   begin
   if @optFinalize <> nil
   then
      optFinalize;

   FreeLibrary(LibHandle);
   LibHandle := 0;
   end;

@XCreate                    := nil;
@XFree                      := nil;
@optInitialize              := nil;
@optFinalize                := nil;
@optReadDefinition          := nil;
@optReadParameterFile       := nil;
@optReadFromStr             := nil;
@optWriteParameterFile      := nil;
@optClearMessages           := nil;
@optAddMessage              := nil;
@optGetMessage              := nil;
@optResetAll                := nil;
@optResetAllRecent          := nil;
@optResetRecentChanges      := nil;
@optShowHelp                := nil;
@optResetNr                 := nil;
@optFindStr                 := nil;
@optGetInfoNr               := nil;
@optGetValuesNr             := nil;
@optSetValuesNr             := nil;
@optSetValues2Nr            := nil;
@optVersion                 := nil;
@optDefinitionFile          := nil;
@optGetFromAnyStrList       := nil;
@optGetFromListStr          := nil;
@optListCountStr            := nil;
@optReadFromListStr         := nil;
@optSynonymCount            := nil;
@optGetSynonym              := nil;
@optEchoSet                 := nil;
@optEOLOnlySet              := nil;
@optNoBoundsSet             := nil;
@optErrorCount              := nil;
@optGetBoundsInt            := nil;
@optGetBoundsDbl            := nil;
@optGetDefaultStr           := nil;
@optGetIntNr                := nil;
@optGetInt2Nr               := nil;
@optSetIntNr                := nil;
@optSetInt2Nr               := nil;
@optGetStrNr                := nil;
@optGetOptHelpNr            := nil;
@optGetEnumHelp             := nil;
@optGetEnumStrNr            := nil;
@optGetEnumCount            := nil;
@optGetEnumValue            := nil;
@optGetStr2Nr               := nil;
@optSetStrNr                := nil;
@optSetStr2Nr               := nil;
@optGetDblNr                := nil;
@optGetDbl2Nr               := nil;
@optSetDblNr                := nil;
@optSetDbl2Nr               := nil;
@optGetValStr               := nil;
@optGetVal2Str              := nil;
@optGetNameNr               := nil;
@optGetDefinedNr            := nil;
@optGetHelpNr               := nil;
@optGetGroupNr              := nil;
@optGetGroupGrpNr           := nil;
@optGetOptGroupNr           := nil;
@optGetDotOptNr             := nil;
@optGetDotOptUel            := nil;
@optGetVarEquMapNr          := nil;
@optGetEquVarEquMapNr       := nil;
@optGetVarVarEquMapNr       := nil;
@optVarEquMapCount          := nil;
@optGetIndicatorNr          := nil;
@optGetEquIndicatorNr       := nil;
@optGetVarIndicatorNr       := nil;
@optIndicatorCount          := nil;
@optDotOptCount             := nil;
@optSetRefNr                := nil;
@optSetRefNrStr             := nil;
@optGetConstName            := nil;
@optGetTypeName             := nil;
@optLookUp                  := nil;
@optReadFromPChar           := nil;
@optGetNameOpt              := nil;
@bool_optGetDefinedStr      := nil;
@optGetIntStr               := nil;
@optGetDblStr               := nil;
@sst_optGetStrStr           := nil;
@optSetIntStr               := nil;
@optSetDblStr               := nil;
@optSetStrStr               := nil;
@optSetLoadPath             := nil;
@optGetLoadPath             := nil;
@optCount                       := nil;
@optMessageCount                := nil;
@optGroupCount                  := nil;
@optRecentEnabled               := nil;
@optRecentEnabledSet            := nil;
end;

function LibLoader(const Path, Name: ShortString; var Msg: ShortString): boolean;
var
   xName  : ShortString;
   xPath  : ShortString;
begin
if Name <> ''
then
   xName := Name
else
   xName := 'optdclib.dll';
if Path = ''
then
   begin
   xPath       := '';
   LibFileName := xName
   end
else
   begin
   xPath       := ExcludeTrailingPathDelimiter(Path);
   LibFileName := xPath + PathDelim + xName;
   end;

Result := XLibraryLoad(Msg);
if @optSetLoadPath <> nil
then
   begin
   if Result
   then
      optSetLoadPath(xPath)
   else
      optSetLoadPath('');
   end;
end;

function optGetReady(var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   Result := LibLoader('', '', Msg)
else
   begin
   Msg := '';
   Result := true
   end;
end;

function optGetReadyX(var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   begin
   Result := LibLoader(ExtractFilePath(ParamStr(0)), '', Msg);
   if LibHandle = 0
   then
      Result := LibLoader('', '', Msg);
   end
else
   begin
   Msg := '';
   Result := true
   end;
end;

function optGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   Result := LibLoader(Dir, '', Msg)
else
   begin
   Msg := '';
   Result := true
   end;
end;

function optGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;
begin
if LibHandle = 0
then
   Result := LibLoader(ExtractFilePath(LibName), ExtractFileName(LibName), Msg)
else
   begin
   Msg := '';
   Result := true
   end;
end;

function  optGetHandle(popt: pointer): pointer;
begin
Result := popt;
end;

function optCreate(var popt: pointer; var Msg: ShortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcpdef.optCreate without an Object');
Result := optGetReady(Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function optCreateX(var popt: pointer; var Msg: ShortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcpdef.optCreate without an Object');
Result := optGetReadyX(Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function optCreateD(var popt: pointer; const Dir: ShortString; var Msg: shortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcpdef.optCreateD without an Object');
Result := optGetReadyD(Dir, Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function optCreateL(var popt: pointer; const LibName: ShortString; var Msg: shortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcpdef.optCreateL without an Object');
Result := optGetReadyL(LibName, Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

procedure optFree  (var popt: pointer);
begin
if @XFree <> nil
then
   begin
   XFree(popt); popt := nil;
   dec(ObjectCount);
   end;
end;

function optLibraryLoaded: boolean;
begin
Result := LibHandle <> 0;
end;

procedure optLibraryUnload;
begin
if LibHandle <> 0
then
   begin
   if ObjectCount<>0
   then
      begin
      writeln('Could not unload library, object not freed.');
      exit;
      end;
   XLibraryUnload;
   end;
end;

initialization

Libhandle := 0;
XLibraryUnload;

end.
