using System;
using System.Text;
using System.Runtime.InteropServices;

internal class gamsxcs: IDisposable  // C#  procedure wrapper generated by apiwrapper for GAMS Version 24.0.2
{
    private IntPtr pgamsx;
    private bool extHandle;
    private bool _disposed;

    [DllImport("kernel32.dll")]
    public static extern IntPtr LoadLibrary(string dllToLoad);
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procedureName);
    [DllImport("kernel32.dll")]
    public static extern bool FreeLibrary(IntPtr hModule);


    public delegate int TBrkPCallBack1(string fn,int linNr,int lstNr,IntPtr usrMem);
    public delegate int TBrkPCallBack2(string fn,int linNr,int lstNr,IntPtr userMem1,IntPtr userMem2);


    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxRunExecDLL_t(IntPtr pgamsx,IntPtr optPtr,string sysDir,int AVerbose,StringBuilder Msg);
    private static gamsxRunExecDLL_t dll_gamsxRunExecDLL;
    private static int d_gamsxRunExecDLL(IntPtr pgamsx,IntPtr optPtr,string sysDir,int AVerbose,StringBuilder Msg)
    { gamsxErrorHandling("gamsxRunExecDLL could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxShowError_t(IntPtr pgamsx,string fNameLog,StringBuilder errorLine,StringBuilder errorTyp,StringBuilder gmsLine);
    private static gamsxShowError_t dll_gamsxShowError;
    private static int d_gamsxShowError(IntPtr pgamsx,string fNameLog,StringBuilder errorLine,StringBuilder errorTyp,StringBuilder gmsLine)
    { gamsxErrorHandling("gamsxShowError could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxAddBreakPoint_t(IntPtr pgamsx,string fn,int lineNr);
    private static gamsxAddBreakPoint_t dll_gamsxAddBreakPoint;
    private static void d_gamsxAddBreakPoint(IntPtr pgamsx,string fn,int lineNr)
    { gamsxErrorHandling("gamsxAddBreakPoint could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxClearBreakPoints_t(IntPtr pgamsx);
    private static gamsxClearBreakPoints_t dll_gamsxClearBreakPoints;
    private static void d_gamsxClearBreakPoints(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxClearBreakPoints could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxSystemInfo_t(IntPtr pgamsx,ref int NrSy,ref int NrUel);
    private static gamsxSystemInfo_t dll_gamsxSystemInfo;
    private static int d_gamsxSystemInfo(IntPtr pgamsx,ref int NrSy,ref int NrUel)
    { gamsxErrorHandling("gamsxSystemInfo could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxSymbolInfo_t(IntPtr pgamsx,int SyNr,StringBuilder SyName,StringBuilder SyExplTxt,ref int SyDim,ref int SyTyp,ref int SyCount,ref int SyUserInfo);
    private static gamsxSymbolInfo_t dll_gamsxSymbolInfo;
    private static int d_gamsxSymbolInfo(IntPtr pgamsx,int SyNr,StringBuilder SyName,StringBuilder SyExplTxt,ref int SyDim,ref int SyTyp,ref int SyCount,ref int SyUserInfo)
    { gamsxErrorHandling("gamsxSymbolInfo could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxUelName_t(IntPtr pgamsx,int uel,StringBuilder sst_result);
    private static gamsxUelName_t dll_gamsxUelName;
    private static void d_gamsxUelName(IntPtr pgamsx,int uel,StringBuilder sst_result)
    { gamsxErrorHandling("gamsxUelName could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxFindSymbol_t(IntPtr pgamsx,string SyName);
    private static gamsxFindSymbol_t dll_gamsxFindSymbol;
    private static int d_gamsxFindSymbol(IntPtr pgamsx,string SyName)
    { gamsxErrorHandling("gamsxFindSymbol could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxDataReadRawStart_t(IntPtr pgamsx,int SyNr,ref int SyCount);
    private static gamsxDataReadRawStart_t dll_gamsxDataReadRawStart;
    private static int d_gamsxDataReadRawStart(IntPtr pgamsx,int SyNr,ref int SyCount)
    { gamsxErrorHandling("gamsxDataReadRawStart could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxDataReadRaw_t(IntPtr pgamsx,int[] Elements,double[] Vals,ref int FDim);
    private static gamsxDataReadRaw_t dll_gamsxDataReadRaw;
    private static int d_gamsxDataReadRaw(IntPtr pgamsx,int[] Elements,double[] Vals,ref int FDim)
    { gamsxErrorHandling("gamsxDataReadRaw could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxDataReadDone_t(IntPtr pgamsx);
    private static gamsxDataReadDone_t dll_gamsxDataReadDone;
    private static int d_gamsxDataReadDone(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxDataReadDone could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxDataWriteRawStart_t(IntPtr pgamsx,int SyNr,int DoMerge);
    private static gamsxDataWriteRawStart_t dll_gamsxDataWriteRawStart;
    private static int d_gamsxDataWriteRawStart(IntPtr pgamsx,int SyNr,int DoMerge)
    { gamsxErrorHandling("gamsxDataWriteRawStart could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxDataWriteRaw_t(IntPtr pgamsx,int[] Elements,double[] Vals);
    private static gamsxDataWriteRaw_t dll_gamsxDataWriteRaw;
    private static int d_gamsxDataWriteRaw(IntPtr pgamsx,int[] Elements,double[] Vals)
    { gamsxErrorHandling("gamsxDataWriteRaw could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxDataWriteDone_t(IntPtr pgamsx);
    private static gamsxDataWriteDone_t dll_gamsxDataWriteDone;
    private static int d_gamsxDataWriteDone(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxDataWriteDone could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxRegisterCB1_t(IntPtr pgamsx,TBrkPCallBack1 CB1,IntPtr userMem);
    private static gamsxRegisterCB1_t dll_gamsxRegisterCB1;
    private static void d_gamsxRegisterCB1(IntPtr pgamsx,TBrkPCallBack1 CB1,IntPtr userMem)
    { gamsxErrorHandling("gamsxRegisterCB1 could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxRegisterCB2_t(IntPtr pgamsx,TBrkPCallBack2 CB2,IntPtr userMem1,IntPtr userMem2);
    private static gamsxRegisterCB2_t dll_gamsxRegisterCB2;
    private static void d_gamsxRegisterCB2(IntPtr pgamsx,TBrkPCallBack2 CB2,IntPtr userMem1,IntPtr userMem2)
    { gamsxErrorHandling("gamsxRegisterCB2 could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate TBrkPCallBack1 gamsxGetCB1_t(IntPtr pgamsx);
    private static gamsxGetCB1_t dll_gamsxGetCB1;
    private static TBrkPCallBack1 d_gamsxGetCB1(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxGetCB1 could not be loaded"); return null; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate TBrkPCallBack2 gamsxGetCB2_t(IntPtr pgamsx);
    private static gamsxGetCB2_t dll_gamsxGetCB2;
    private static TBrkPCallBack2 d_gamsxGetCB2(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxGetCB2 could not be loaded"); return null; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr gamsxGetCB1UM_t(IntPtr pgamsx);
    private static gamsxGetCB1UM_t dll_gamsxGetCB1UM;
    private static IntPtr d_gamsxGetCB1UM(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxGetCB1UM could not be loaded"); return IntPtr.Zero; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr gamsxGetCB2UM1_t(IntPtr pgamsx);
    private static gamsxGetCB2UM1_t dll_gamsxGetCB2UM1;
    private static IntPtr d_gamsxGetCB2UM1(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxGetCB2UM1 could not be loaded"); return IntPtr.Zero; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr gamsxGetCB2UM2_t(IntPtr pgamsx);
    private static gamsxGetCB2UM2_t dll_gamsxGetCB2UM2;
    private static IntPtr d_gamsxGetCB2UM2(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxGetCB2UM2 could not be loaded"); return IntPtr.Zero; }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxSWSet_t(IntPtr pgamsx,int x);
    private static gamsxSWSet_t dll_gamsxSWSet;
    private static void d_gamsxSWSet(IntPtr pgamsx,int x)
    { gamsxErrorHandling("gamsxSWSet could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxStepThrough_t(IntPtr pgamsx);
    private static gamsxStepThrough_t dll_gamsxStepThrough;
    private static int d_gamsxStepThrough(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxStepThrough could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxStepThroughSet_t(IntPtr pgamsx,int x);
    private static gamsxStepThroughSet_t dll_gamsxStepThroughSet;
    private static void d_gamsxStepThroughSet(IntPtr pgamsx,int x)
    { gamsxErrorHandling("gamsxStepThroughSet could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxRunToEnd_t(IntPtr pgamsx);
    private static gamsxRunToEnd_t dll_gamsxRunToEnd;
    private static int d_gamsxRunToEnd(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxRunToEnd could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void gamsxRunToEndSet_t(IntPtr pgamsx,int x);
    private static gamsxRunToEndSet_t dll_gamsxRunToEndSet;
    private static void d_gamsxRunToEndSet(IntPtr pgamsx,int x)
    { gamsxErrorHandling("gamsxRunToEndSet could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxCB1Defined_t(IntPtr pgamsx);
    private static gamsxCB1Defined_t dll_gamsxCB1Defined;
    private static int d_gamsxCB1Defined(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxCB1Defined could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int gamsxCB2Defined_t(IntPtr pgamsx);
    private static gamsxCB2Defined_t dll_gamsxCB2Defined;
    private static int d_gamsxCB2Defined(IntPtr pgamsx)
    { gamsxErrorHandling("gamsxCB2Defined could not be loaded"); return 0; }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void xcreate_t(ref IntPtr pgamsx);
    private static xcreate_t xcreate;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void xfree_t(ref IntPtr pgamsx);
    private static xfree_t xfree;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int xapiversion_t(int api, StringBuilder msg, ref int cl);
    private static xapiversion_t dll_xapiversion;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int xcheck_t(string ep, int nargs, int[] s, StringBuilder msg);
    private static xcheck_t dll_xcheck;

    public delegate bool gamsxErrorCallback_t(int ErrCount, string Msg);

    static bool isLoaded = false;
    static IntPtr h;
    static bool ScreenIndicator = true;
    static bool ExceptionIndicator = false;
    static bool ExitIndicator = true;
    static gamsxErrorCallback_t ErrorCallBack = null;
    static int APIErrorCount = 0;

    private bool XLibraryLoad (string dllName, ref string errBuf)
    {
        string symName;
        int cl = 0;
        IntPtr pAddressOfFunctionToCall;

        if (isLoaded)
            return true;
        h = LoadLibrary(@dllName);;
        if (IntPtr.Zero == h) {
            errBuf = "Could not load shared library " + dllName;
            return false;
        }

        pAddressOfFunctionToCall = GetProcAddress(h, "xcreate");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            xcreate = (xcreate_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xcreate_t));
        else {
           symName = "xcreate"; goto symMissing;
        }
        pAddressOfFunctionToCall = GetProcAddress(h, "xfree");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            xfree = (xfree_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xfree_t));
        else {
           symName = "xfree"; goto symMissing;
        }

        pAddressOfFunctionToCall = GetProcAddress(h, "cxcheck");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            dll_xcheck = (xcheck_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xcheck_t));
        else {
           symName = "cxcheck"; goto symMissing;
        }
        pAddressOfFunctionToCall = GetProcAddress(h, "cxapiversion");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            dll_xapiversion = (xapiversion_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xapiversion_t));
        else {
           symName = "cxapiversion"; goto symMissing;
        }

        if (xapiversion(1,ref errBuf, ref cl) == 0)
            return false;

        {int[] s={3,1,11,3,12};
        if (xcheck("gamsxRunExecDLL",4,s,ref errBuf) == 0)
            dll_gamsxRunExecDLL = d_gamsxRunExecDLL;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "cgamsxrunexecdll");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxRunExecDLL = (gamsxRunExecDLL_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxRunExecDLL_t));
            else {
                symName = "cgamsxRunExecDLL"; goto symMissing;
            }}}
        {int[] s={15,11,12,12,12};
        if (xcheck("gamsxShowError",4,s,ref errBuf) == 0)
            dll_gamsxShowError = d_gamsxShowError;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "cgamsxshowerror");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxShowError = (gamsxShowError_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxShowError_t));
            else {
                symName = "cgamsxShowError"; goto symMissing;
            }}}
        {int[] s={0,11,3};
        if (xcheck("gamsxAddBreakPoint",2,s,ref errBuf) == 0)
            dll_gamsxAddBreakPoint = d_gamsxAddBreakPoint;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "cgamsxaddbreakpoint");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxAddBreakPoint = (gamsxAddBreakPoint_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxAddBreakPoint_t));
            else {
                symName = "cgamsxAddBreakPoint"; goto symMissing;
            }}}
        {int[] s={0};
        if (xcheck("gamsxClearBreakPoints",0,s,ref errBuf) == 0)
            dll_gamsxClearBreakPoints = d_gamsxClearBreakPoints;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxclearbreakpoints");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxClearBreakPoints = (gamsxClearBreakPoints_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxClearBreakPoints_t));
            else {
                symName = "gamsxClearBreakPoints"; goto symMissing;
            }}}
        {int[] s={3,21,21};
        if (xcheck("gamsxSystemInfo",2,s,ref errBuf) == 0)
            dll_gamsxSystemInfo = d_gamsxSystemInfo;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxsysteminfo");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxSystemInfo = (gamsxSystemInfo_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxSystemInfo_t));
            else {
                symName = "gamsxSystemInfo"; goto symMissing;
            }}}
        {int[] s={3,3,12,12,21,21,21,21};
        if (xcheck("gamsxSymbolInfo",7,s,ref errBuf) == 0)
            dll_gamsxSymbolInfo = d_gamsxSymbolInfo;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "cgamsxsymbolinfo");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxSymbolInfo = (gamsxSymbolInfo_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxSymbolInfo_t));
            else {
                symName = "cgamsxSymbolInfo"; goto symMissing;
            }}}
        {int[] s={12,3};
        if (xcheck("gamsxUelName",1,s,ref errBuf) == 0)
            dll_gamsxUelName = d_gamsxUelName;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "cgamsxuelname");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxUelName = (gamsxUelName_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxUelName_t));
            else {
                symName = "cgamsxUelName"; goto symMissing;
            }}}
        {int[] s={3,11};
        if (xcheck("gamsxFindSymbol",1,s,ref errBuf) == 0)
            dll_gamsxFindSymbol = d_gamsxFindSymbol;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "cgamsxfindsymbol");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxFindSymbol = (gamsxFindSymbol_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxFindSymbol_t));
            else {
                symName = "cgamsxFindSymbol"; goto symMissing;
            }}}
        {int[] s={3,3,21};
        if (xcheck("gamsxDataReadRawStart",2,s,ref errBuf) == 0)
            dll_gamsxDataReadRawStart = d_gamsxDataReadRawStart;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxdatareadrawstart");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxDataReadRawStart = (gamsxDataReadRawStart_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxDataReadRawStart_t));
            else {
                symName = "gamsxDataReadRawStart"; goto symMissing;
            }}}
        {int[] s={3,52,54,21};
        if (xcheck("gamsxDataReadRaw",3,s,ref errBuf) == 0)
            dll_gamsxDataReadRaw = d_gamsxDataReadRaw;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxdatareadraw");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxDataReadRaw = (gamsxDataReadRaw_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxDataReadRaw_t));
            else {
                symName = "gamsxDataReadRaw"; goto symMissing;
            }}}
        {int[] s={3};
        if (xcheck("gamsxDataReadDone",0,s,ref errBuf) == 0)
            dll_gamsxDataReadDone = d_gamsxDataReadDone;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxdatareaddone");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxDataReadDone = (gamsxDataReadDone_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxDataReadDone_t));
            else {
                symName = "gamsxDataReadDone"; goto symMissing;
            }}}
        {int[] s={3,3,15};
        if (xcheck("gamsxDataWriteRawStart",2,s,ref errBuf) == 0)
            dll_gamsxDataWriteRawStart = d_gamsxDataWriteRawStart;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxdatawriterawstart");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxDataWriteRawStart = (gamsxDataWriteRawStart_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxDataWriteRawStart_t));
            else {
                symName = "gamsxDataWriteRawStart"; goto symMissing;
            }}}
        {int[] s={3,51,53};
        if (xcheck("gamsxDataWriteRaw",2,s,ref errBuf) == 0)
            dll_gamsxDataWriteRaw = d_gamsxDataWriteRaw;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxdatawriteraw");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxDataWriteRaw = (gamsxDataWriteRaw_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxDataWriteRaw_t));
            else {
                symName = "gamsxDataWriteRaw"; goto symMissing;
            }}}
        {int[] s={3};
        if (xcheck("gamsxDataWriteDone",0,s,ref errBuf) == 0)
            dll_gamsxDataWriteDone = d_gamsxDataWriteDone;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxdatawritedone");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxDataWriteDone = (gamsxDataWriteDone_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxDataWriteDone_t));
            else {
                symName = "gamsxDataWriteDone"; goto symMissing;
            }}}
        {int[] s={0,59,1};
        if (xcheck("gamsxRegisterCB1",2,s,ref errBuf) == 0)
            dll_gamsxRegisterCB1 = d_gamsxRegisterCB1;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxregistercb1");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxRegisterCB1 = (gamsxRegisterCB1_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxRegisterCB1_t));
            else {
                symName = "gamsxRegisterCB1"; goto symMissing;
            }}}
        {int[] s={0,59,1,1};
        if (xcheck("gamsxRegisterCB2",3,s,ref errBuf) == 0)
            dll_gamsxRegisterCB2 = d_gamsxRegisterCB2;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxregistercb2");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxRegisterCB2 = (gamsxRegisterCB2_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxRegisterCB2_t));
            else {
                symName = "gamsxRegisterCB2"; goto symMissing;
            }}}
        {int[] s={59};
        if (xcheck("gamsxGetCB1",0,s,ref errBuf) == 0)
            dll_gamsxGetCB1 = d_gamsxGetCB1;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxgetcb1");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxGetCB1 = (gamsxGetCB1_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxGetCB1_t));
            else {
                symName = "gamsxGetCB1"; goto symMissing;
            }}}
        {int[] s={59};
        if (xcheck("gamsxGetCB2",0,s,ref errBuf) == 0)
            dll_gamsxGetCB2 = d_gamsxGetCB2;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxgetcb2");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxGetCB2 = (gamsxGetCB2_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxGetCB2_t));
            else {
                symName = "gamsxGetCB2"; goto symMissing;
            }}}
        {int[] s={1};
        if (xcheck("gamsxGetCB1UM",0,s,ref errBuf) == 0)
            dll_gamsxGetCB1UM = d_gamsxGetCB1UM;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxgetcb1um");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxGetCB1UM = (gamsxGetCB1UM_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxGetCB1UM_t));
            else {
                symName = "gamsxGetCB1UM"; goto symMissing;
            }}}
        {int[] s={1};
        if (xcheck("gamsxGetCB2UM1",0,s,ref errBuf) == 0)
            dll_gamsxGetCB2UM1 = d_gamsxGetCB2UM1;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxgetcb2um1");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxGetCB2UM1 = (gamsxGetCB2UM1_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxGetCB2UM1_t));
            else {
                symName = "gamsxGetCB2UM1"; goto symMissing;
            }}}
        {int[] s={1};
        if (xcheck("gamsxGetCB2UM2",0,s,ref errBuf) == 0)
            dll_gamsxGetCB2UM2 = d_gamsxGetCB2UM2;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxgetcb2um2");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxGetCB2UM2 = (gamsxGetCB2UM2_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxGetCB2UM2_t));
            else {
                symName = "gamsxGetCB2UM2"; goto symMissing;
            }}}
        {int[] s={0,3};
        if (xcheck("gamsxSWSet",1,s,ref errBuf) == 0)
            dll_gamsxSWSet = d_gamsxSWSet;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxswset");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxSWSet = (gamsxSWSet_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxSWSet_t));
            else {
                symName = "gamsxSWSet"; goto symMissing;
        }}}
        {int[] s={15};
        if (xcheck("gamsxStepThrough",0,s,ref errBuf) == 0)
            dll_gamsxStepThrough = d_gamsxStepThrough;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxstepthrough");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxStepThrough = (gamsxStepThrough_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxStepThrough_t));
            else {
                symName = "gamsxStepThrough"; goto symMissing;
        }}}
        {int[] s={0,15};
        if (xcheck("gamsxStepThroughSet",1,s,ref errBuf) == 0)
            dll_gamsxStepThroughSet = d_gamsxStepThroughSet;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxstepthroughset");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxStepThroughSet = (gamsxStepThroughSet_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxStepThroughSet_t));
            else {
                symName = "gamsxStepThroughSet"; goto symMissing;
        }}}
        {int[] s={15};
        if (xcheck("gamsxRunToEnd",0,s,ref errBuf) == 0)
            dll_gamsxRunToEnd = d_gamsxRunToEnd;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxruntoend");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxRunToEnd = (gamsxRunToEnd_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxRunToEnd_t));
            else {
                symName = "gamsxRunToEnd"; goto symMissing;
        }}}
        {int[] s={0,15};
        if (xcheck("gamsxRunToEndSet",1,s,ref errBuf) == 0)
            dll_gamsxRunToEndSet = d_gamsxRunToEndSet;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxruntoendset");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxRunToEndSet = (gamsxRunToEndSet_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxRunToEndSet_t));
            else {
                symName = "gamsxRunToEndSet"; goto symMissing;
        }}}
        {int[] s={15};
        if (xcheck("gamsxCB1Defined",0,s,ref errBuf) == 0)
            dll_gamsxCB1Defined = d_gamsxCB1Defined;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxcb1defined");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxCB1Defined = (gamsxCB1Defined_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxCB1Defined_t));
            else {
                symName = "gamsxCB1Defined"; goto symMissing;
        }}}
        {int[] s={15};
        if (xcheck("gamsxCB2Defined",0,s,ref errBuf) == 0)
            dll_gamsxCB2Defined = d_gamsxCB2Defined;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "gamsxcb2defined");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_gamsxCB2Defined = (gamsxCB2Defined_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(gamsxCB2Defined_t));
            else {
                symName = "gamsxCB2Defined"; goto symMissing;
        }}}

        return true;

        symMissing:
            errBuf = "Could not load symbol '" + symName + "'";
            return false;

    } /* XLibraryLoad */

    private bool libloader(string dllPath, string dllName, ref string msgBuf)
    {
        string dllNameBuf = string.Empty;
        int myrc = 0;
        string GMS_DLL_SUFFIX = string.Empty;

        msgBuf = string.Empty;
        if (! isLoaded) {
            if (string.Empty != dllPath) {
                dllNameBuf = dllPath;
                if ('\\' != dllNameBuf[dllNameBuf.Length-1]) dllNameBuf = dllNameBuf + "\\";
            }
            if (string.Empty != dllName)
                dllNameBuf = dllNameBuf + dllName;
            else {
                if (8 == IntPtr.Size)
                    GMS_DLL_SUFFIX = "64";
                dllNameBuf = dllNameBuf + "gamsxdclib" + GMS_DLL_SUFFIX + ".dll";
            }
            isLoaded = XLibraryLoad (dllNameBuf, ref msgBuf);
            if (isLoaded) {
            } else                          /* library load failed */
                myrc |= 1;
        }
        return (myrc & 1) == 0;
    } /* libloader */

    public bool gamsxGetReady (ref string msgBuf)
    {
        return libloader(string.Empty, string.Empty, ref msgBuf);
    }
    public bool gamsxGetReadyD (string dirName, ref string msgBuf)
    {
        return libloader(dirName, string.Empty, ref msgBuf);
    }
    public bool gamsxGetReadyL (string dirName, string libName, ref string msgBuf)
    {
        return libloader(dirName, libName, ref msgBuf);
    }

    public gamsxcs(ref string msgBuf)
    {
        bool gamsxIsReady;

        extHandle = false;
        _disposed = false;
        gamsxIsReady = gamsxGetReady (ref msgBuf);
        if (! gamsxIsReady) return;
        xcreate(ref pgamsx);
        if(pgamsx != IntPtr.Zero)
        {
            msgBuf = String.Empty;
            return;
        }
        msgBuf = "Error while creating object";
    }
    public gamsxcs(string dirName, ref string msgBuf)
    {
        bool gamsxIsReady;

        extHandle = false;
        _disposed = false;
        gamsxIsReady = gamsxGetReadyD (dirName, ref msgBuf);
        if (! gamsxIsReady) return;
        xcreate(ref pgamsx);
        if(pgamsx != IntPtr.Zero)
        {
            msgBuf = String.Empty;
            return;
        }
        msgBuf = "Error while creating object";
    }
    public gamsxcs(string dirName, string libName, ref string msgBuf)
    {
        bool gamsxIsReady;

        extHandle = false;
        _disposed = false;
        gamsxIsReady = gamsxGetReadyL (dirName, libName, ref msgBuf);
        if (! gamsxIsReady) return;
        xcreate(ref pgamsx);
        if(pgamsx != IntPtr.Zero)
        {
            msgBuf = String.Empty;
            return;
        }
        msgBuf = "Error while creating object";
    }
    public gamsxcs(IntPtr gamsxHandle, ref string msgBuf)
    {
        bool gamsxIsReady;

        if(gamsxHandle == IntPtr.Zero)
        {
           msgBuf = "gamsxHandle is empty";
           return;
        }
        extHandle = true;
        _disposed = false;
        gamsxIsReady = gamsxGetReady (ref msgBuf);
        if (! gamsxIsReady) return;
        pgamsx = gamsxHandle;
    }
    public gamsxcs(IntPtr gamsxHandle, string dirName, ref string msgBuf)
    {
        bool gamsxIsReady;

        if(gamsxHandle == IntPtr.Zero)
        {
           msgBuf = "gamsxHandle is empty";
           return;
        }
        extHandle = true;
        _disposed = false;
        gamsxIsReady = gamsxGetReadyD (dirName, ref msgBuf);
        if (! gamsxIsReady) return;
        pgamsx = gamsxHandle;
    }

    ~gamsxcs()
    {
        Dispose(true);
    }

    public void Dispose()
    {
        Dispose(true);

        // Use SupressFinalize in case a subclass
        // of this type implements a finalizer.
        GC.SuppressFinalize(this);
    }

    private void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                if (pgamsx != IntPtr.Zero)
                    gamsxFree();
            }
            // Indicate that the instance has been disposed.
            _disposed = true;
        }
        GC.KeepAlive(this);
    }

    public int gamsxFree()
    {
        if (!extHandle &&  pgamsx != IntPtr.Zero) xfree(ref pgamsx);
        return 1;
    }

    public bool gamsxLibraryUnload()
    {
        return FreeLibrary(h);
    }

    public IntPtr GetgamsxPtr()
    {
        return pgamsx;
    }

    public bool gamsxGetScreenIndicator()
    {
        return ScreenIndicator;
    }

    public void gamsxSetScreenIndicator(bool scrind)
    {
        ScreenIndicator = scrind;
    }

    public bool gamsxGetExceptionIndicator()
    {
         return ExceptionIndicator;
    }

    public void gamsxSetExceptionIndicator(bool excind)
    {
        ExceptionIndicator = excind;
    }

    public bool gamsxGetExitIndicator()
    {
        return ExitIndicator;
    }

    public void gamsxSetExitIndicator(bool extind)
    {
        ExitIndicator = extind;
    }

    public gamsxErrorCallback_t gamsxGetErrorCallback()
    {
        return ErrorCallBack;
    }

    public void gamsxSetErrorCallback(gamsxErrorCallback_t func)
    {
        ErrorCallBack = func;
    }

    public int gamsxGetAPIErrorCount()
    {
        return APIErrorCount;
    }

    public void gamsxSetAPIErrorCount(int ecnt)
    {
        APIErrorCount = ecnt;
    }

    private static void gamsxErrorHandling(string Msg)
    {
        APIErrorCount++;
        if (ScreenIndicator) Console.WriteLine(Msg);
        if (ErrorCallBack != null)
            if (ErrorCallBack(APIErrorCount, Msg)) Environment.Exit(123);
        if (ExceptionIndicator) throw new ArgumentNullException();
        if (ExitIndicator) Environment.Exit(123);
    }

    private void ConvertC2CS(byte[] b,ref string s)
    {
        int i;
        s = "";
        i = 0;
        while (b[i] != 0)
        {
            s = s + (char)(b[i]);
            i = i + 1;
        }
    }

    private void ConvertArrayC2CS(byte[,] b,ref string s,int k)
    {
        int i;
        s = "";
        i = 0;
        while (b[k, i] != 0)
        {
            s = s + (char)(b[k, i]);
            i = i + 1;
        }
    }

    private int xapiversion(int api, ref string msg, ref int cl)
    {
       int rc_xapiversion;
       StringBuilder cpy_msg = new StringBuilder(gamsglobals.str_len);
       rc_xapiversion = dll_xapiversion(api, cpy_msg, ref cl);
       msg = cpy_msg.ToString();
       return rc_xapiversion;
    }

    private int xcheck(string ep, int nargs, int[] s, ref string msg)
    {
       int rc_xcheck;
       StringBuilder cpy_msg = new StringBuilder(gamsglobals.str_len);
       rc_xcheck = dll_xcheck(ep, nargs, s, cpy_msg);
       msg = cpy_msg.ToString();
       return rc_xcheck;
    }


    public int gamsxRunExecDLL(IntPtr optPtr,string sysDir,int AVerbose,ref string Msg)
    {
       int rc_gamsxRunExecDLL;
       StringBuilder cpy_Msg = new StringBuilder(gamsglobals.str_len);
       rc_gamsxRunExecDLL = dll_gamsxRunExecDLL(pgamsx,optPtr,sysDir,AVerbose,cpy_Msg);
       Msg = cpy_Msg.ToString();
       return rc_gamsxRunExecDLL;
    }

    public bool gamsxShowError(string fNameLog,ref string errorLine,ref string errorTyp,ref string gmsLine)
    {
       int rc_gamsxShowError;
       StringBuilder cpy_errorLine = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_errorTyp = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_gmsLine = new StringBuilder(gamsglobals.str_len);
       rc_gamsxShowError = dll_gamsxShowError(pgamsx,fNameLog,cpy_errorLine,cpy_errorTyp,cpy_gmsLine);
       errorLine = cpy_errorLine.ToString();
       errorTyp = cpy_errorTyp.ToString();
       gmsLine = cpy_gmsLine.ToString();
       return rc_gamsxShowError != 0;
    }

    public void gamsxAddBreakPoint(string fn,int lineNr)
    {
       dll_gamsxAddBreakPoint(pgamsx,fn,lineNr);
    }

    public void gamsxClearBreakPoints()
    {
       dll_gamsxClearBreakPoints(pgamsx);
    }

    public int gamsxSystemInfo(ref int NrSy,ref int NrUel)
    {
       return dll_gamsxSystemInfo(pgamsx,ref NrSy,ref NrUel);
    }

    public int gamsxSymbolInfo(int SyNr,ref string SyName,ref string SyExplTxt,ref int SyDim,ref int SyTyp,ref int SyCount,ref int SyUserInfo)
    {
       int rc_gamsxSymbolInfo;
       StringBuilder cpy_SyName = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_SyExplTxt = new StringBuilder(gamsglobals.str_len);
       rc_gamsxSymbolInfo = dll_gamsxSymbolInfo(pgamsx,SyNr,cpy_SyName,cpy_SyExplTxt,ref SyDim,ref SyTyp,ref SyCount,ref SyUserInfo);
       SyName = cpy_SyName.ToString();
       SyExplTxt = cpy_SyExplTxt.ToString();
       return rc_gamsxSymbolInfo;
    }

    public string gamsxUelName(int uel)
    {
       string rc_gamsxUelName = "";;
       StringBuilder sst_result = new StringBuilder(gamsglobals.str_len);
       dll_gamsxUelName(pgamsx,uel,sst_result);
       rc_gamsxUelName = sst_result.ToString();
       return rc_gamsxUelName;
    }

    public int gamsxFindSymbol(string SyName)
    {
       return dll_gamsxFindSymbol(pgamsx,SyName);
    }

    public int gamsxDataReadRawStart(int SyNr,ref int SyCount)
    {
       return dll_gamsxDataReadRawStart(pgamsx,SyNr,ref SyCount);
    }

    public int gamsxDataReadRaw(ref int[] Elements,ref double[] Vals,ref int FDim)
    {
       return dll_gamsxDataReadRaw(pgamsx,Elements,Vals,ref FDim);
    }

    public int gamsxDataReadDone()
    {
       return dll_gamsxDataReadDone(pgamsx);
    }

    public int gamsxDataWriteRawStart(int SyNr,bool DoMerge)
    {
       int ib_DoMerge = 0;
       if (DoMerge) ib_DoMerge = 1;
       return dll_gamsxDataWriteRawStart(pgamsx,SyNr,ib_DoMerge);
    }

    public int gamsxDataWriteRaw(int[] Elements,double[] Vals)
    {
       return dll_gamsxDataWriteRaw(pgamsx,Elements,Vals);
    }

    public int gamsxDataWriteDone()
    {
       return dll_gamsxDataWriteDone(pgamsx);
    }

    public void gamsxRegisterCB1(TBrkPCallBack1 CB1,IntPtr userMem)
    {
       dll_gamsxRegisterCB1(pgamsx,CB1,userMem);
    }

    public void gamsxRegisterCB2(TBrkPCallBack2 CB2,IntPtr userMem1,IntPtr userMem2)
    {
       dll_gamsxRegisterCB2(pgamsx,CB2,userMem1,userMem2);
    }

    public TBrkPCallBack1 gamsxGetCB1()
    {
       return dll_gamsxGetCB1(pgamsx);
    }

    public TBrkPCallBack2 gamsxGetCB2()
    {
       return dll_gamsxGetCB2(pgamsx);
    }

    public IntPtr gamsxGetCB1UM()
    {
       return dll_gamsxGetCB1UM(pgamsx);
    }

    public IntPtr gamsxGetCB2UM1()
    {
       return dll_gamsxGetCB2UM1(pgamsx);
    }

    public IntPtr gamsxGetCB2UM2()
    {
       return dll_gamsxGetCB2UM2(pgamsx);
    }

    public void gamsxSWSet(int x)
    {
       dll_gamsxSWSet(pgamsx, x);
    }
    public bool gamsxStepThrough()
    {
       return dll_gamsxStepThrough(pgamsx) != 0;
    }
    public void gamsxStepThroughSet(bool x)
    {
       int ib_x = 0;
       if (x) ib_x = 1;
       dll_gamsxStepThroughSet(pgamsx, ib_x);
    }
    public bool gamsxRunToEnd()
    {
       return dll_gamsxRunToEnd(pgamsx) != 0;
    }
    public void gamsxRunToEndSet(bool x)
    {
       int ib_x = 0;
       if (x) ib_x = 1;
       dll_gamsxRunToEndSet(pgamsx, ib_x);
    }
    public bool gamsxCB1Defined()
    {
       return dll_gamsxCB1Defined(pgamsx) != 0;
    }
    public bool gamsxCB2Defined()
    {
       return dll_gamsxCB2Defined(pgamsx) != 0;
    }
}
