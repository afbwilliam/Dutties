using System;
using System.Text;
using System.Runtime.InteropServices;

internal class optcs: IDisposable  // C#  procedure wrapper generated by apiwrapper for GAMS Version 24.0.2
{
    private IntPtr popt;
    private bool extHandle;
    private bool _disposed;

    [DllImport("kernel32.dll")]
    public static extern IntPtr LoadLibrary(string dllToLoad);
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procedureName);
    [DllImport("kernel32.dll")]
    public static extern bool FreeLibrary(IntPtr hModule);


    public const int optDataNone    = 0;  //optDataType
    public const int optDataInteger = 1;
    public const int optDataDouble  = 2;
    public const int optDataString  = 3;
    public const int optDataStrList = 4;

    public const int optTypeInteger   = 0;  //optOptionType
    public const int optTypeDouble    = 1;
    public const int optTypeString    = 2;
    public const int optTypeBoolean   = 3;
    public const int optTypeEnumStr   = 4;
    public const int optTypeEnumInt   = 5;
    public const int optTypeMultiList = 6;
    public const int optTypeStrList   = 7;
    public const int optTypeMacro     = 8;
    public const int optTypeImmediate = 9;

    public const int optsubRequired = 0;  //optOptionSubType
    public const int optsubNoValue  = 1;
    public const int optsubOptional = 2;
    public const int optsub2Values  = 3;

    public const int optMsgInputEcho    = 0;  //optMsgType
    public const int optMsgHelp         = 1;
    public const int optMsgDefineError  = 2;
    public const int optMsgValueError   = 3;
    public const int optMsgValueWarning = 4;
    public const int optMsgDeprecated   = 5;
    public const int optMsgFileEnter    = 6;
    public const int optMsgFileLeave    = 7;
    public const int optMsgTooManyMsgs  = 8;
    public const int optMsgUserError    = 9;

    public const int optMapIndicator  = 0;  //optVarEquMapType
    public const int optMapDefinedVar = 1;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optSetLoadPath_t (string s);
    private static optSetLoadPath_t dll_optSetLoadPath;
    private static void d_optSetLoadPath (string s)
    { }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optGetLoadPath_t (ref byte s);
    private static optGetLoadPath_t dll_optGetLoadPath;
    private static void d_optGetLoadPath (ref byte s)
    { }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optReadDefinition_t(IntPtr popt,string fn);
    private static optReadDefinition_t dll_optReadDefinition;
    private static int d_optReadDefinition(IntPtr popt,string fn)
    { optErrorHandling("optReadDefinition could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optReadParameterFile_t(IntPtr popt,string fn);
    private static optReadParameterFile_t dll_optReadParameterFile;
    private static int d_optReadParameterFile(IntPtr popt,string fn)
    { optErrorHandling("optReadParameterFile could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optReadFromStr_t(IntPtr popt,string s);
    private static optReadFromStr_t dll_optReadFromStr;
    private static void d_optReadFromStr(IntPtr popt,string s)
    { optErrorHandling("optReadFromStr could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optWriteParameterFile_t(IntPtr popt,string fn);
    private static optWriteParameterFile_t dll_optWriteParameterFile;
    private static int d_optWriteParameterFile(IntPtr popt,string fn)
    { optErrorHandling("optWriteParameterFile could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optClearMessages_t(IntPtr popt);
    private static optClearMessages_t dll_optClearMessages;
    private static void d_optClearMessages(IntPtr popt)
    { optErrorHandling("optClearMessages could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optAddMessage_t(IntPtr popt,string info);
    private static optAddMessage_t dll_optAddMessage;
    private static void d_optAddMessage(IntPtr popt,string info)
    { optErrorHandling("optAddMessage could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optGetMessage_t(IntPtr popt,int NrMsg,StringBuilder info,ref int iType);
    private static optGetMessage_t dll_optGetMessage;
    private static void d_optGetMessage(IntPtr popt,int NrMsg,StringBuilder info,ref int iType)
    { optErrorHandling("optGetMessage could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optResetAll_t(IntPtr popt);
    private static optResetAll_t dll_optResetAll;
    private static void d_optResetAll(IntPtr popt)
    { optErrorHandling("optResetAll could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optResetAllRecent_t(IntPtr popt);
    private static optResetAllRecent_t dll_optResetAllRecent;
    private static void d_optResetAllRecent(IntPtr popt)
    { optErrorHandling("optResetAllRecent could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optResetRecentChanges_t(IntPtr popt);
    private static optResetRecentChanges_t dll_optResetRecentChanges;
    private static void d_optResetRecentChanges(IntPtr popt)
    { optErrorHandling("optResetRecentChanges could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optShowHelp_t(IntPtr popt,string HlpID);
    private static optShowHelp_t dll_optShowHelp;
    private static void d_optShowHelp(IntPtr popt,string HlpID)
    { optErrorHandling("optShowHelp could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optResetNr_t(IntPtr popt,int ANr);
    private static optResetNr_t dll_optResetNr;
    private static int d_optResetNr(IntPtr popt,int ANr)
    { optErrorHandling("optResetNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optFindStr_t(IntPtr popt,string AName,ref int ANr,ref int ARefNr);
    private static optFindStr_t dll_optFindStr;
    private static int d_optFindStr(IntPtr popt,string AName,ref int ANr,ref int ARefNr)
    { optErrorHandling("optFindStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetInfoNr_t(IntPtr popt,int ANr,ref int ADefined,ref int ADefinedR,ref int ARefNr,ref int ADataType,ref int AOptType,ref int ASubType);
    private static optGetInfoNr_t dll_optGetInfoNr;
    private static int d_optGetInfoNr(IntPtr popt,int ANr,ref int ADefined,ref int ADefinedR,ref int ARefNr,ref int ADataType,ref int AOptType,ref int ASubType)
    { optErrorHandling("optGetInfoNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetValuesNr_t(IntPtr popt,int ANr,StringBuilder ASName,ref int AIVal,ref double ADVal,StringBuilder ASVal);
    private static optGetValuesNr_t dll_optGetValuesNr;
    private static int d_optGetValuesNr(IntPtr popt,int ANr,StringBuilder ASName,ref int AIVal,ref double ADVal,StringBuilder ASVal)
    { optErrorHandling("optGetValuesNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetValuesNr_t(IntPtr popt,int ANr,int AIVal,double ADVal,string ASVal);
    private static optSetValuesNr_t dll_optSetValuesNr;
    private static int d_optSetValuesNr(IntPtr popt,int ANr,int AIVal,double ADVal,string ASVal)
    { optErrorHandling("optSetValuesNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetValues2Nr_t(IntPtr popt,int ANr,int AIVal,double ADVal,string ASVal);
    private static optSetValues2Nr_t dll_optSetValues2Nr;
    private static int d_optSetValues2Nr(IntPtr popt,int ANr,int AIVal,double ADVal,string ASVal)
    { optErrorHandling("optSetValues2Nr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optVersion_t(IntPtr popt,StringBuilder sversion);
    private static optVersion_t dll_optVersion;
    private static void d_optVersion(IntPtr popt,StringBuilder sversion)
    { optErrorHandling("optVersion could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optDefinitionFile_t(IntPtr popt,StringBuilder sfilename);
    private static optDefinitionFile_t dll_optDefinitionFile;
    private static void d_optDefinitionFile(IntPtr popt,StringBuilder sfilename)
    { optErrorHandling("optDefinitionFile could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetFromAnyStrList_t(IntPtr popt,int idash,StringBuilder skey,StringBuilder sval);
    private static optGetFromAnyStrList_t dll_optGetFromAnyStrList;
    private static int d_optGetFromAnyStrList(IntPtr popt,int idash,StringBuilder skey,StringBuilder sval)
    { optErrorHandling("optGetFromAnyStrList could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetFromListStr_t(IntPtr popt,string skey,StringBuilder sval);
    private static optGetFromListStr_t dll_optGetFromListStr;
    private static int d_optGetFromListStr(IntPtr popt,string skey,StringBuilder sval)
    { optErrorHandling("optGetFromListStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optListCountStr_t(IntPtr popt,string skey);
    private static optListCountStr_t dll_optListCountStr;
    private static int d_optListCountStr(IntPtr popt,string skey)
    { optErrorHandling("optListCountStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optReadFromListStr_t(IntPtr popt,string skey,int iPos,StringBuilder sval);
    private static optReadFromListStr_t dll_optReadFromListStr;
    private static int d_optReadFromListStr(IntPtr popt,string skey,int iPos,StringBuilder sval)
    { optErrorHandling("optReadFromListStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSynonymCount_t(IntPtr popt);
    private static optSynonymCount_t dll_optSynonymCount;
    private static int d_optSynonymCount(IntPtr popt)
    { optErrorHandling("optSynonymCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetSynonym_t(IntPtr popt,int NrSyn,StringBuilder SSyn,StringBuilder SName);
    private static optGetSynonym_t dll_optGetSynonym;
    private static int d_optGetSynonym(IntPtr popt,int NrSyn,StringBuilder SSyn,StringBuilder SName)
    { optErrorHandling("optGetSynonym could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optEchoSet_t(IntPtr popt,int AIVal);
    private static optEchoSet_t dll_optEchoSet;
    private static void d_optEchoSet(IntPtr popt,int AIVal)
    { optErrorHandling("optEchoSet could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optEOLOnlySet_t(IntPtr popt,int AIVal);
    private static optEOLOnlySet_t dll_optEOLOnlySet;
    private static int d_optEOLOnlySet(IntPtr popt,int AIVal)
    { optErrorHandling("optEOLOnlySet could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optNoBoundsSet_t(IntPtr popt,int AIVal);
    private static optNoBoundsSet_t dll_optNoBoundsSet;
    private static void d_optNoBoundsSet(IntPtr popt,int AIVal)
    { optErrorHandling("optNoBoundsSet could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optErrorCount_t(IntPtr popt,ref int iErrors,ref int iWarnings);
    private static optErrorCount_t dll_optErrorCount;
    private static void d_optErrorCount(IntPtr popt,ref int iErrors,ref int iWarnings)
    { optErrorHandling("optErrorCount could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetBoundsInt_t(IntPtr popt,int ANr,ref int ilval,ref int ihval,ref int idval);
    private static optGetBoundsInt_t dll_optGetBoundsInt;
    private static int d_optGetBoundsInt(IntPtr popt,int ANr,ref int ilval,ref int ihval,ref int idval)
    { optErrorHandling("optGetBoundsInt could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetBoundsDbl_t(IntPtr popt,int ANr,ref double dlval,ref double dhval,ref double ddval);
    private static optGetBoundsDbl_t dll_optGetBoundsDbl;
    private static int d_optGetBoundsDbl(IntPtr popt,int ANr,ref double dlval,ref double dhval,ref double ddval)
    { optErrorHandling("optGetBoundsDbl could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetDefaultStr_t(IntPtr popt,int ANr,StringBuilder sval);
    private static optGetDefaultStr_t dll_optGetDefaultStr;
    private static int d_optGetDefaultStr(IntPtr popt,int ANr,StringBuilder sval)
    { optErrorHandling("optGetDefaultStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetIntNr_t(IntPtr popt,int ANr,ref int AIVal);
    private static optGetIntNr_t dll_optGetIntNr;
    private static int d_optGetIntNr(IntPtr popt,int ANr,ref int AIVal)
    { optErrorHandling("optGetIntNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetInt2Nr_t(IntPtr popt,int ANr,ref int AIVal);
    private static optGetInt2Nr_t dll_optGetInt2Nr;
    private static int d_optGetInt2Nr(IntPtr popt,int ANr,ref int AIVal)
    { optErrorHandling("optGetInt2Nr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetIntNr_t(IntPtr popt,int ANr,int AIVal);
    private static optSetIntNr_t dll_optSetIntNr;
    private static int d_optSetIntNr(IntPtr popt,int ANr,int AIVal)
    { optErrorHandling("optSetIntNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetInt2Nr_t(IntPtr popt,int ANr,int AIVal);
    private static optSetInt2Nr_t dll_optSetInt2Nr;
    private static int d_optSetInt2Nr(IntPtr popt,int ANr,int AIVal)
    { optErrorHandling("optSetInt2Nr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetStrNr_t(IntPtr popt,int ANr,StringBuilder ASVal);
    private static optGetStrNr_t dll_optGetStrNr;
    private static int d_optGetStrNr(IntPtr popt,int ANr,StringBuilder ASVal)
    { optErrorHandling("optGetStrNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetOptHelpNr_t(IntPtr popt,int ANr,StringBuilder AName,ref int AHc,ref int AGroup);
    private static optGetOptHelpNr_t dll_optGetOptHelpNr;
    private static int d_optGetOptHelpNr(IntPtr popt,int ANr,StringBuilder AName,ref int AHc,ref int AGroup)
    { optErrorHandling("optGetOptHelpNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetEnumHelp_t(IntPtr popt,int ANr,int AOrd,ref int AHc,StringBuilder AHelpStr);
    private static optGetEnumHelp_t dll_optGetEnumHelp;
    private static int d_optGetEnumHelp(IntPtr popt,int ANr,int AOrd,ref int AHc,StringBuilder AHelpStr)
    { optErrorHandling("optGetEnumHelp could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetEnumStrNr_t(IntPtr popt,int ANr,StringBuilder ASVal,ref int AOrd);
    private static optGetEnumStrNr_t dll_optGetEnumStrNr;
    private static int d_optGetEnumStrNr(IntPtr popt,int ANr,StringBuilder ASVal,ref int AOrd)
    { optErrorHandling("optGetEnumStrNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetEnumCount_t(IntPtr popt,int ANr,ref int ACount);
    private static optGetEnumCount_t dll_optGetEnumCount;
    private static int d_optGetEnumCount(IntPtr popt,int ANr,ref int ACount)
    { optErrorHandling("optGetEnumCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetEnumValue_t(IntPtr popt,int ANr,int AOrd,ref int AValInt,StringBuilder AValStr);
    private static optGetEnumValue_t dll_optGetEnumValue;
    private static int d_optGetEnumValue(IntPtr popt,int ANr,int AOrd,ref int AValInt,StringBuilder AValStr)
    { optErrorHandling("optGetEnumValue could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetStr2Nr_t(IntPtr popt,int ANr,StringBuilder ASVal);
    private static optGetStr2Nr_t dll_optGetStr2Nr;
    private static int d_optGetStr2Nr(IntPtr popt,int ANr,StringBuilder ASVal)
    { optErrorHandling("optGetStr2Nr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetStrNr_t(IntPtr popt,int ANr,string ASVal);
    private static optSetStrNr_t dll_optSetStrNr;
    private static int d_optSetStrNr(IntPtr popt,int ANr,string ASVal)
    { optErrorHandling("optSetStrNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetStr2Nr_t(IntPtr popt,int ANr,string ASVal);
    private static optSetStr2Nr_t dll_optSetStr2Nr;
    private static int d_optSetStr2Nr(IntPtr popt,int ANr,string ASVal)
    { optErrorHandling("optSetStr2Nr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetDblNr_t(IntPtr popt,int ANr,ref double ADVal);
    private static optGetDblNr_t dll_optGetDblNr;
    private static int d_optGetDblNr(IntPtr popt,int ANr,ref double ADVal)
    { optErrorHandling("optGetDblNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetDbl2Nr_t(IntPtr popt,int ANr,ref double ADVal);
    private static optGetDbl2Nr_t dll_optGetDbl2Nr;
    private static int d_optGetDbl2Nr(IntPtr popt,int ANr,ref double ADVal)
    { optErrorHandling("optGetDbl2Nr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetDblNr_t(IntPtr popt,int ANr,double ADVal);
    private static optSetDblNr_t dll_optSetDblNr;
    private static int d_optSetDblNr(IntPtr popt,int ANr,double ADVal)
    { optErrorHandling("optSetDblNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetDbl2Nr_t(IntPtr popt,int ANr,double ADVal);
    private static optSetDbl2Nr_t dll_optSetDbl2Nr;
    private static int d_optSetDbl2Nr(IntPtr popt,int ANr,double ADVal)
    { optErrorHandling("optSetDbl2Nr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetValStr_t(IntPtr popt,string AName,StringBuilder ASVal);
    private static optGetValStr_t dll_optGetValStr;
    private static int d_optGetValStr(IntPtr popt,string AName,StringBuilder ASVal)
    { optErrorHandling("optGetValStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetVal2Str_t(IntPtr popt,string AName,StringBuilder ASVal);
    private static optGetVal2Str_t dll_optGetVal2Str;
    private static int d_optGetVal2Str(IntPtr popt,string AName,StringBuilder ASVal)
    { optErrorHandling("optGetVal2Str could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetNameNr_t(IntPtr popt,int ANr,StringBuilder ASName);
    private static optGetNameNr_t dll_optGetNameNr;
    private static int d_optGetNameNr(IntPtr popt,int ANr,StringBuilder ASName)
    { optErrorHandling("optGetNameNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetDefinedNr_t(IntPtr popt,int ANr,ref int AIVal);
    private static optGetDefinedNr_t dll_optGetDefinedNr;
    private static int d_optGetDefinedNr(IntPtr popt,int ANr,ref int AIVal)
    { optErrorHandling("optGetDefinedNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetHelpNr_t(IntPtr popt,int ANr,StringBuilder ASOpt,StringBuilder ASHelp);
    private static optGetHelpNr_t dll_optGetHelpNr;
    private static int d_optGetHelpNr(IntPtr popt,int ANr,StringBuilder ASOpt,StringBuilder ASHelp)
    { optErrorHandling("optGetHelpNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetGroupNr_t(IntPtr popt,int ANr,StringBuilder AName,ref int AGroup,ref int AHc,StringBuilder AHelp);
    private static optGetGroupNr_t dll_optGetGroupNr;
    private static int d_optGetGroupNr(IntPtr popt,int ANr,StringBuilder AName,ref int AGroup,ref int AHc,StringBuilder AHelp)
    { optErrorHandling("optGetGroupNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetGroupGrpNr_t(IntPtr popt,int AGroup);
    private static optGetGroupGrpNr_t dll_optGetGroupGrpNr;
    private static int d_optGetGroupGrpNr(IntPtr popt,int AGroup)
    { optErrorHandling("optGetGroupGrpNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetOptGroupNr_t(IntPtr popt,int ANr);
    private static optGetOptGroupNr_t dll_optGetOptGroupNr;
    private static int d_optGetOptGroupNr(IntPtr popt,int ANr)
    { optErrorHandling("optGetOptGroupNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetDotOptNr_t(IntPtr popt,int ANr,StringBuilder VEName,ref int AObjNr,ref int ADim,ref double AValue);
    private static optGetDotOptNr_t dll_optGetDotOptNr;
    private static int d_optGetDotOptNr(IntPtr popt,int ANr,StringBuilder VEName,ref int AObjNr,ref int ADim,ref double AValue)
    { optErrorHandling("optGetDotOptNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetDotOptUel_t(IntPtr popt,int ANr,int ADim,StringBuilder AUEL);
    private static optGetDotOptUel_t dll_optGetDotOptUel;
    private static int d_optGetDotOptUel(IntPtr popt,int ANr,int ADim,StringBuilder AUEL)
    { optErrorHandling("optGetDotOptUel could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetVarEquMapNr_t(IntPtr popt,int maptype,int ANr,StringBuilder EquName,StringBuilder VarName,ref int EquDim,ref int VarDim,ref int AValue);
    private static optGetVarEquMapNr_t dll_optGetVarEquMapNr;
    private static int d_optGetVarEquMapNr(IntPtr popt,int maptype,int ANr,StringBuilder EquName,StringBuilder VarName,ref int EquDim,ref int VarDim,ref int AValue)
    { optErrorHandling("optGetVarEquMapNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetEquVarEquMapNr_t(IntPtr popt,int maptype,int ANr,int ADim,StringBuilder AIndex);
    private static optGetEquVarEquMapNr_t dll_optGetEquVarEquMapNr;
    private static int d_optGetEquVarEquMapNr(IntPtr popt,int maptype,int ANr,int ADim,StringBuilder AIndex)
    { optErrorHandling("optGetEquVarEquMapNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetVarVarEquMapNr_t(IntPtr popt,int maptype,int ANr,int ADim,StringBuilder AIndex);
    private static optGetVarVarEquMapNr_t dll_optGetVarVarEquMapNr;
    private static int d_optGetVarVarEquMapNr(IntPtr popt,int maptype,int ANr,int ADim,StringBuilder AIndex)
    { optErrorHandling("optGetVarVarEquMapNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optVarEquMapCount_t(IntPtr popt,int maptype,ref int ANrErrors);
    private static optVarEquMapCount_t dll_optVarEquMapCount;
    private static int d_optVarEquMapCount(IntPtr popt,int maptype,ref int ANrErrors)
    { optErrorHandling("optVarEquMapCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetIndicatorNr_t(IntPtr popt,int ANr,StringBuilder EquName,StringBuilder VarName,ref int EquDim,ref int VarDim,ref int AValue);
    private static optGetIndicatorNr_t dll_optGetIndicatorNr;
    private static int d_optGetIndicatorNr(IntPtr popt,int ANr,StringBuilder EquName,StringBuilder VarName,ref int EquDim,ref int VarDim,ref int AValue)
    { optErrorHandling("optGetIndicatorNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetEquIndicatorNr_t(IntPtr popt,int ANr,int ADim,StringBuilder AIndex);
    private static optGetEquIndicatorNr_t dll_optGetEquIndicatorNr;
    private static int d_optGetEquIndicatorNr(IntPtr popt,int ANr,int ADim,StringBuilder AIndex)
    { optErrorHandling("optGetEquIndicatorNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetVarIndicatorNr_t(IntPtr popt,int ANr,int ADim,StringBuilder AIndex);
    private static optGetVarIndicatorNr_t dll_optGetVarIndicatorNr;
    private static int d_optGetVarIndicatorNr(IntPtr popt,int ANr,int ADim,StringBuilder AIndex)
    { optErrorHandling("optGetVarIndicatorNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optIndicatorCount_t(IntPtr popt,ref int ANrErrors);
    private static optIndicatorCount_t dll_optIndicatorCount;
    private static int d_optIndicatorCount(IntPtr popt,ref int ANrErrors)
    { optErrorHandling("optIndicatorCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optDotOptCount_t(IntPtr popt,ref int ANrErrors);
    private static optDotOptCount_t dll_optDotOptCount;
    private static int d_optDotOptCount(IntPtr popt,ref int ANrErrors)
    { optErrorHandling("optDotOptCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetRefNr_t(IntPtr popt,int ANr,int ARefNr);
    private static optSetRefNr_t dll_optSetRefNr;
    private static int d_optSetRefNr(IntPtr popt,int ANr,int ARefNr)
    { optErrorHandling("optSetRefNr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optSetRefNrStr_t(IntPtr popt,string AOpt,int ARefNr);
    private static optSetRefNrStr_t dll_optSetRefNrStr;
    private static int d_optSetRefNrStr(IntPtr popt,string AOpt,int ARefNr)
    { optErrorHandling("optSetRefNrStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetConstName_t(IntPtr popt,int cgroup,int cindex,StringBuilder cname);
    private static optGetConstName_t dll_optGetConstName;
    private static int d_optGetConstName(IntPtr popt,int cgroup,int cindex,StringBuilder cname)
    { optErrorHandling("optGetConstName could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetTypeName_t(IntPtr popt,int TNr,StringBuilder sTName);
    private static optGetTypeName_t dll_optGetTypeName;
    private static int d_optGetTypeName(IntPtr popt,int TNr,StringBuilder sTName)
    { optErrorHandling("optGetTypeName could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optLookUp_t(IntPtr popt,string AOpt);
    private static optLookUp_t dll_optLookUp;
    private static int d_optLookUp(IntPtr popt,string AOpt)
    { optErrorHandling("optLookUp could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optReadFromPChar_t(IntPtr popt,byte[] p);
    private static optReadFromPChar_t dll_optReadFromPChar;
    private static void d_optReadFromPChar(IntPtr popt,byte[] p)
    { optErrorHandling("optReadFromPChar could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetNameOpt_t(IntPtr popt,string ASVal,StringBuilder solver,ref int opt);
    private static optGetNameOpt_t dll_optGetNameOpt;
    private static int d_optGetNameOpt(IntPtr popt,string ASVal,StringBuilder solver,ref int opt)
    { optErrorHandling("optGetNameOpt could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetDefinedStr_t(IntPtr popt,string AName);
    private static optGetDefinedStr_t dll_optGetDefinedStr;
    private static int d_optGetDefinedStr(IntPtr popt,string AName)
    { optErrorHandling("optGetDefinedStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGetIntStr_t(IntPtr popt,string AName);
    private static optGetIntStr_t dll_optGetIntStr;
    private static int d_optGetIntStr(IntPtr popt,string AName)
    { optErrorHandling("optGetIntStr could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate double optGetDblStr_t(IntPtr popt,string AName);
    private static optGetDblStr_t dll_optGetDblStr;
    private static double d_optGetDblStr(IntPtr popt,string AName)
    { optErrorHandling("optGetDblStr could not be loaded"); return 0.0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optGetStrStr_t(IntPtr popt,string AName,StringBuilder sst_result);
    private static optGetStrStr_t dll_optGetStrStr;
    private static void d_optGetStrStr(IntPtr popt,string AName,StringBuilder sst_result)
    { optErrorHandling("optGetStrStr could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optSetIntStr_t(IntPtr popt,string AName,int AIVal);
    private static optSetIntStr_t dll_optSetIntStr;
    private static void d_optSetIntStr(IntPtr popt,string AName,int AIVal)
    { optErrorHandling("optSetIntStr could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optSetDblStr_t(IntPtr popt,string AName,double ADVal);
    private static optSetDblStr_t dll_optSetDblStr;
    private static void d_optSetDblStr(IntPtr popt,string AName,double ADVal)
    { optErrorHandling("optSetDblStr could not be loaded"); }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optSetStrStr_t(IntPtr popt,string AName,string ASVal);
    private static optSetStrStr_t dll_optSetStrStr;
    private static void d_optSetStrStr(IntPtr popt,string AName,string ASVal)
    { optErrorHandling("optSetStrStr could not be loaded"); }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optCount_t(IntPtr popt);
    private static optCount_t dll_optCount;
    private static int d_optCount(IntPtr popt)
    { optErrorHandling("optCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optMessageCount_t(IntPtr popt);
    private static optMessageCount_t dll_optMessageCount;
    private static int d_optMessageCount(IntPtr popt)
    { optErrorHandling("optMessageCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optGroupCount_t(IntPtr popt);
    private static optGroupCount_t dll_optGroupCount;
    private static int d_optGroupCount(IntPtr popt)
    { optErrorHandling("optGroupCount could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int optRecentEnabled_t(IntPtr popt);
    private static optRecentEnabled_t dll_optRecentEnabled;
    private static int d_optRecentEnabled(IntPtr popt)
    { optErrorHandling("optRecentEnabled could not be loaded"); return 0; }
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void optRecentEnabledSet_t(IntPtr popt,int x);
    private static optRecentEnabledSet_t dll_optRecentEnabledSet;
    private static void d_optRecentEnabledSet(IntPtr popt,int x)
    { optErrorHandling("optRecentEnabledSet could not be loaded"); }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void xcreate_t(ref IntPtr popt);
    private static xcreate_t xcreate;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void xfree_t(ref IntPtr popt);
    private static xfree_t xfree;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int xapiversion_t(int api, StringBuilder msg, ref int cl);
    private static xapiversion_t dll_xapiversion;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int xcheck_t(string ep, int nargs, int[] s, StringBuilder msg);
    private static xcheck_t dll_xcheck;

    public delegate bool optErrorCallback_t(int ErrCount, string Msg);

    static bool isLoaded = false;
    static IntPtr h;
    static bool ScreenIndicator = true;
    static bool ExceptionIndicator = false;
    static bool ExitIndicator = true;
    static optErrorCallback_t ErrorCallBack = null;
    static int APIErrorCount = 0;

    private bool XLibraryLoad (string dllName, ref string errBuf)
    {
        string symName;
        int cl = 0;
        IntPtr pAddressOfFunctionToCall;

        if (isLoaded)
            return true;
        h = LoadLibrary(@dllName);;
        if (IntPtr.Zero == h) {
            errBuf = "Could not load shared library " + dllName;
            return false;
        }

        pAddressOfFunctionToCall = GetProcAddress(h, "xcreate");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            xcreate = (xcreate_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xcreate_t));
        else {
           symName = "xcreate"; goto symMissing;
        }
        pAddressOfFunctionToCall = GetProcAddress(h, "xfree");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            xfree = (xfree_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xfree_t));
        else {
           symName = "xfree"; goto symMissing;
        }

        pAddressOfFunctionToCall = GetProcAddress(h, "cxcheck");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            dll_xcheck = (xcheck_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xcheck_t));
        else {
           symName = "cxcheck"; goto symMissing;
        }
        pAddressOfFunctionToCall = GetProcAddress(h, "cxapiversion");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            dll_xapiversion = (xapiversion_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(xapiversion_t));
        else {
           symName = "cxapiversion"; goto symMissing;
        }

        if (xapiversion(2,ref errBuf, ref cl) == 0)
            return false;

        pAddressOfFunctionToCall = GetProcAddress(h, "coptSetLoadPath");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            dll_optSetLoadPath = (optSetLoadPath_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetLoadPath_t));
        pAddressOfFunctionToCall = GetProcAddress(h, "coptGetLoadPath");
        if(pAddressOfFunctionToCall != IntPtr.Zero)
            dll_optGetLoadPath = (optGetLoadPath_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetLoadPath_t));
        {int[] s={3,11};
        if (xcheck("optReadDefinition",1,s,ref errBuf) == 0)
            dll_optReadDefinition = d_optReadDefinition;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptreaddefinition");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optReadDefinition = (optReadDefinition_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optReadDefinition_t));
            else {
                symName = "coptReadDefinition"; goto symMissing;
            }}}
        {int[] s={3,11};
        if (xcheck("optReadParameterFile",1,s,ref errBuf) == 0)
            dll_optReadParameterFile = d_optReadParameterFile;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptreadparameterfile");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optReadParameterFile = (optReadParameterFile_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optReadParameterFile_t));
            else {
                symName = "coptReadParameterFile"; goto symMissing;
            }}}
        {int[] s={0,11};
        if (xcheck("optReadFromStr",1,s,ref errBuf) == 0)
            dll_optReadFromStr = d_optReadFromStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptreadfromstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optReadFromStr = (optReadFromStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optReadFromStr_t));
            else {
                symName = "coptReadFromStr"; goto symMissing;
            }}}
        {int[] s={3,11};
        if (xcheck("optWriteParameterFile",1,s,ref errBuf) == 0)
            dll_optWriteParameterFile = d_optWriteParameterFile;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptwriteparameterfile");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optWriteParameterFile = (optWriteParameterFile_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optWriteParameterFile_t));
            else {
                symName = "coptWriteParameterFile"; goto symMissing;
            }}}
        {int[] s={0};
        if (xcheck("optClearMessages",0,s,ref errBuf) == 0)
            dll_optClearMessages = d_optClearMessages;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optclearmessages");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optClearMessages = (optClearMessages_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optClearMessages_t));
            else {
                symName = "optClearMessages"; goto symMissing;
            }}}
        {int[] s={0,11};
        if (xcheck("optAddMessage",1,s,ref errBuf) == 0)
            dll_optAddMessage = d_optAddMessage;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptaddmessage");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optAddMessage = (optAddMessage_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optAddMessage_t));
            else {
                symName = "coptAddMessage"; goto symMissing;
            }}}
        {int[] s={0,3,12,4};
        if (xcheck("optGetMessage",3,s,ref errBuf) == 0)
            dll_optGetMessage = d_optGetMessage;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetmessage");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetMessage = (optGetMessage_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetMessage_t));
            else {
                symName = "coptGetMessage"; goto symMissing;
            }}}
        {int[] s={0};
        if (xcheck("optResetAll",0,s,ref errBuf) == 0)
            dll_optResetAll = d_optResetAll;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optresetall");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optResetAll = (optResetAll_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optResetAll_t));
            else {
                symName = "optResetAll"; goto symMissing;
            }}}
        {int[] s={0};
        if (xcheck("optResetAllRecent",0,s,ref errBuf) == 0)
            dll_optResetAllRecent = d_optResetAllRecent;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optresetallrecent");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optResetAllRecent = (optResetAllRecent_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optResetAllRecent_t));
            else {
                symName = "optResetAllRecent"; goto symMissing;
            }}}
        {int[] s={0};
        if (xcheck("optResetRecentChanges",0,s,ref errBuf) == 0)
            dll_optResetRecentChanges = d_optResetRecentChanges;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optresetrecentchanges");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optResetRecentChanges = (optResetRecentChanges_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optResetRecentChanges_t));
            else {
                symName = "optResetRecentChanges"; goto symMissing;
            }}}
        {int[] s={0,11};
        if (xcheck("optShowHelp",1,s,ref errBuf) == 0)
            dll_optShowHelp = d_optShowHelp;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptshowhelp");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optShowHelp = (optShowHelp_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optShowHelp_t));
            else {
                symName = "coptShowHelp"; goto symMissing;
            }}}
        {int[] s={3,3};
        if (xcheck("optResetNr",1,s,ref errBuf) == 0)
            dll_optResetNr = d_optResetNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optresetnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optResetNr = (optResetNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optResetNr_t));
            else {
                symName = "optResetNr"; goto symMissing;
            }}}
        {int[] s={3,11,4,4};
        if (xcheck("optFindStr",3,s,ref errBuf) == 0)
            dll_optFindStr = d_optFindStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptfindstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optFindStr = (optFindStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optFindStr_t));
            else {
                symName = "coptFindStr"; goto symMissing;
            }}}
        {int[] s={3,3,4,4,4,4,4,4};
        if (xcheck("optGetInfoNr",7,s,ref errBuf) == 0)
            dll_optGetInfoNr = d_optGetInfoNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetinfonr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetInfoNr = (optGetInfoNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetInfoNr_t));
            else {
                symName = "optGetInfoNr"; goto symMissing;
            }}}
        {int[] s={3,3,12,4,14,12};
        if (xcheck("optGetValuesNr",5,s,ref errBuf) == 0)
            dll_optGetValuesNr = d_optGetValuesNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetvaluesnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetValuesNr = (optGetValuesNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetValuesNr_t));
            else {
                symName = "coptGetValuesNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,13,11};
        if (xcheck("optSetValuesNr",4,s,ref errBuf) == 0)
            dll_optSetValuesNr = d_optSetValuesNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetvaluesnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetValuesNr = (optSetValuesNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetValuesNr_t));
            else {
                symName = "coptSetValuesNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,13,11};
        if (xcheck("optSetValues2Nr",4,s,ref errBuf) == 0)
            dll_optSetValues2Nr = d_optSetValues2Nr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetvalues2nr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetValues2Nr = (optSetValues2Nr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetValues2Nr_t));
            else {
                symName = "coptSetValues2Nr"; goto symMissing;
            }}}
        {int[] s={0,12};
        if (xcheck("optVersion",1,s,ref errBuf) == 0)
            dll_optVersion = d_optVersion;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptversion");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optVersion = (optVersion_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optVersion_t));
            else {
                symName = "coptVersion"; goto symMissing;
            }}}
        {int[] s={0,12};
        if (xcheck("optDefinitionFile",1,s,ref errBuf) == 0)
            dll_optDefinitionFile = d_optDefinitionFile;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptdefinitionfile");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optDefinitionFile = (optDefinitionFile_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optDefinitionFile_t));
            else {
                symName = "coptDefinitionFile"; goto symMissing;
            }}}
        {int[] s={3,3,12,12};
        if (xcheck("optGetFromAnyStrList",3,s,ref errBuf) == 0)
            dll_optGetFromAnyStrList = d_optGetFromAnyStrList;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetfromanystrlist");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetFromAnyStrList = (optGetFromAnyStrList_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetFromAnyStrList_t));
            else {
                symName = "coptGetFromAnyStrList"; goto symMissing;
            }}}
        {int[] s={3,11,12};
        if (xcheck("optGetFromListStr",2,s,ref errBuf) == 0)
            dll_optGetFromListStr = d_optGetFromListStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetfromliststr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetFromListStr = (optGetFromListStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetFromListStr_t));
            else {
                symName = "coptGetFromListStr"; goto symMissing;
            }}}
        {int[] s={3,11};
        if (xcheck("optListCountStr",1,s,ref errBuf) == 0)
            dll_optListCountStr = d_optListCountStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptlistcountstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optListCountStr = (optListCountStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optListCountStr_t));
            else {
                symName = "coptListCountStr"; goto symMissing;
            }}}
        {int[] s={3,11,3,12};
        if (xcheck("optReadFromListStr",3,s,ref errBuf) == 0)
            dll_optReadFromListStr = d_optReadFromListStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptreadfromliststr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optReadFromListStr = (optReadFromListStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optReadFromListStr_t));
            else {
                symName = "coptReadFromListStr"; goto symMissing;
            }}}
        {int[] s={3};
        if (xcheck("optSynonymCount",0,s,ref errBuf) == 0)
            dll_optSynonymCount = d_optSynonymCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optsynonymcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSynonymCount = (optSynonymCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSynonymCount_t));
            else {
                symName = "optSynonymCount"; goto symMissing;
            }}}
        {int[] s={3,3,12,12};
        if (xcheck("optGetSynonym",3,s,ref errBuf) == 0)
            dll_optGetSynonym = d_optGetSynonym;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetsynonym");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetSynonym = (optGetSynonym_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetSynonym_t));
            else {
                symName = "coptGetSynonym"; goto symMissing;
            }}}
        {int[] s={0,3};
        if (xcheck("optEchoSet",1,s,ref errBuf) == 0)
            dll_optEchoSet = d_optEchoSet;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optechoset");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optEchoSet = (optEchoSet_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optEchoSet_t));
            else {
                symName = "optEchoSet"; goto symMissing;
            }}}
        {int[] s={3,3};
        if (xcheck("optEOLOnlySet",1,s,ref errBuf) == 0)
            dll_optEOLOnlySet = d_optEOLOnlySet;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "opteolonlyset");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optEOLOnlySet = (optEOLOnlySet_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optEOLOnlySet_t));
            else {
                symName = "optEOLOnlySet"; goto symMissing;
            }}}
        {int[] s={0,3};
        if (xcheck("optNoBoundsSet",1,s,ref errBuf) == 0)
            dll_optNoBoundsSet = d_optNoBoundsSet;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optnoboundsset");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optNoBoundsSet = (optNoBoundsSet_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optNoBoundsSet_t));
            else {
                symName = "optNoBoundsSet"; goto symMissing;
            }}}
        {int[] s={0,4,4};
        if (xcheck("optErrorCount",2,s,ref errBuf) == 0)
            dll_optErrorCount = d_optErrorCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "opterrorcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optErrorCount = (optErrorCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optErrorCount_t));
            else {
                symName = "optErrorCount"; goto symMissing;
            }}}
        {int[] s={3,3,4,4,4};
        if (xcheck("optGetBoundsInt",4,s,ref errBuf) == 0)
            dll_optGetBoundsInt = d_optGetBoundsInt;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetboundsint");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetBoundsInt = (optGetBoundsInt_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetBoundsInt_t));
            else {
                symName = "optGetBoundsInt"; goto symMissing;
            }}}
        {int[] s={3,3,14,14,14};
        if (xcheck("optGetBoundsDbl",4,s,ref errBuf) == 0)
            dll_optGetBoundsDbl = d_optGetBoundsDbl;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetboundsdbl");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetBoundsDbl = (optGetBoundsDbl_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetBoundsDbl_t));
            else {
                symName = "optGetBoundsDbl"; goto symMissing;
            }}}
        {int[] s={3,3,12};
        if (xcheck("optGetDefaultStr",2,s,ref errBuf) == 0)
            dll_optGetDefaultStr = d_optGetDefaultStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetdefaultstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDefaultStr = (optGetDefaultStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDefaultStr_t));
            else {
                symName = "coptGetDefaultStr"; goto symMissing;
            }}}
        {int[] s={3,3,4};
        if (xcheck("optGetIntNr",2,s,ref errBuf) == 0)
            dll_optGetIntNr = d_optGetIntNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetintnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetIntNr = (optGetIntNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetIntNr_t));
            else {
                symName = "optGetIntNr"; goto symMissing;
            }}}
        {int[] s={3,3,4};
        if (xcheck("optGetInt2Nr",2,s,ref errBuf) == 0)
            dll_optGetInt2Nr = d_optGetInt2Nr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetint2nr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetInt2Nr = (optGetInt2Nr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetInt2Nr_t));
            else {
                symName = "optGetInt2Nr"; goto symMissing;
            }}}
        {int[] s={3,3,3};
        if (xcheck("optSetIntNr",2,s,ref errBuf) == 0)
            dll_optSetIntNr = d_optSetIntNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optsetintnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetIntNr = (optSetIntNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetIntNr_t));
            else {
                symName = "optSetIntNr"; goto symMissing;
            }}}
        {int[] s={3,3,3};
        if (xcheck("optSetInt2Nr",2,s,ref errBuf) == 0)
            dll_optSetInt2Nr = d_optSetInt2Nr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optsetint2nr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetInt2Nr = (optSetInt2Nr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetInt2Nr_t));
            else {
                symName = "optSetInt2Nr"; goto symMissing;
            }}}
        {int[] s={3,3,12};
        if (xcheck("optGetStrNr",2,s,ref errBuf) == 0)
            dll_optGetStrNr = d_optGetStrNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetstrnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetStrNr = (optGetStrNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetStrNr_t));
            else {
                symName = "coptGetStrNr"; goto symMissing;
            }}}
        {int[] s={3,3,12,4,4};
        if (xcheck("optGetOptHelpNr",4,s,ref errBuf) == 0)
            dll_optGetOptHelpNr = d_optGetOptHelpNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetopthelpnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetOptHelpNr = (optGetOptHelpNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetOptHelpNr_t));
            else {
                symName = "coptGetOptHelpNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,4,12};
        if (xcheck("optGetEnumHelp",4,s,ref errBuf) == 0)
            dll_optGetEnumHelp = d_optGetEnumHelp;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetenumhelp");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetEnumHelp = (optGetEnumHelp_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetEnumHelp_t));
            else {
                symName = "coptGetEnumHelp"; goto symMissing;
            }}}
        {int[] s={3,3,12,4};
        if (xcheck("optGetEnumStrNr",3,s,ref errBuf) == 0)
            dll_optGetEnumStrNr = d_optGetEnumStrNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetenumstrnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetEnumStrNr = (optGetEnumStrNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetEnumStrNr_t));
            else {
                symName = "coptGetEnumStrNr"; goto symMissing;
            }}}
        {int[] s={3,3,4};
        if (xcheck("optGetEnumCount",2,s,ref errBuf) == 0)
            dll_optGetEnumCount = d_optGetEnumCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetenumcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetEnumCount = (optGetEnumCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetEnumCount_t));
            else {
                symName = "optGetEnumCount"; goto symMissing;
            }}}
        {int[] s={3,3,3,4,12};
        if (xcheck("optGetEnumValue",4,s,ref errBuf) == 0)
            dll_optGetEnumValue = d_optGetEnumValue;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetenumvalue");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetEnumValue = (optGetEnumValue_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetEnumValue_t));
            else {
                symName = "coptGetEnumValue"; goto symMissing;
            }}}
        {int[] s={3,3,12};
        if (xcheck("optGetStr2Nr",2,s,ref errBuf) == 0)
            dll_optGetStr2Nr = d_optGetStr2Nr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetstr2nr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetStr2Nr = (optGetStr2Nr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetStr2Nr_t));
            else {
                symName = "coptGetStr2Nr"; goto symMissing;
            }}}
        {int[] s={3,3,11};
        if (xcheck("optSetStrNr",2,s,ref errBuf) == 0)
            dll_optSetStrNr = d_optSetStrNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetstrnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetStrNr = (optSetStrNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetStrNr_t));
            else {
                symName = "coptSetStrNr"; goto symMissing;
            }}}
        {int[] s={3,3,11};
        if (xcheck("optSetStr2Nr",2,s,ref errBuf) == 0)
            dll_optSetStr2Nr = d_optSetStr2Nr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetstr2nr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetStr2Nr = (optSetStr2Nr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetStr2Nr_t));
            else {
                symName = "coptSetStr2Nr"; goto symMissing;
            }}}
        {int[] s={3,3,14};
        if (xcheck("optGetDblNr",2,s,ref errBuf) == 0)
            dll_optGetDblNr = d_optGetDblNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetdblnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDblNr = (optGetDblNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDblNr_t));
            else {
                symName = "optGetDblNr"; goto symMissing;
            }}}
        {int[] s={3,3,14};
        if (xcheck("optGetDbl2Nr",2,s,ref errBuf) == 0)
            dll_optGetDbl2Nr = d_optGetDbl2Nr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetdbl2nr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDbl2Nr = (optGetDbl2Nr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDbl2Nr_t));
            else {
                symName = "optGetDbl2Nr"; goto symMissing;
            }}}
        {int[] s={3,3,13};
        if (xcheck("optSetDblNr",2,s,ref errBuf) == 0)
            dll_optSetDblNr = d_optSetDblNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optsetdblnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetDblNr = (optSetDblNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetDblNr_t));
            else {
                symName = "optSetDblNr"; goto symMissing;
            }}}
        {int[] s={3,3,13};
        if (xcheck("optSetDbl2Nr",2,s,ref errBuf) == 0)
            dll_optSetDbl2Nr = d_optSetDbl2Nr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optsetdbl2nr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetDbl2Nr = (optSetDbl2Nr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetDbl2Nr_t));
            else {
                symName = "optSetDbl2Nr"; goto symMissing;
            }}}
        {int[] s={3,11,12};
        if (xcheck("optGetValStr",2,s,ref errBuf) == 0)
            dll_optGetValStr = d_optGetValStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetvalstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetValStr = (optGetValStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetValStr_t));
            else {
                symName = "coptGetValStr"; goto symMissing;
            }}}
        {int[] s={3,11,12};
        if (xcheck("optGetVal2Str",2,s,ref errBuf) == 0)
            dll_optGetVal2Str = d_optGetVal2Str;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetval2str");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetVal2Str = (optGetVal2Str_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetVal2Str_t));
            else {
                symName = "coptGetVal2Str"; goto symMissing;
            }}}
        {int[] s={3,3,12};
        if (xcheck("optGetNameNr",2,s,ref errBuf) == 0)
            dll_optGetNameNr = d_optGetNameNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetnamenr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetNameNr = (optGetNameNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetNameNr_t));
            else {
                symName = "coptGetNameNr"; goto symMissing;
            }}}
        {int[] s={3,3,4};
        if (xcheck("optGetDefinedNr",2,s,ref errBuf) == 0)
            dll_optGetDefinedNr = d_optGetDefinedNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetdefinednr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDefinedNr = (optGetDefinedNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDefinedNr_t));
            else {
                symName = "optGetDefinedNr"; goto symMissing;
            }}}
        {int[] s={3,3,12,12};
        if (xcheck("optGetHelpNr",3,s,ref errBuf) == 0)
            dll_optGetHelpNr = d_optGetHelpNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgethelpnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetHelpNr = (optGetHelpNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetHelpNr_t));
            else {
                symName = "coptGetHelpNr"; goto symMissing;
            }}}
        {int[] s={3,3,12,4,4,12};
        if (xcheck("optGetGroupNr",5,s,ref errBuf) == 0)
            dll_optGetGroupNr = d_optGetGroupNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetgroupnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetGroupNr = (optGetGroupNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetGroupNr_t));
            else {
                symName = "coptGetGroupNr"; goto symMissing;
            }}}
        {int[] s={3,3};
        if (xcheck("optGetGroupGrpNr",1,s,ref errBuf) == 0)
            dll_optGetGroupGrpNr = d_optGetGroupGrpNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetgroupgrpnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetGroupGrpNr = (optGetGroupGrpNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetGroupGrpNr_t));
            else {
                symName = "optGetGroupGrpNr"; goto symMissing;
            }}}
        {int[] s={3,3};
        if (xcheck("optGetOptGroupNr",1,s,ref errBuf) == 0)
            dll_optGetOptGroupNr = d_optGetOptGroupNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgetoptgroupnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetOptGroupNr = (optGetOptGroupNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetOptGroupNr_t));
            else {
                symName = "optGetOptGroupNr"; goto symMissing;
            }}}
        {int[] s={3,3,12,4,4,14};
        if (xcheck("optGetDotOptNr",5,s,ref errBuf) == 0)
            dll_optGetDotOptNr = d_optGetDotOptNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetdotoptnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDotOptNr = (optGetDotOptNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDotOptNr_t));
            else {
                symName = "coptGetDotOptNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,12};
        if (xcheck("optGetDotOptUel",3,s,ref errBuf) == 0)
            dll_optGetDotOptUel = d_optGetDotOptUel;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetdotoptuel");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDotOptUel = (optGetDotOptUel_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDotOptUel_t));
            else {
                symName = "coptGetDotOptUel"; goto symMissing;
            }}}
        {int[] s={3,3,3,12,12,4,4,4};
        if (xcheck("optGetVarEquMapNr",7,s,ref errBuf) == 0)
            dll_optGetVarEquMapNr = d_optGetVarEquMapNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetvarequmapnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetVarEquMapNr = (optGetVarEquMapNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetVarEquMapNr_t));
            else {
                symName = "coptGetVarEquMapNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,3,12};
        if (xcheck("optGetEquVarEquMapNr",4,s,ref errBuf) == 0)
            dll_optGetEquVarEquMapNr = d_optGetEquVarEquMapNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetequvarequmapnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetEquVarEquMapNr = (optGetEquVarEquMapNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetEquVarEquMapNr_t));
            else {
                symName = "coptGetEquVarEquMapNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,3,12};
        if (xcheck("optGetVarVarEquMapNr",4,s,ref errBuf) == 0)
            dll_optGetVarVarEquMapNr = d_optGetVarVarEquMapNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetvarvarequmapnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetVarVarEquMapNr = (optGetVarVarEquMapNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetVarVarEquMapNr_t));
            else {
                symName = "coptGetVarVarEquMapNr"; goto symMissing;
            }}}
        {int[] s={3,3,4};
        if (xcheck("optVarEquMapCount",2,s,ref errBuf) == 0)
            dll_optVarEquMapCount = d_optVarEquMapCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optvarequmapcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optVarEquMapCount = (optVarEquMapCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optVarEquMapCount_t));
            else {
                symName = "optVarEquMapCount"; goto symMissing;
            }}}
        {int[] s={3,3,12,12,4,4,4};
        if (xcheck("optGetIndicatorNr",6,s,ref errBuf) == 0)
            dll_optGetIndicatorNr = d_optGetIndicatorNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetindicatornr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetIndicatorNr = (optGetIndicatorNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetIndicatorNr_t));
            else {
                symName = "coptGetIndicatorNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,12};
        if (xcheck("optGetEquIndicatorNr",3,s,ref errBuf) == 0)
            dll_optGetEquIndicatorNr = d_optGetEquIndicatorNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetequindicatornr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetEquIndicatorNr = (optGetEquIndicatorNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetEquIndicatorNr_t));
            else {
                symName = "coptGetEquIndicatorNr"; goto symMissing;
            }}}
        {int[] s={3,3,3,12};
        if (xcheck("optGetVarIndicatorNr",3,s,ref errBuf) == 0)
            dll_optGetVarIndicatorNr = d_optGetVarIndicatorNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetvarindicatornr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetVarIndicatorNr = (optGetVarIndicatorNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetVarIndicatorNr_t));
            else {
                symName = "coptGetVarIndicatorNr"; goto symMissing;
            }}}
        {int[] s={3,4};
        if (xcheck("optIndicatorCount",1,s,ref errBuf) == 0)
            dll_optIndicatorCount = d_optIndicatorCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optindicatorcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optIndicatorCount = (optIndicatorCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optIndicatorCount_t));
            else {
                symName = "optIndicatorCount"; goto symMissing;
            }}}
        {int[] s={3,4};
        if (xcheck("optDotOptCount",1,s,ref errBuf) == 0)
            dll_optDotOptCount = d_optDotOptCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optdotoptcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optDotOptCount = (optDotOptCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optDotOptCount_t));
            else {
                symName = "optDotOptCount"; goto symMissing;
            }}}
        {int[] s={3,3,3};
        if (xcheck("optSetRefNr",2,s,ref errBuf) == 0)
            dll_optSetRefNr = d_optSetRefNr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optsetrefnr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetRefNr = (optSetRefNr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetRefNr_t));
            else {
                symName = "optSetRefNr"; goto symMissing;
            }}}
        {int[] s={3,11,3};
        if (xcheck("optSetRefNrStr",2,s,ref errBuf) == 0)
            dll_optSetRefNrStr = d_optSetRefNrStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetrefnrstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetRefNrStr = (optSetRefNrStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetRefNrStr_t));
            else {
                symName = "coptSetRefNrStr"; goto symMissing;
            }}}
        {int[] s={3,3,3,12};
        if (xcheck("optGetConstName",3,s,ref errBuf) == 0)
            dll_optGetConstName = d_optGetConstName;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetconstname");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetConstName = (optGetConstName_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetConstName_t));
            else {
                symName = "coptGetConstName"; goto symMissing;
            }}}
        {int[] s={3,3,12};
        if (xcheck("optGetTypeName",2,s,ref errBuf) == 0)
            dll_optGetTypeName = d_optGetTypeName;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgettypename");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetTypeName = (optGetTypeName_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetTypeName_t));
            else {
                symName = "coptGetTypeName"; goto symMissing;
            }}}
        {int[] s={3,11};
        if (xcheck("optLookUp",1,s,ref errBuf) == 0)
            dll_optLookUp = d_optLookUp;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptlookup");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optLookUp = (optLookUp_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optLookUp_t));
            else {
                symName = "coptLookUp"; goto symMissing;
            }}}
        {int[] s={0,10};
        if (xcheck("optReadFromPChar",1,s,ref errBuf) == 0)
            dll_optReadFromPChar = d_optReadFromPChar;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optreadfrompchar");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optReadFromPChar = (optReadFromPChar_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optReadFromPChar_t));
            else {
                symName = "optReadFromPChar"; goto symMissing;
            }}}
        {int[] s={3,11,12,4};
        if (xcheck("optGetNameOpt",3,s,ref errBuf) == 0)
            dll_optGetNameOpt = d_optGetNameOpt;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetnameopt");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetNameOpt = (optGetNameOpt_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetNameOpt_t));
            else {
                symName = "coptGetNameOpt"; goto symMissing;
            }}}
        {int[] s={15,11};
        if (xcheck("optGetDefinedStr",1,s,ref errBuf) == 0)
            dll_optGetDefinedStr = d_optGetDefinedStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetdefinedstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDefinedStr = (optGetDefinedStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDefinedStr_t));
            else {
                symName = "coptGetDefinedStr"; goto symMissing;
            }}}
        {int[] s={3,11};
        if (xcheck("optGetIntStr",1,s,ref errBuf) == 0)
            dll_optGetIntStr = d_optGetIntStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetintstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetIntStr = (optGetIntStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetIntStr_t));
            else {
                symName = "coptGetIntStr"; goto symMissing;
            }}}
        {int[] s={13,11};
        if (xcheck("optGetDblStr",1,s,ref errBuf) == 0)
            dll_optGetDblStr = d_optGetDblStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetdblstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetDblStr = (optGetDblStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetDblStr_t));
            else {
                symName = "coptGetDblStr"; goto symMissing;
            }}}
        {int[] s={12,11};
        if (xcheck("optGetStrStr",1,s,ref errBuf) == 0)
            dll_optGetStrStr = d_optGetStrStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptgetstrstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGetStrStr = (optGetStrStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGetStrStr_t));
            else {
                symName = "coptGetStrStr"; goto symMissing;
            }}}
        {int[] s={0,11,3};
        if (xcheck("optSetIntStr",2,s,ref errBuf) == 0)
            dll_optSetIntStr = d_optSetIntStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetintstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetIntStr = (optSetIntStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetIntStr_t));
            else {
                symName = "coptSetIntStr"; goto symMissing;
            }}}
        {int[] s={0,11,13};
        if (xcheck("optSetDblStr",2,s,ref errBuf) == 0)
            dll_optSetDblStr = d_optSetDblStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetdblstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetDblStr = (optSetDblStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetDblStr_t));
            else {
                symName = "coptSetDblStr"; goto symMissing;
            }}}
        {int[] s={0,11,11};
        if (xcheck("optSetStrStr",2,s,ref errBuf) == 0)
            dll_optSetStrStr = d_optSetStrStr;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "coptsetstrstr");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optSetStrStr = (optSetStrStr_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optSetStrStr_t));
            else {
                symName = "coptSetStrStr"; goto symMissing;
            }}}
        {int[] s={3};
        if (xcheck("optCount",0,s,ref errBuf) == 0)
            dll_optCount = d_optCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optCount = (optCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optCount_t));
            else {
                symName = "optCount"; goto symMissing;
        }}}
        {int[] s={3};
        if (xcheck("optMessageCount",0,s,ref errBuf) == 0)
            dll_optMessageCount = d_optMessageCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optmessagecount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optMessageCount = (optMessageCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optMessageCount_t));
            else {
                symName = "optMessageCount"; goto symMissing;
        }}}
        {int[] s={3};
        if (xcheck("optGroupCount",0,s,ref errBuf) == 0)
            dll_optGroupCount = d_optGroupCount;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optgroupcount");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optGroupCount = (optGroupCount_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optGroupCount_t));
            else {
                symName = "optGroupCount"; goto symMissing;
        }}}
        {int[] s={3};
        if (xcheck("optRecentEnabled",0,s,ref errBuf) == 0)
            dll_optRecentEnabled = d_optRecentEnabled;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optrecentenabled");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optRecentEnabled = (optRecentEnabled_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optRecentEnabled_t));
            else {
                symName = "optRecentEnabled"; goto symMissing;
        }}}
        {int[] s={0,3};
        if (xcheck("optRecentEnabledSet",1,s,ref errBuf) == 0)
            dll_optRecentEnabledSet = d_optRecentEnabledSet;
        else {
            pAddressOfFunctionToCall = GetProcAddress(h, "optrecentenabledset");
            if(pAddressOfFunctionToCall != IntPtr.Zero)
                dll_optRecentEnabledSet = (optRecentEnabledSet_t)Marshal.GetDelegateForFunctionPointer(pAddressOfFunctionToCall, typeof(optRecentEnabledSet_t));
            else {
                symName = "optRecentEnabledSet"; goto symMissing;
        }}}

        return true;

        symMissing:
            errBuf = "Could not load symbol '" + symName + "'";
            return false;

    } /* XLibraryLoad */

    private bool libloader(string dllPath, string dllName, ref string msgBuf)
    {
        string dllNameBuf = string.Empty;
        int myrc = 0;
        string GMS_DLL_SUFFIX = string.Empty;

        msgBuf = string.Empty;
        if (! isLoaded) {
            if (string.Empty != dllPath) {
                dllNameBuf = dllPath;
                if ('\\' != dllNameBuf[dllNameBuf.Length-1]) dllNameBuf = dllNameBuf + "\\";
            }
            if (string.Empty != dllName)
                dllNameBuf = dllNameBuf + dllName;
            else {
                if (8 == IntPtr.Size)
                    GMS_DLL_SUFFIX = "64";
                dllNameBuf = dllNameBuf + "optdclib" + GMS_DLL_SUFFIX + ".dll";
            }
            isLoaded = XLibraryLoad (dllNameBuf, ref msgBuf);
            if (isLoaded) {
            if (null != dll_optSetLoadPath && string.Empty != dllPath) {
                 optSetLoadPath(dllPath);
            } else {                            /* no setLoadPath call found */
                 myrc |= 2;
            }
            } else                          /* library load failed */
                myrc |= 1;
        }
        return (myrc & 1) == 0;
    } /* libloader */

    public bool optGetReady (ref string msgBuf)
    {
        return libloader(string.Empty, string.Empty, ref msgBuf);
    }
    public bool optGetReadyD (string dirName, ref string msgBuf)
    {
        return libloader(dirName, string.Empty, ref msgBuf);
    }
    public bool optGetReadyL (string dirName, string libName, ref string msgBuf)
    {
        return libloader(dirName, libName, ref msgBuf);
    }

    public optcs(ref string msgBuf)
    {
        bool optIsReady;

        extHandle = false;
        _disposed = false;
        optIsReady = optGetReady (ref msgBuf);
        if (! optIsReady) return;
        xcreate(ref popt);
        if(popt != IntPtr.Zero)
        {
            msgBuf = String.Empty;
            return;
        }
        msgBuf = "Error while creating object";
    }
    public optcs(string dirName, ref string msgBuf)
    {
        bool optIsReady;

        extHandle = false;
        _disposed = false;
        optIsReady = optGetReadyD (dirName, ref msgBuf);
        if (! optIsReady) return;
        xcreate(ref popt);
        if(popt != IntPtr.Zero)
        {
            msgBuf = String.Empty;
            return;
        }
        msgBuf = "Error while creating object";
    }
    public optcs(string dirName, string libName, ref string msgBuf)
    {
        bool optIsReady;

        extHandle = false;
        _disposed = false;
        optIsReady = optGetReadyL (dirName, libName, ref msgBuf);
        if (! optIsReady) return;
        xcreate(ref popt);
        if(popt != IntPtr.Zero)
        {
            msgBuf = String.Empty;
            return;
        }
        msgBuf = "Error while creating object";
    }
    public optcs(IntPtr optHandle, ref string msgBuf)
    {
        bool optIsReady;

        if(optHandle == IntPtr.Zero)
        {
           msgBuf = "optHandle is empty";
           return;
        }
        extHandle = true;
        _disposed = false;
        optIsReady = optGetReady (ref msgBuf);
        if (! optIsReady) return;
        popt = optHandle;
    }
    public optcs(IntPtr optHandle, string dirName, ref string msgBuf)
    {
        bool optIsReady;

        if(optHandle == IntPtr.Zero)
        {
           msgBuf = "optHandle is empty";
           return;
        }
        extHandle = true;
        _disposed = false;
        optIsReady = optGetReadyD (dirName, ref msgBuf);
        if (! optIsReady) return;
        popt = optHandle;
    }

    ~optcs()
    {
        Dispose(true);
    }

    public void Dispose()
    {
        Dispose(true);

        // Use SupressFinalize in case a subclass
        // of this type implements a finalizer.
        GC.SuppressFinalize(this);
    }

    private void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                if (popt != IntPtr.Zero)
                    optFree();
            }
            // Indicate that the instance has been disposed.
            _disposed = true;
        }
        GC.KeepAlive(this);
    }

    public int optFree()
    {
        if (!extHandle &&  popt != IntPtr.Zero) xfree(ref popt);
        return 1;
    }

    public bool optLibraryUnload()
    {
        return FreeLibrary(h);
    }

    public IntPtr GetoptPtr()
    {
        return popt;
    }

    public bool optGetScreenIndicator()
    {
        return ScreenIndicator;
    }

    public void optSetScreenIndicator(bool scrind)
    {
        ScreenIndicator = scrind;
    }

    public bool optGetExceptionIndicator()
    {
         return ExceptionIndicator;
    }

    public void optSetExceptionIndicator(bool excind)
    {
        ExceptionIndicator = excind;
    }

    public bool optGetExitIndicator()
    {
        return ExitIndicator;
    }

    public void optSetExitIndicator(bool extind)
    {
        ExitIndicator = extind;
    }

    public optErrorCallback_t optGetErrorCallback()
    {
        return ErrorCallBack;
    }

    public void optSetErrorCallback(optErrorCallback_t func)
    {
        ErrorCallBack = func;
    }

    public int optGetAPIErrorCount()
    {
        return APIErrorCount;
    }

    public void optSetAPIErrorCount(int ecnt)
    {
        APIErrorCount = ecnt;
    }

    private static void optErrorHandling(string Msg)
    {
        APIErrorCount++;
        if (ScreenIndicator) Console.WriteLine(Msg);
        if (ErrorCallBack != null)
            if (ErrorCallBack(APIErrorCount, Msg)) Environment.Exit(123);
        if (ExceptionIndicator) throw new ArgumentNullException();
        if (ExitIndicator) Environment.Exit(123);
    }

    private void ConvertC2CS(byte[] b,ref string s)
    {
        int i;
        s = "";
        i = 0;
        while (b[i] != 0)
        {
            s = s + (char)(b[i]);
            i = i + 1;
        }
    }

    private void ConvertArrayC2CS(byte[,] b,ref string s,int k)
    {
        int i;
        s = "";
        i = 0;
        while (b[k, i] != 0)
        {
            s = s + (char)(b[k, i]);
            i = i + 1;
        }
    }

    private int xapiversion(int api, ref string msg, ref int cl)
    {
       int rc_xapiversion;
       StringBuilder cpy_msg = new StringBuilder(gamsglobals.str_len);
       rc_xapiversion = dll_xapiversion(api, cpy_msg, ref cl);
       msg = cpy_msg.ToString();
       return rc_xapiversion;
    }

    private int xcheck(string ep, int nargs, int[] s, ref string msg)
    {
       int rc_xcheck;
       StringBuilder cpy_msg = new StringBuilder(gamsglobals.str_len);
       rc_xcheck = dll_xcheck(ep, nargs, s, cpy_msg);
       msg = cpy_msg.ToString();
       return rc_xcheck;
    }

    public void optSetLoadPath(string s)
    {
       dll_optSetLoadPath(s);
    }

    public void optGetLoadPath(ref string s)
    {
       byte[] cpy_s = new byte[gamsglobals.str_len];
       dll_optGetLoadPath(ref cpy_s[0]);
       ConvertC2CS(cpy_s,ref s);
    }

    public int optReadDefinition(string fn)
    {
       return dll_optReadDefinition(popt,fn);
    }

    public int optReadParameterFile(string fn)
    {
       return dll_optReadParameterFile(popt,fn);
    }

    public void optReadFromStr(string s)
    {
       dll_optReadFromStr(popt,s);
    }

    public int optWriteParameterFile(string fn)
    {
       return dll_optWriteParameterFile(popt,fn);
    }

    public void optClearMessages()
    {
       dll_optClearMessages(popt);
    }

    public void optAddMessage(string info)
    {
       dll_optAddMessage(popt,info);
    }

    public void optGetMessage(int NrMsg,ref string info,ref int iType)
    {
       StringBuilder cpy_info = new StringBuilder(gamsglobals.str_len);
       dll_optGetMessage(popt,NrMsg,cpy_info,ref iType);
       info = cpy_info.ToString();
    }

    public void optResetAll()
    {
       dll_optResetAll(popt);
    }

    public void optResetAllRecent()
    {
       dll_optResetAllRecent(popt);
    }

    public void optResetRecentChanges()
    {
       dll_optResetRecentChanges(popt);
    }

    public void optShowHelp(string HlpID)
    {
       dll_optShowHelp(popt,HlpID);
    }

    public int optResetNr(int ANr)
    {
       return dll_optResetNr(popt,ANr);
    }

    public int optFindStr(string AName,ref int ANr,ref int ARefNr)
    {
       return dll_optFindStr(popt,AName,ref ANr,ref ARefNr);
    }

    public int optGetInfoNr(int ANr,ref int ADefined,ref int ADefinedR,ref int ARefNr,ref int ADataType,ref int AOptType,ref int ASubType)
    {
       return dll_optGetInfoNr(popt,ANr,ref ADefined,ref ADefinedR,ref ARefNr,ref ADataType,ref AOptType,ref ASubType);
    }

    public int optGetValuesNr(int ANr,ref string ASName,ref int AIVal,ref double ADVal,ref string ASVal)
    {
       int rc_optGetValuesNr;
       StringBuilder cpy_ASName = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_ASVal = new StringBuilder(gamsglobals.str_len);
       rc_optGetValuesNr = dll_optGetValuesNr(popt,ANr,cpy_ASName,ref AIVal,ref ADVal,cpy_ASVal);
       ASName = cpy_ASName.ToString();
       ASVal = cpy_ASVal.ToString();
       return rc_optGetValuesNr;
    }

    public int optSetValuesNr(int ANr,int AIVal,double ADVal,string ASVal)
    {
       return dll_optSetValuesNr(popt,ANr,AIVal,ADVal,ASVal);
    }

    public int optSetValues2Nr(int ANr,int AIVal,double ADVal,string ASVal)
    {
       return dll_optSetValues2Nr(popt,ANr,AIVal,ADVal,ASVal);
    }

    public void optVersion(ref string sversion)
    {
       StringBuilder cpy_sversion = new StringBuilder(gamsglobals.str_len);
       dll_optVersion(popt,cpy_sversion);
       sversion = cpy_sversion.ToString();
    }

    public void optDefinitionFile(ref string sfilename)
    {
       StringBuilder cpy_sfilename = new StringBuilder(gamsglobals.str_len);
       dll_optDefinitionFile(popt,cpy_sfilename);
       sfilename = cpy_sfilename.ToString();
    }

    public int optGetFromAnyStrList(int idash,ref string skey,ref string sval)
    {
       int rc_optGetFromAnyStrList;
       StringBuilder cpy_skey = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_sval = new StringBuilder(gamsglobals.str_len);
       rc_optGetFromAnyStrList = dll_optGetFromAnyStrList(popt,idash,cpy_skey,cpy_sval);
       skey = cpy_skey.ToString();
       sval = cpy_sval.ToString();
       return rc_optGetFromAnyStrList;
    }

    public int optGetFromListStr(string skey,ref string sval)
    {
       int rc_optGetFromListStr;
       StringBuilder cpy_sval = new StringBuilder(gamsglobals.str_len);
       rc_optGetFromListStr = dll_optGetFromListStr(popt,skey,cpy_sval);
       sval = cpy_sval.ToString();
       return rc_optGetFromListStr;
    }

    public int optListCountStr(string skey)
    {
       return dll_optListCountStr(popt,skey);
    }

    public int optReadFromListStr(string skey,int iPos,ref string sval)
    {
       int rc_optReadFromListStr;
       StringBuilder cpy_sval = new StringBuilder(gamsglobals.str_len);
       rc_optReadFromListStr = dll_optReadFromListStr(popt,skey,iPos,cpy_sval);
       sval = cpy_sval.ToString();
       return rc_optReadFromListStr;
    }

    public int optSynonymCount()
    {
       return dll_optSynonymCount(popt);
    }

    public int optGetSynonym(int NrSyn,ref string SSyn,ref string SName)
    {
       int rc_optGetSynonym;
       StringBuilder cpy_SSyn = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_SName = new StringBuilder(gamsglobals.str_len);
       rc_optGetSynonym = dll_optGetSynonym(popt,NrSyn,cpy_SSyn,cpy_SName);
       SSyn = cpy_SSyn.ToString();
       SName = cpy_SName.ToString();
       return rc_optGetSynonym;
    }

    public void optEchoSet(int AIVal)
    {
       dll_optEchoSet(popt,AIVal);
    }

    public int optEOLOnlySet(int AIVal)
    {
       return dll_optEOLOnlySet(popt,AIVal);
    }

    public void optNoBoundsSet(int AIVal)
    {
       dll_optNoBoundsSet(popt,AIVal);
    }

    public void optErrorCount(ref int iErrors,ref int iWarnings)
    {
       dll_optErrorCount(popt,ref iErrors,ref iWarnings);
    }

    public int optGetBoundsInt(int ANr,ref int ilval,ref int ihval,ref int idval)
    {
       return dll_optGetBoundsInt(popt,ANr,ref ilval,ref ihval,ref idval);
    }

    public int optGetBoundsDbl(int ANr,ref double dlval,ref double dhval,ref double ddval)
    {
       return dll_optGetBoundsDbl(popt,ANr,ref dlval,ref dhval,ref ddval);
    }

    public int optGetDefaultStr(int ANr,ref string sval)
    {
       int rc_optGetDefaultStr;
       StringBuilder cpy_sval = new StringBuilder(gamsglobals.str_len);
       rc_optGetDefaultStr = dll_optGetDefaultStr(popt,ANr,cpy_sval);
       sval = cpy_sval.ToString();
       return rc_optGetDefaultStr;
    }

    public int optGetIntNr(int ANr,ref int AIVal)
    {
       return dll_optGetIntNr(popt,ANr,ref AIVal);
    }

    public int optGetInt2Nr(int ANr,ref int AIVal)
    {
       return dll_optGetInt2Nr(popt,ANr,ref AIVal);
    }

    public int optSetIntNr(int ANr,int AIVal)
    {
       return dll_optSetIntNr(popt,ANr,AIVal);
    }

    public int optSetInt2Nr(int ANr,int AIVal)
    {
       return dll_optSetInt2Nr(popt,ANr,AIVal);
    }

    public int optGetStrNr(int ANr,ref string ASVal)
    {
       int rc_optGetStrNr;
       StringBuilder cpy_ASVal = new StringBuilder(gamsglobals.str_len);
       rc_optGetStrNr = dll_optGetStrNr(popt,ANr,cpy_ASVal);
       ASVal = cpy_ASVal.ToString();
       return rc_optGetStrNr;
    }

    public int optGetOptHelpNr(int ANr,ref string AName,ref int AHc,ref int AGroup)
    {
       int rc_optGetOptHelpNr;
       StringBuilder cpy_AName = new StringBuilder(gamsglobals.str_len);
       rc_optGetOptHelpNr = dll_optGetOptHelpNr(popt,ANr,cpy_AName,ref AHc,ref AGroup);
       AName = cpy_AName.ToString();
       return rc_optGetOptHelpNr;
    }

    public int optGetEnumHelp(int ANr,int AOrd,ref int AHc,ref string AHelpStr)
    {
       int rc_optGetEnumHelp;
       StringBuilder cpy_AHelpStr = new StringBuilder(gamsglobals.str_len);
       rc_optGetEnumHelp = dll_optGetEnumHelp(popt,ANr,AOrd,ref AHc,cpy_AHelpStr);
       AHelpStr = cpy_AHelpStr.ToString();
       return rc_optGetEnumHelp;
    }

    public int optGetEnumStrNr(int ANr,ref string ASVal,ref int AOrd)
    {
       int rc_optGetEnumStrNr;
       StringBuilder cpy_ASVal = new StringBuilder(gamsglobals.str_len);
       rc_optGetEnumStrNr = dll_optGetEnumStrNr(popt,ANr,cpy_ASVal,ref AOrd);
       ASVal = cpy_ASVal.ToString();
       return rc_optGetEnumStrNr;
    }

    public int optGetEnumCount(int ANr,ref int ACount)
    {
       return dll_optGetEnumCount(popt,ANr,ref ACount);
    }

    public int optGetEnumValue(int ANr,int AOrd,ref int AValInt,ref string AValStr)
    {
       int rc_optGetEnumValue;
       StringBuilder cpy_AValStr = new StringBuilder(gamsglobals.str_len);
       rc_optGetEnumValue = dll_optGetEnumValue(popt,ANr,AOrd,ref AValInt,cpy_AValStr);
       AValStr = cpy_AValStr.ToString();
       return rc_optGetEnumValue;
    }

    public int optGetStr2Nr(int ANr,ref string ASVal)
    {
       int rc_optGetStr2Nr;
       StringBuilder cpy_ASVal = new StringBuilder(gamsglobals.str_len);
       rc_optGetStr2Nr = dll_optGetStr2Nr(popt,ANr,cpy_ASVal);
       ASVal = cpy_ASVal.ToString();
       return rc_optGetStr2Nr;
    }

    public int optSetStrNr(int ANr,string ASVal)
    {
       return dll_optSetStrNr(popt,ANr,ASVal);
    }

    public int optSetStr2Nr(int ANr,string ASVal)
    {
       return dll_optSetStr2Nr(popt,ANr,ASVal);
    }

    public int optGetDblNr(int ANr,ref double ADVal)
    {
       return dll_optGetDblNr(popt,ANr,ref ADVal);
    }

    public int optGetDbl2Nr(int ANr,ref double ADVal)
    {
       return dll_optGetDbl2Nr(popt,ANr,ref ADVal);
    }

    public int optSetDblNr(int ANr,double ADVal)
    {
       return dll_optSetDblNr(popt,ANr,ADVal);
    }

    public int optSetDbl2Nr(int ANr,double ADVal)
    {
       return dll_optSetDbl2Nr(popt,ANr,ADVal);
    }

    public int optGetValStr(string AName,ref string ASVal)
    {
       int rc_optGetValStr;
       StringBuilder cpy_ASVal = new StringBuilder(gamsglobals.str_len);
       rc_optGetValStr = dll_optGetValStr(popt,AName,cpy_ASVal);
       ASVal = cpy_ASVal.ToString();
       return rc_optGetValStr;
    }

    public int optGetVal2Str(string AName,ref string ASVal)
    {
       int rc_optGetVal2Str;
       StringBuilder cpy_ASVal = new StringBuilder(gamsglobals.str_len);
       rc_optGetVal2Str = dll_optGetVal2Str(popt,AName,cpy_ASVal);
       ASVal = cpy_ASVal.ToString();
       return rc_optGetVal2Str;
    }

    public int optGetNameNr(int ANr,ref string ASName)
    {
       int rc_optGetNameNr;
       StringBuilder cpy_ASName = new StringBuilder(gamsglobals.str_len);
       rc_optGetNameNr = dll_optGetNameNr(popt,ANr,cpy_ASName);
       ASName = cpy_ASName.ToString();
       return rc_optGetNameNr;
    }

    public int optGetDefinedNr(int ANr,ref int AIVal)
    {
       return dll_optGetDefinedNr(popt,ANr,ref AIVal);
    }

    public int optGetHelpNr(int ANr,ref string ASOpt,ref string ASHelp)
    {
       int rc_optGetHelpNr;
       StringBuilder cpy_ASOpt = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_ASHelp = new StringBuilder(gamsglobals.str_len);
       rc_optGetHelpNr = dll_optGetHelpNr(popt,ANr,cpy_ASOpt,cpy_ASHelp);
       ASOpt = cpy_ASOpt.ToString();
       ASHelp = cpy_ASHelp.ToString();
       return rc_optGetHelpNr;
    }

    public int optGetGroupNr(int ANr,ref string AName,ref int AGroup,ref int AHc,ref string AHelp)
    {
       int rc_optGetGroupNr;
       StringBuilder cpy_AName = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_AHelp = new StringBuilder(gamsglobals.str_len);
       rc_optGetGroupNr = dll_optGetGroupNr(popt,ANr,cpy_AName,ref AGroup,ref AHc,cpy_AHelp);
       AName = cpy_AName.ToString();
       AHelp = cpy_AHelp.ToString();
       return rc_optGetGroupNr;
    }

    public int optGetGroupGrpNr(int AGroup)
    {
       return dll_optGetGroupGrpNr(popt,AGroup);
    }

    public int optGetOptGroupNr(int ANr)
    {
       return dll_optGetOptGroupNr(popt,ANr);
    }

    public int optGetDotOptNr(int ANr,ref string VEName,ref int AObjNr,ref int ADim,ref double AValue)
    {
       int rc_optGetDotOptNr;
       StringBuilder cpy_VEName = new StringBuilder(gamsglobals.str_len);
       rc_optGetDotOptNr = dll_optGetDotOptNr(popt,ANr,cpy_VEName,ref AObjNr,ref ADim,ref AValue);
       VEName = cpy_VEName.ToString();
       return rc_optGetDotOptNr;
    }

    public int optGetDotOptUel(int ANr,int ADim,ref string AUEL)
    {
       int rc_optGetDotOptUel;
       StringBuilder cpy_AUEL = new StringBuilder(gamsglobals.str_len);
       rc_optGetDotOptUel = dll_optGetDotOptUel(popt,ANr,ADim,cpy_AUEL);
       AUEL = cpy_AUEL.ToString();
       return rc_optGetDotOptUel;
    }

    public int optGetVarEquMapNr(int maptype,int ANr,ref string EquName,ref string VarName,ref int EquDim,ref int VarDim,ref int AValue)
    {
       int rc_optGetVarEquMapNr;
       StringBuilder cpy_EquName = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_VarName = new StringBuilder(gamsglobals.str_len);
       rc_optGetVarEquMapNr = dll_optGetVarEquMapNr(popt,maptype,ANr,cpy_EquName,cpy_VarName,ref EquDim,ref VarDim,ref AValue);
       EquName = cpy_EquName.ToString();
       VarName = cpy_VarName.ToString();
       return rc_optGetVarEquMapNr;
    }

    public int optGetEquVarEquMapNr(int maptype,int ANr,int ADim,ref string AIndex)
    {
       int rc_optGetEquVarEquMapNr;
       StringBuilder cpy_AIndex = new StringBuilder(gamsglobals.str_len);
       rc_optGetEquVarEquMapNr = dll_optGetEquVarEquMapNr(popt,maptype,ANr,ADim,cpy_AIndex);
       AIndex = cpy_AIndex.ToString();
       return rc_optGetEquVarEquMapNr;
    }

    public int optGetVarVarEquMapNr(int maptype,int ANr,int ADim,ref string AIndex)
    {
       int rc_optGetVarVarEquMapNr;
       StringBuilder cpy_AIndex = new StringBuilder(gamsglobals.str_len);
       rc_optGetVarVarEquMapNr = dll_optGetVarVarEquMapNr(popt,maptype,ANr,ADim,cpy_AIndex);
       AIndex = cpy_AIndex.ToString();
       return rc_optGetVarVarEquMapNr;
    }

    public int optVarEquMapCount(int maptype,ref int ANrErrors)
    {
       return dll_optVarEquMapCount(popt,maptype,ref ANrErrors);
    }

    public int optGetIndicatorNr(int ANr,ref string EquName,ref string VarName,ref int EquDim,ref int VarDim,ref int AValue)
    {
       int rc_optGetIndicatorNr;
       StringBuilder cpy_EquName = new StringBuilder(gamsglobals.str_len);
       StringBuilder cpy_VarName = new StringBuilder(gamsglobals.str_len);
       rc_optGetIndicatorNr = dll_optGetIndicatorNr(popt,ANr,cpy_EquName,cpy_VarName,ref EquDim,ref VarDim,ref AValue);
       EquName = cpy_EquName.ToString();
       VarName = cpy_VarName.ToString();
       return rc_optGetIndicatorNr;
    }

    public int optGetEquIndicatorNr(int ANr,int ADim,ref string AIndex)
    {
       int rc_optGetEquIndicatorNr;
       StringBuilder cpy_AIndex = new StringBuilder(gamsglobals.str_len);
       rc_optGetEquIndicatorNr = dll_optGetEquIndicatorNr(popt,ANr,ADim,cpy_AIndex);
       AIndex = cpy_AIndex.ToString();
       return rc_optGetEquIndicatorNr;
    }

    public int optGetVarIndicatorNr(int ANr,int ADim,ref string AIndex)
    {
       int rc_optGetVarIndicatorNr;
       StringBuilder cpy_AIndex = new StringBuilder(gamsglobals.str_len);
       rc_optGetVarIndicatorNr = dll_optGetVarIndicatorNr(popt,ANr,ADim,cpy_AIndex);
       AIndex = cpy_AIndex.ToString();
       return rc_optGetVarIndicatorNr;
    }

    public int optIndicatorCount(ref int ANrErrors)
    {
       return dll_optIndicatorCount(popt,ref ANrErrors);
    }

    public int optDotOptCount(ref int ANrErrors)
    {
       return dll_optDotOptCount(popt,ref ANrErrors);
    }

    public int optSetRefNr(int ANr,int ARefNr)
    {
       return dll_optSetRefNr(popt,ANr,ARefNr);
    }

    public int optSetRefNrStr(string AOpt,int ARefNr)
    {
       return dll_optSetRefNrStr(popt,AOpt,ARefNr);
    }

    public int optGetConstName(int cgroup,int cindex,ref string cname)
    {
       int rc_optGetConstName;
       StringBuilder cpy_cname = new StringBuilder(gamsglobals.str_len);
       rc_optGetConstName = dll_optGetConstName(popt,cgroup,cindex,cpy_cname);
       cname = cpy_cname.ToString();
       return rc_optGetConstName;
    }

    public int optGetTypeName(int TNr,ref string sTName)
    {
       int rc_optGetTypeName;
       StringBuilder cpy_sTName = new StringBuilder(gamsglobals.str_len);
       rc_optGetTypeName = dll_optGetTypeName(popt,TNr,cpy_sTName);
       sTName = cpy_sTName.ToString();
       return rc_optGetTypeName;
    }

    public int optLookUp(string AOpt)
    {
       return dll_optLookUp(popt,AOpt);
    }

    public void optReadFromPChar(ref byte[] p)
    {
       dll_optReadFromPChar(popt,p);
    }

    public int optGetNameOpt(string ASVal,ref string solver,ref int opt)
    {
       int rc_optGetNameOpt;
       StringBuilder cpy_solver = new StringBuilder(gamsglobals.str_len);
       rc_optGetNameOpt = dll_optGetNameOpt(popt,ASVal,cpy_solver,ref opt);
       solver = cpy_solver.ToString();
       return rc_optGetNameOpt;
    }

    public bool optGetDefinedStr(string AName)
    {
       return dll_optGetDefinedStr(popt,AName) != 0;
    }

    public int optGetIntStr(string AName)
    {
       return dll_optGetIntStr(popt,AName);
    }

    public double optGetDblStr(string AName)
    {
       return dll_optGetDblStr(popt,AName);
    }

    public string optGetStrStr(string AName)
    {
       string rc_optGetStrStr = "";;
       StringBuilder sst_result = new StringBuilder(gamsglobals.str_len);
       dll_optGetStrStr(popt,AName,sst_result);
       rc_optGetStrStr = sst_result.ToString();
       return rc_optGetStrStr;
    }

    public void optSetIntStr(string AName,int AIVal)
    {
       dll_optSetIntStr(popt,AName,AIVal);
    }

    public void optSetDblStr(string AName,double ADVal)
    {
       dll_optSetDblStr(popt,AName,ADVal);
    }

    public void optSetStrStr(string AName,string ASVal)
    {
       dll_optSetStrStr(popt,AName,ASVal);
    }

    public int optCount()
    {
       return dll_optCount(popt);
    }
    public int optMessageCount()
    {
       return dll_optMessageCount(popt);
    }
    public int optGroupCount()
    {
       return dll_optGroupCount(popt);
    }
    public int optRecentEnabled()
    {
       return dll_optRecentEnabled(popt);
    }
    public void optRecentEnabledSet(int x)
    {
       dll_optRecentEnabledSet(popt, x);
    }
}
