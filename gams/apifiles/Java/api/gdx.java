/*  Java code generated by apiwrapper for GAMS Version 24.0.2 */
package com.gams.api;

public class gdx {
   private long gdxPtr = 0;
   public native static int    GetReady (String[] msg);
   public native static int    GetReadyD(String dirName, String[] msg);
   public native static int    GetReadyL(String libName, String[] msg);
   public native int    Create   (String[] msg);
   public native int    CreateD  (String dirName, String[] msg);
   public native int    CreateL  (String libName, String[] msg);
   public native int    Free     ();
   public native int    AcronymAdd(String AName, String Txt, int AIndx);
   public native int    AcronymCount();
   public native int    AcronymGetInfo(int N, String []AName, String []Txt, int []AIndx);
   public native int    AcronymGetMapping(int N, int []orgIndx, int []newIndx, int []autoIndex);
   public native int    AcronymIndex(double V);
   public native int    AcronymName(double V, String []AName);
   public native int    AcronymNextNr(int NV);
   public native int    AcronymSetInfo(int N, String AName, String Txt, int AIndx);
   public native double    AcronymValue(int AIndx);
   public native int    AddAlias(String Id1, String Id2);
   public native int    AddSetText(String Txt, int []TxtNr);
   public native int    AutoConvert(int NV);
   public native int    Close();
   public native int    DataErrorCount();
   public native int    DataErrorRecord(int RecNr, int []KeyInt, double []Values);
   public native int    DataReadDone();
   public native int    DataReadFilteredStart(int SyNr, int []FilterAction, int []NrRecs);
   public native int    DataReadMap(int RecNr, int []KeyInt, double []Values, int []DimFrst);
   public native int    DataReadMapStart(int SyNr, int []NrRecs);
   public native int    DataReadRaw(int []KeyInt, double []Values, int []DimFrst);
   public native int    DataReadRawFast(int SyNr, String DP, int []NrRecs);
   public native int    DataReadRawStart(int SyNr, int []NrRecs);
   public native int    DataReadSlice(String []UelFilterStr, int []Dimen, String DP);
   public native int    DataReadSliceStart(int SyNr, int []ElemCounts);
   public native int    DataReadStr(String []KeyStr, double []Values, int []DimFrst);
   public native int    DataReadStrStart(int SyNr, int []NrRecs);
   public native int    DataSliceUELS(int []SliceKeyInt, String []KeyStr);
   public native int    DataWriteDone();
   public native int    DataWriteMap(int []KeyInt, double []Values);
   public native int    DataWriteMapStart(String SyId, String ExplTxt, int Dimen, int Typ, int UserInfo);
   public native int    DataWriteRaw(int []KeyInt, double []Values);
   public native int    DataWriteRawStart(String SyId, String ExplTxt, int Dimen, int Typ, int UserInfo);
   public native int    DataWriteStr(String []KeyStr, double []Values);
   public native int    DataWriteStrStart(String SyId, String ExplTxt, int Dimen, int Typ, int UserInfo);
   public native int    GetDLLVersion(String []V);
   public native int    ErrorCount();
   public native int    ErrorStr(int ErrNr, String []ErrMsg);
   public native int    FileInfo(int []FileVer, int []ComprLev);
   public native int    FileVersion(String []FileStr, String []ProduceStr);
   public native int    FilterExists(int FilterNr);
   public native int    FilterRegister(int UelMap);
   public native int    FilterRegisterDone();
   public native int    FilterRegisterStart(int FilterNr);
   public native int    FindSymbol(String SyId, int []SyNr);
   public native int    GetElemText(int TxtNr, String []Txt, int []Node);
   public native int    GetLastError();
   public native long    GetMemoryUsed();
   public native int    GetSpecialValues(double []AVals);
   public native int    GetUEL(int UelNr, String []Uel);
   public native int    MapValue(double D, int []sv);
   public native int    OpenAppend(String FileName, String Producer, int []ErrNr);
   public native int    OpenRead(String FileName, int []ErrNr);
   public native int    OpenWrite(String FileName, String Producer, int []ErrNr);
   public native int    OpenWriteEx(String FileName, String Producer, int Compr, int []ErrNr);
   public native int    ResetSpecialValues();
   public native int    SetHasText(int SyNr);
   public native int    SetReadSpecialValues(double []AVals);
   public native int    SetSpecialValues(double []AVals);
   public native int    SetTextNodeNr(int TxtNr, int Node);
   public native int    SetTraceLevel(int N, String s);
   public native int    SymbIndxMaxLength(int SyNr, int []LengthInfo);
   public native int    SymbMaxLength();
   public native int    SymbolAddComment(int SyNr, String Txt);
   public native int    SymbolGetComment(int SyNr, int N, String []Txt);
   public native int    SymbolGetDomain(int SyNr, int []DomainSyNrs);
   public native int    SymbolGetDomainX(int SyNr, String []DomainIDs);
   public native int    SymbolDim(int SyNr);
   public native int    SymbolInfo(int SyNr, String []SyId, int []Dimen, int []Typ);
   public native int    SymbolInfoX(int SyNr, int []RecCnt, int []UserInfo, String []ExplTxt);
   public native int    SymbolSetDomain(String []DomainIDs);
   public native int    SymbolSetDomainX(int SyNr, String []DomainIDs);
   public native int    SystemInfo(int []SyCnt, int []UelCnt);
   public native int    UELMaxLength();
   public native int    UELRegisterDone();
   public native int    UELRegisterMap(int UMap, String Uel);
   public native int    UELRegisterMapStart();
   public native int    UELRegisterRaw(String Uel);
   public native int    UELRegisterRawStart();
   public native int    UELRegisterStr(String Uel, int []UelNr);
   public native int    UELRegisterStrStart();
   public native int    UMFindUEL(String Uel, int []UelNr, int []UelMap);
   public native int    UMUelGet(int UelNr, String []Uel, int []UelMap);
   public native int    UMUelInfo(int []UelCnt, int []HighMap);
   public native int    CurrentDim();
   public        long    GetgdxPtr(){ return gdxPtr;}
   public gdx () { }
   public gdx (long gdxPtr) {
      this.gdxPtr = gdxPtr;
   }
   static
   {
      try
      {
         if (System.getProperty("os.arch").toLowerCase().indexOf("64") >= 0 || System.getProperty("os.arch").toLowerCase().indexOf("sparcv9") >= 0)
         {
            System.loadLibrary("gdxjni64");
         }
         else
         {
            System.loadLibrary("gdxjni");
         }
      }
      catch (UnsatisfiedLinkError ex)
      {
         ex.printStackTrace();
         throw (ex);
      }
   }
}
