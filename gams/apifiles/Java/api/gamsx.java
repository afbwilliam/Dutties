/*  Java code generated by apiwrapper for GAMS Version 24.0.2 */
package com.gams.api;

public class gamsx {
   private long gamsxPtr = 0;
   public native static int      GetReady (String[] msg);
   public native static int      GetReadyD(String dirName, String[] msg);
   public native static int      GetReadyL(String libName, String[] msg);
   public native int      Create   (String[] msg);
   public native int      CreateD  (String dirName, String[] msg);
   public native int      CreateL  (String libName, String[] msg);
   public native int      Free     ();
   public native int      RunExecDLL(long optPtr, String sysDir, int AVerbose, String []Msg);
   public native boolean      ShowError(String fNameLog, String []errorLine, String []errorTyp, String []gmsLine);
   public native void      AddBreakPoint(String fn, int lineNr);
   public native void      ClearBreakPoints();
   public native int      SystemInfo(int []NrSy, int []NrUel);
   public native int      SymbolInfo(int SyNr, String []SyName, String []SyExplTxt, int []SyDim, int []SyTyp, int []SyCount, int []SyUserInfo);
   public native int      FindSymbol(String SyName);
   public native int      DataReadRawStart(int SyNr, int []SyCount);
   public native int      DataReadRaw(int []Elements, double []Vals, int []FDim);
   public native int      DataReadDone();
   public native int      DataWriteRawStart(int SyNr, boolean DoMerge);
   public native int      DataWriteRaw(int []Elements, double []Vals);
   public native int      DataWriteDone();
   public native void      RegisterCB1(String CB1, long userMem);
   public native void      RegisterCB2(String CB2, long userMem1, long userMem2);
   public native String      GetCB1();
   public native String      GetCB2();
   public native long      GetCB1UM();
   public native long      GetCB2UM1();
   public native long      GetCB2UM2();
   public native void      SWSet(int x);
   public native boolean      StepThrough();
   public native void      StepThroughSet(boolean x);
   public native boolean      RunToEnd();
   public native void      RunToEndSet(boolean x);
   public native boolean      CB1Defined();
   public native boolean      CB2Defined();
   private native String      UelName(int uel, String []sst_result);
   public String      UelName(int uel) {
       String[] sst_result = new String[1];
       return      UelName(uel, sst_result);
   }
   public        long      GetgamsxPtr(){ return gamsxPtr;}
   public gamsx () { }
   public gamsx (long gamsxPtr) {
      this.gamsxPtr = gamsxPtr;
   }
   static
   {
      try
      {
         if (System.getProperty("os.arch").toLowerCase().indexOf("64") >= 0 || System.getProperty("os.arch").toLowerCase().indexOf("sparcv9") >= 0)
         {
            System.loadLibrary("gamsxjni64");
         }
         else
         {
            System.loadLibrary("gamsxjni");
         }
      }
      catch (UnsatisfiedLinkError ex)
      {
         ex.printStackTrace();
         throw (ex);
      }
   }
}
