/*  SWIG interface code generated by apiwrapper for GAMS Version 24.0.2 */
%module gmdcc
%include cpointer.i
%include typemaps.i
%include carrays.i
%include cstring.i

%{
/* Put header files here or function declarations like below */
#define SWIG_FILE_WITH_INIT
#include "gmdcc.h"
#include "gclgms.h"
#define gmdHandleToPtr
#define ptrTogmdHandle
%}



enum gmdActionType {
  GMD_PARAM  = 0,
  GMD_UPPER  = 1,
  GMD_LOWER  = 2,
  GMD_FIXED  = 3,
  GMD_PRIMAL = 4,
  GMD_DUAL   = 5  };

enum gmdUpdateType {
  GMD_DEFAULT    = 0,
  GMD_BASECASE   = 1,
  GMD_ACCUMULATE = 2  };

enum gmdInfoX {
  GMD_NRSYMBOLS = 0,
  GMD_NRUELS    = 1  };

enum gmdSymInfo {
  GMD_NAME      = 0,
  GMD_DIM       = 1,
  GMD_TYPE      = 2,
  GMD_NRRECORDS = 3,
  GMD_USERINFO  = 4,
  GMD_EXPLTEXT  = 5  };

// This tells SWIG to treat char ** as a special case
// but this is only save for input-values
%typemap(in) char *keyStr_in[]{
  /* Check if is a list */
  if (PyList_Check($input)) {
    int size = PyList_Size($input);
    int i = 0;
    $1 = (char **) malloc((size+1)*sizeof(char *));
    for (i = 0; i < size; i++) {
      PyObject *o = PyList_GetItem($input,i);
      if (PyString_Check(o))
        $1[i] = PyString_AsString(PyList_GetItem($input,i));
      else {
        PyErr_SetString(PyExc_TypeError,"list must contain strings");
        free($1);
        return NULL;
      }
    }
    $1[i] = 0;
  } else {
    PyErr_SetString(PyExc_TypeError,"not a list");
    return NULL;
  }
}

%typemap(freearg) char *keyStr_in[]{
  free((char *) $1);
}

// special treatment for out string arrays
%typemap(in, numinputs=0) char *keyStr_out[]{
  static gdxStrIndexPtrs_t keyStr;
  static gdxStrIndex_t     keyStrXXX;
  GDXSTRINDEXPTRS_INIT(keyStrXXX, keyStr);
  $1 = keyStr;
}

%typemap(argout) char *keyStr_out[]{
    int loc_i = 0;
    PyObject *list;
    /* This is a strong assumption... */
    int loc_dim = arg3;
    list = PyList_New(loc_dim);
    for(loc_i=0; loc_i<loc_dim; loc_i++){
      PyList_SetItem(list, loc_i, PyString_FromString($1[loc_i]));
    }
    $result = SWIG_Python_AppendOutput($result, list);
}

%array_class(int, intArray);
%array_class(double, doubleArray);
%pointer_functions(int, intp);
%pointer_functions(double, doublep);
%pointer_functions(gmdHandle_t, gmdHandle_tp);

%typemap(in) void *{
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
  }
}

%typemap(in) void **{
    void *$1__p;
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1__p), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
    }
    $1 = &$1__p;
}

%typemap(out) gmdHandle_t {
  resultobj = SWIG_NewPointerObj((gmdHandle_t *)memcpy((gmdHandle_t *)malloc(sizeof(gmdHandle_t)),&result,sizeof(gmdHandle_t)), SWIGTYPE_p_gmdHandle_t, 0 |  0 );
}


%cstring_bounded_output(char *msgBuf_out, GMS_SSSIZE);
%cstring_bounded_output(char *msg_out, GMS_SSSIZE);
%cstring_bounded_output(char *txt_out, GMS_SSSIZE);
%cstring_bounded_output(char *sval_out, GMS_SSSIZE);

%feature("autodoc", "0");

extern void *gmdHandleToPtr (gmdHandle_t pgmd);
extern gmdHandle_t ptrTogmdHandle (void *vptr);
extern int gmdGetReady (char *msgBuf_out, int msgBufSize);
extern int gmdGetReadyD (const char *dirName, char *msgBuf_out, int msgBufSize);
extern int gmdGetReadyL (const char *libName, char *msgBuf_out, int msgBufSize);
extern int gmdCreate (gmdHandle_t *pgmd, char *msgBuf_out, int msgBufSize);
extern int gmdCreateD (gmdHandle_t *pgmd, const char *dirName, char *msgBuf_out, int msgBufSize);
extern int gmdCreateDD (gmdHandle_t *pgmd, const char *dirName, char *msgBuf_out, int msgBufSize);
extern int gmdCreateL (gmdHandle_t *pgmd, const char *libName, char *msgBuf_out, int msgBufSize);
extern int gmdFree (gmdHandle_t *pgmd);
extern int gmdLibraryLoaded(void);
extern int gmdLibraryUnload(void);
extern int gmdGetScreenIndicator(void);
extern void gmdSetScreenIndicator(int scrind);
extern int gmdGetExceptionIndicator(void);
extern void gmdSetExceptionIndicator(int excind);
extern int gmdGetExitIndicator(void);
extern void gmdSetExitIndicator(int extind);
extern gmdErrorCallback_t gmdGetErrorCallback(void);
extern void gmdSetErrorCallback(gmdErrorCallback_t func);
extern int gmdGetAPIErrorCount(void);
extern void gmdSetAPIErrorCount(int ecnt);
extern void gmdErrorHandling(const char *msg);
extern int  gmdInitFromGDX (gmdHandle_t pgmd, const char *fileName);
extern int  gmdInitFromDict (gmdHandle_t pgmd, void *gmoPtr, char *msg_out);
extern int  gmdCloseGDX (gmdHandle_t pgmd, int loadRemain);
extern void * gmdAddSymbol (gmdHandle_t pgmd, const char *symName, int aDim, int type, int userInfo, const char *explText);
extern void * gmdFindSymbol (gmdHandle_t pgmd, const char *symName);
extern void * gmdGetSymbolByIndex (gmdHandle_t pgmd, int idx);
extern int  gmdClearSymbol (gmdHandle_t pgmd, void *symPtr);
extern int  gmdCopySymbol (gmdHandle_t pgmd, void *tarSymPtr, void *srcSymPtr, char *msg_out);
extern void * gmdFindRecord (gmdHandle_t pgmd, void *symPtr, int aDim, const char *keyStr_in[]);
extern void * gmdFindFirstRecord (gmdHandle_t pgmd, void *symPtr);
extern void * gmdFindFirstRecordSlice (gmdHandle_t pgmd, void *symPtr, int aDim, const char *keyStr_in[]);
extern void * gmdFindLastRecord (gmdHandle_t pgmd, void *symPtr);
extern void * gmdFindLastRecordSlice (gmdHandle_t pgmd, void *symPtr, int aDim, const char *keyStr_in[]);
extern int  gmdRecordMoveNext (gmdHandle_t pgmd, void *symIterPtr);
extern int  gmdRecordMovePrev (gmdHandle_t pgmd, void *symIterPtr);
extern void  gmdGetElemText (gmdHandle_t pgmd, void *symIterPtr, char *txt_out);
extern double  gmdGetLevel (gmdHandle_t pgmd, void *symIterPtr);
extern double  gmdGetLower (gmdHandle_t pgmd, void *symIterPtr);
extern double  gmdGetUpper (gmdHandle_t pgmd, void *symIterPtr);
extern double  gmdGetMarginal (gmdHandle_t pgmd, void *symIterPtr);
extern double  gmdGetScale (gmdHandle_t pgmd, void *symIterPtr);
extern void  gmdSetElemText (gmdHandle_t pgmd, void *symIterPtr, const char *txt);
extern void  gmdSetLevel (gmdHandle_t pgmd, void *symIterPtr, double value);
extern void  gmdSetLower (gmdHandle_t pgmd, void *symIterPtr, double value);
extern void  gmdSetUpper (gmdHandle_t pgmd, void *symIterPtr, double value);
extern void  gmdSetMarginal (gmdHandle_t pgmd, void *symIterPtr, double value);
extern void  gmdSetScale (gmdHandle_t pgmd, void *symIterPtr, double value);
extern void * gmdAddRecord (gmdHandle_t pgmd, void *symPtr, int aDim, const char *keyStr_in[]);
extern int  gmdDeleteRecord (gmdHandle_t pgmd, void *symIterPtr);
extern int  gmdGetKeys (gmdHandle_t pgmd, void *symIterPtr, int aDim, char *keyStr_out[]);
extern void * gmdCopySymbolIterator (gmdHandle_t pgmd, void *symIterPtr);
extern void  gmdFreeSymbolIterator (gmdHandle_t pgmd, void *symIterPtr);
extern void  gmdFreeAllSymbolIterators (gmdHandle_t pgmd);
extern int  gmdInfo (gmdHandle_t pgmd, int infoKey, int *OUTPUT, double *OUTPUT, char *sval_out);
extern int  gmdSymbolInfo (gmdHandle_t pgmd, void *symPtr, int infoKey, int *OUTPUT, double *OUTPUT, char *sval_out);
extern int  gmdSymbolType (gmdHandle_t pgmd, void *symPtr);
extern int  gmdWriteGDX (gmdHandle_t pgmd, const char *fileName);
extern void  gmdSetSpecialValues (gmdHandle_t pgmd, const double specVal[]);
extern void  gmdSetDebug (gmdHandle_t pgmd, int debugLevel);
extern int  gmdInitUpdate (gmdHandle_t pgmd, void *gmoPtr);
extern int  gmdUpdateModelSymbol (gmdHandle_t pgmd, void *gamsSymPtr, int actionType, void *dataSymPtr, int updateType, int *INOUT);
extern int  gmdCallSolver (gmdHandle_t pgmd, const char *solvername);

%include "gclgms_swig.h"
