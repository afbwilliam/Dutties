/*  SWIG interface code generated by apiwrapper for GAMS Version 24.0.2 */
%module cfgmcc
%include cpointer.i
%include typemaps.i
%include carrays.i
%include cstring.i

%{
/* Put header files here or function declarations like below */
#define SWIG_FILE_WITH_INIT
#include "cfgmcc.h"
#include "gclgms.h"
#define cfgHandleToPtr
#define ptrTocfgHandle
%}



enum cfgProcType {
  cfgProc_none           = 0,
  cfgProc_lp             = 1,
  cfgProc_mip            = 2,
  cfgProc_rmip           = 3,
  cfgProc_nlp            = 4,
  cfgProc_mcp            = 5,
  cfgProc_mpec           = 6,
  cfgProc_rmpec          = 7,
  cfgProc_cns            = 8,
  cfgProc_dnlp           = 9,
  cfgProc_rminlp         = 10,
  cfgProc_minlp          = 11,
  cfgProc_qcp            = 12,
  cfgProc_miqcp          = 13,
  cfgProc_rmiqcp         = 14,
  cfgProc_emp            = 15,
  cfgProc_nrofmodeltypes = 16  };

%array_class(int, intArray);
%array_class(double, doubleArray);
%pointer_functions(int, intp);
%pointer_functions(double, doublep);
%pointer_functions(cfgHandle_t, cfgHandle_tp);

%typemap(in) void *{
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
  }
}

%typemap(in) void **{
    void *$1__p;
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1__p), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
    }
    $1 = &$1__p;
}

%typemap(out) cfgHandle_t {
  resultobj = SWIG_NewPointerObj((cfgHandle_t *)memcpy((cfgHandle_t *)malloc(sizeof(cfgHandle_t)),&result,sizeof(cfgHandle_t)), SWIGTYPE_p_cfgHandle_t, 0 |  0 );
}

%typemap(in, numinputs=0) char *_oss_buf() {
  $1 = (char *) malloc(sizeof(char) * (GMS_SSSIZE+1));
}

%typemap(freearg) char *_oss_buf() {
  free((char *) $1);
}


%cstring_bounded_output(char *msgBuf_out, GMS_SSSIZE);
%cstring_bounded_output(char *result_out, GMS_SSSIZE);
%cstring_bounded_output(char *msg_out, GMS_SSSIZE);

%feature("autodoc", "0");

extern void *cfgHandleToPtr (cfgHandle_t pcfg);
extern cfgHandle_t ptrTocfgHandle (void *vptr);
extern int cfgGetReady (char *msgBuf_out, int msgBufSize);
extern int cfgGetReadyD (const char *dirName, char *msgBuf_out, int msgBufSize);
extern int cfgGetReadyL (const char *libName, char *msgBuf_out, int msgBufSize);
extern int cfgCreate (cfgHandle_t *pcfg, char *msgBuf_out, int msgBufSize);
extern int cfgCreateD (cfgHandle_t *pcfg, const char *dirName, char *msgBuf_out, int msgBufSize);
extern int cfgCreateL (cfgHandle_t *pcfg, const char *libName, char *msgBuf_out, int msgBufSize);
extern int cfgFree (cfgHandle_t *pcfg);
extern int cfgLibraryLoaded(void);
extern int cfgLibraryUnload(void);
extern int cfgGetScreenIndicator(void);
extern void cfgSetScreenIndicator(int scrind);
extern int cfgGetExceptionIndicator(void);
extern void cfgSetExceptionIndicator(int excind);
extern int cfgGetExitIndicator(void);
extern void cfgSetExitIndicator(int extind);
extern cfgErrorCallback_t cfgGetErrorCallback(void);
extern void cfgSetErrorCallback(cfgErrorCallback_t func);
extern int cfgGetAPIErrorCount(void);
extern void cfgSetAPIErrorCount(int ecnt);
extern void cfgErrorHandling(const char *msg);
extern int  cfgReadConfig (cfgHandle_t pcfg, const char *filename);
extern int  cfgNumAlgs (cfgHandle_t pcfg);
extern int  cfgDefaultAlg (cfgHandle_t pcfg, int proc);
extern char * cfgAlgName (cfgHandle_t pcfg, int alg, char *_oss_buf);
extern int  cfgAlgAllowsModifyProblem (cfgHandle_t pcfg, int alg);
extern int  cfgAlgNumber (cfgHandle_t pcfg, const char *id);
extern int  cfgAlgCapability (cfgHandle_t pcfg, int alg, int proc);
extern int  cfgAlgCreate (cfgHandle_t pcfg, int alg, void **psl, const char *sysDir, char *msg_out);
extern int  cfgAlgReadyAPI (cfgHandle_t pcfg, int alg, void *psl, void *gmo, void *opt);
extern int  cfgAlgModifyProblem (cfgHandle_t pcfg, int alg, void *psl);
extern int  cfgAlgCallSolver (cfgHandle_t pcfg, int alg, void *psl, void *gmo);
extern void  cfgAlgFree (cfgHandle_t pcfg, int alg, void **vpsl);
extern char * cfgModelTypeName (cfgHandle_t pcfg, int proc, char *_oss_buf);
extern int  cfgNumMsg (cfgHandle_t pcfg);
extern char * cfgGetMsg (cfgHandle_t pcfg, char *_oss_buf);

%include "gclgms_swig.h"
