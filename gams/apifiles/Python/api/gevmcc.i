/*  SWIG interface code generated by apiwrapper for GAMS Version 24.0.2 */
%module gevmcc
%include cpointer.i
%include typemaps.i
%include carrays.i
%include cstring.i

%{
/* Put header files here or function declarations like below */
#define SWIG_FILE_WITH_INIT
#include "gevmcc.h"
#include "gclgms.h"
#define gevHandleToPtr
#define ptrTogevHandle
%}



enum gevLogStatMode {
  gevdoErr  = 0,
  gevdoStat = 1,
  gevdoLog  = 2  };

enum gevCallSolverMode {
  gevSolverSameStreams = 0,
  gevSolverQuiet       = 1,
  gevSolverOwnFile     = 2  };

enum gevCallSolverSolveLink {
  gevSolveLinkCallScript    = 1,
  gevSolveLinkCallModule    = 2,
  gevSolveLinkAsyncGrid     = 3,
  gevSolveLinkAsyncSimulate = 4,
  gevSolveLinkLoadLibrary   = 5  };


#define gevAlgFileType  "AlgFileType"  /* gevOptions */
#define gevGamsVersion  "GamsVersion"
#define gevLogOption    "LogOption"
#define gevReform       "Reform"
#define gevIDEFlag      "IDEFlag"
#define gevDomLim       "DomLim"
#define gevIterLim      "IterLim"
#define gevNodeLim      "NodeLim"
#define gevSysOut       "SysOut"
#define gevInteger1     "Integer1"
#define gevInteger2     "Integer2"
#define gevInteger3     "Integer3"
#define gevInteger4     "Integer4"
#define gevInteger5     "Integer5"
#define gevGenSolver    "GenSolver"
#define gevCurSolver    "CurSolver"
#define gevPageWidth    "PageWidth"
#define gevPageSize     "PageSize"
#define gevKeep         "Keep"
#define gevThreadsRaw   "ThreadsRaw"
#define gevOptCR        "OptCR"
#define gevOptCA        "OptCA"
#define gevResLim       "ResLim"
#define gevWorkSpace    "WorkSpace"
#define gevWorkFactor   "WorkFactor"
#define gevCutOff       "CutOff"
#define gevUseCutOff    "UseCutOff"
#define gevCheat        "Cheat"
#define gevUseCheat     "UseCheat"
#define gevTryInt       "TryInt"
#define gevReal1        "Real1"
#define gevReal2        "Real2"
#define gevReal3        "Real3"
#define gevReal4        "Real4"
#define gevReal5        "Real5"
#define gevHeapLimit    "HeapLimit"
#define gevNameCtrFile  "NameCtrFile"
#define gevNameLogFile  "NameLogFile"
#define gevNameStaFile  "NameStaFile"
#define gevNameScrDir   "NameScrDir"
#define gevNameGamsDate "NameGamsDate"
#define gevNameGamsTime "NameGamsTime"
#define gevNameSysDir   "NameSysDir"
#define gevNameWrkDir   "NameWrkDir"
#define gevNameCurDir   "NameCurDir"
#define gevLicense1     "License1"
#define gevLicense2     "License2"
#define gevLicense3     "License3"
#define gevLicense4     "License4"
#define gevLicense5     "License5"
#define gevNameMatrix   "NameMatrix"
#define gevNameInstr    "NameInstr"
#define gevNameParams   "NameParams"
#define gevNameScrExt   "NameScrExt"
#define gevNameScenFile "NameScenFile"
#define gevNameExtFFile "NameExtFFile"


%array_class(int, intArray);
%array_class(double, doubleArray);
%pointer_functions(int, intp);
%pointer_functions(double, doublep);
%pointer_functions(gevHandle_t, gevHandle_tp);

%typemap(in) void *{
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
  }
}

%typemap(in) void **{
    void *$1__p;
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1__p), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
    }
    $1 = &$1__p;
}

%typemap(out) gevHandle_t {
  resultobj = SWIG_NewPointerObj((gevHandle_t *)memcpy((gevHandle_t *)malloc(sizeof(gevHandle_t)),&result,sizeof(gevHandle_t)), SWIGTYPE_p_gevHandle_t, 0 |  0 );
}

%typemap(in) Tgevlswrite_t{
    if ($input == Py_None)
      $1 = NULL;
    else
    {
      void *argp;
      int ret = SWIG_ConvertPtr($input, &argp, SWIGTYPE_p_Tgevlswrite_t,  0 );
      if (!SWIG_IsOK(ret)) {
        SWIG_exception_fail(SWIG_ArgError(ret), "in method '" "$symname" "', argument " " of type '" "Tgevlswrite_t""'");
      }
      if (!argp) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "$symname" "', argument of type '" "Tgevlswrite_t""'");
      } else {
        $1 = *((Tgevlswrite_t *)(argp));
      }
    }
}
%pointer_functions(Tgevlswrite_t, Tgevlswrite_tp);
%typemap(in, numinputs=0) char *_oss_buf() {
  $1 = (char *) malloc(sizeof(char) * (GMS_SSSIZE+1));
}

%typemap(freearg) char *_oss_buf() {
  free((char *) $1);
}


%cstring_bounded_output(char *msgBuf_out, GMS_SSSIZE);
%cstring_bounded_output(char *result_out, GMS_SSSIZE);
%cstring_bounded_output(char *msg_out, GMS_SSSIZE);
%cstring_bounded_output(char *exename_out, GMS_SSSIZE);
%cstring_bounded_output(char *libname_out, GMS_SSSIZE);
%cstring_bounded_output(char *prefix_out, GMS_SSSIZE);

%feature("autodoc", "0");

extern void *gevHandleToPtr (gevHandle_t pgev);
extern gevHandle_t ptrTogevHandle (void *vptr);
extern int gevGetReady (char *msgBuf_out, int msgBufSize);
extern int gevGetReadyD (const char *dirName, char *msgBuf_out, int msgBufSize);
extern int gevGetReadyL (const char *libName, char *msgBuf_out, int msgBufSize);
extern int gevCreate (gevHandle_t *pgev, char *msgBuf_out, int msgBufSize);
extern int gevCreateD (gevHandle_t *pgev, const char *dirName, char *msgBuf_out, int msgBufSize);
extern int gevCreateDD (gevHandle_t *pgev, const char *dirName, char *msgBuf_out, int msgBufSize);
extern int gevCreateL (gevHandle_t *pgev, const char *libName, char *msgBuf_out, int msgBufSize);
extern int gevFree (gevHandle_t *pgev);
extern int gevLibraryLoaded(void);
extern int gevLibraryUnload(void);
extern int gevGetScreenIndicator(void);
extern void gevSetScreenIndicator(int scrind);
extern int gevGetExceptionIndicator(void);
extern void gevSetExceptionIndicator(int excind);
extern int gevGetExitIndicator(void);
extern void gevSetExitIndicator(int extind);
extern gevErrorCallback_t gevGetErrorCallback(void);
extern void gevSetErrorCallback(gevErrorCallback_t func);
extern int gevGetAPIErrorCount(void);
extern void gevSetAPIErrorCount(int ecnt);
extern void gevErrorHandling(const char *msg);
extern void  gevRegisterWriteCallback (gevHandle_t pgev, Tgevlswrite_t lsw, int logenabled, void *usrmem);
extern void  gevCompleteEnvironment (gevHandle_t pgev, void *palg, void *ivec, void *rvec, void *svec);
extern int  gevInitEnvironmentLegacy (gevHandle_t pgev, const char *cntrfn);
extern int  gevSwitchLogStat (gevHandle_t pgev, int lo, const char *logfn, int logappend, const char *statfn, int statappend, Tgevlswrite_t lsw, void *usrmem, void **lshandle);
extern void * gevGetLShandle (gevHandle_t pgev);
extern int  gevRestoreLogStat (gevHandle_t pgev, void **lshandle);
extern int  gevRestoreLogStatRewrite (gevHandle_t pgev, void **lshandle);
extern void  gevLog (gevHandle_t pgev, const char *s);
extern void  gevLogPChar (gevHandle_t pgev, const char *p);
extern void  gevStat (gevHandle_t pgev, const char *s);
extern void  gevStatC (gevHandle_t pgev, const char *s);
extern void  gevStatPChar (gevHandle_t pgev, const char *p);
extern void  gevStatAudit (gevHandle_t pgev, const char *s);
extern void  gevStatCon (gevHandle_t pgev);
extern void  gevStatCoff (gevHandle_t pgev);
extern void  gevStatEOF (gevHandle_t pgev);
extern void  gevStatSysout (gevHandle_t pgev);
extern void  gevStatAddE (gevHandle_t pgev, int mi, const char *s);
extern void  gevStatAddV (gevHandle_t pgev, int mj, const char *s);
extern void  gevStatAddJ (gevHandle_t pgev, int mi, int mj, const char *s);
extern void  gevStatEject (gevHandle_t pgev);
extern void  gevStatEdit (gevHandle_t pgev, const char C);
extern void  gevStatE (gevHandle_t pgev, const char *s, int mi, const char *s2);
extern void  gevStatV (gevHandle_t pgev, const char *s, int mj, const char *s2);
extern void  gevStatT (gevHandle_t pgev);
extern void  gevStatA (gevHandle_t pgev, const char *s);
extern void  gevStatB (gevHandle_t pgev, const char *s);
extern void  gevLogStat (gevHandle_t pgev, const char *s);
extern void  gevLogStatNoC (gevHandle_t pgev, const char *s);
extern void  gevLogStatPChar (gevHandle_t pgev, const char *p);
extern void  gevLogStatFlush (gevHandle_t pgev);
extern char * gevGetAnchor (gevHandle_t pgev, const char *s, char *_oss_buf);
extern int  gevStatAppend (gevHandle_t pgev, const char *statfn, char *msg_out);
extern int  gevGetSlvExeInfo (gevHandle_t pgev, const char *solvername, char *exename_out);
extern int  gevGetSlvLibInfo (gevHandle_t pgev, const char *solvername, char *libname_out, char *prefix_out, int *OUTPUT);
extern int  gevCapabilityCheck (gevHandle_t pgev, int modeltype, const char *solvername, int *capable);
extern int  gevNumSolvers (gevHandle_t pgev);
extern char * gevGetSolver (gevHandle_t pgev, int modeltype, char *_oss_buf);
extern char * gevGetSolverDefault (gevHandle_t pgev, int modeltype, char *_oss_buf);
extern int  gevSolver2Id (gevHandle_t pgev, const char *solvername);
extern char * gevId2Solver (gevHandle_t pgev, int solverid, char *_oss_buf);
extern char * gevCallSolverNextGridDir (gevHandle_t pgev, char *_oss_buf);
extern int  gevCallSolver (gevHandle_t pgev, void *gmoptr, const char *cntrfn, const char *solvername, int solvelink, int Logging, const char *logfn, const char *statfn, double reslim, int iterlim, int domlim, double optcr, double optca, void **jobhandle, char *msg_out);
extern int  gevCallSolverHandleStatus (gevHandle_t pgev, void *jobhandle);
extern int  gevCallSolverHandleDelete (gevHandle_t pgev, void **jobhandle);
extern int  gevCallSolverHandleCollect (gevHandle_t pgev, void **jobhandle, void *gmoptr);
extern int  gevGetIntOpt (gevHandle_t pgev, const char *optname);
extern double  gevGetDblOpt (gevHandle_t pgev, const char *optname);
extern char * gevGetStrOpt (gevHandle_t pgev, const char *optname, char *_oss_buf);
extern void  gevSetIntOpt (gevHandle_t pgev, const char *optname, int ival);
extern void  gevSetDblOpt (gevHandle_t pgev, const char *optname, double rval);
extern void  gevSetStrOpt (gevHandle_t pgev, const char *optname, const char *sval);
extern void  gevSynchronizeOpt (gevHandle_t pgev, void *optptr);
extern double  gevTimeJNow (gevHandle_t pgev);
extern double  gevTimeDiff (gevHandle_t pgev);
extern double  gevTimeDiffStart (gevHandle_t pgev);
extern void  gevTimeSetStart (gevHandle_t pgev);
extern void  gevTerminateUninstall (gevHandle_t pgev);
extern void  gevTerminateInstall (gevHandle_t pgev);
extern void  gevTerminateSet (gevHandle_t pgev, void *intr, void *ehdler);
extern int  gevTerminateGet (gevHandle_t pgev);
extern void  gevTerminateClear (gevHandle_t pgev);
extern void  gevTerminateRaise (gevHandle_t pgev);
extern void  gevTerminateGetHandler (gevHandle_t pgev, void **intr, void **ehdler);
extern char * gevGetScratchName (gevHandle_t pgev, const char *s, char *_oss_buf);
extern int  gevWriteModelInstance (gevHandle_t pgev, const char *mifn, void *gmoptr, int *INOUT);
extern int  gevInitJacLegacy (gevHandle_t pgev, void **evalptr, void *gmoptr);
extern void  gevSetColRowPermLegacy (gevHandle_t pgev, void *evalptr, int n, int cgms2slv[], int m, int rgms2slv[]);
extern void  gevSetJacPermLegacy (gevHandle_t pgev, void *evalptr, int njacs, int jacs[], int jgms2slv[]);
extern int  gevEvalNewPointLegacy (gevHandle_t pgev, void *evalptr, double x[]);
extern int  gevEvalJacLegacy (gevHandle_t pgev, void *evalptr, int si, double x[], double *INOUT, double jac[], int *INOUT, int *INOUT);
extern int  gevEvalJacLegacyX (gevHandle_t pgev, void *evalptr, int cnt, int rowidx[], double x[], double fvec[], double jac[], int *INOUT, int *INOUT);
extern int  gevNextNLLegacy (gevHandle_t pgev, void *evalptr, int si);
extern int  gevRowGms2SlvLegacy (gevHandle_t pgev, void *evalptr, int si);
extern void  gevFreeJacLegacy (gevHandle_t pgev, void **evalptr);
extern void * gevGetALGX (gevHandle_t pgev);
extern void gevSkipIOLegacySet (gevHandle_t pgev, const int x);
extern int  gevThreads (gevHandle_t pgev);

%include "gclgms_swig.h"
