module gdxvbnet ' visual basic .net  procedure wrapper generated by generated by apiwrapper for gams version 24.0.2


public delegate sub tdatastoreproc(byval indx as intptr,byval vals as intptr)

public  declare sub gdxsetloadpath lib "gdxdclib" (byval s as string)
private declare sub dll_gdxgetloadpath lib "gdxdclib" alias "cgdxgetloadpath" (byref s as byte)

public  declare function gdxacronymadd lib "gdxdclib" alias "cgdxacronymadd" (byval pgdx as intptr,byval aname as string,byval txt as string,byval aindx as integer) as integer
public  declare function gdxacronymcount lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxacronymgetinfo lib "gdxdclib" alias "cgdxacronymgetinfo" (byval pgdx as intptr,byval n as integer,byref aname as byte,byref txt as byte,byref aindx as integer) as integer
public  declare function gdxacronymgetmapping lib "gdxdclib" (byval pgdx as intptr,byval n as integer,byref orgindx as integer,byref newindx as integer,byref autoindex as integer) as integer
public  declare function gdxacronymindex lib "gdxdclib" (byval pgdx as intptr,byval v as double) as integer
private declare function dll_gdxacronymname lib "gdxdclib" alias "cgdxacronymname" (byval pgdx as intptr,byval v as double,byref aname as byte) as integer
public  declare function gdxacronymnextnr lib "gdxdclib" (byval pgdx as intptr,byval nv as integer) as integer
public  declare function gdxacronymsetinfo lib "gdxdclib" alias "cgdxacronymsetinfo" (byval pgdx as intptr,byval n as integer,byval aname as string,byval txt as string,byval aindx as integer) as integer
public  declare function gdxacronymvalue lib "gdxdclib" (byval pgdx as intptr,byval aindx as integer) as double
public  declare function gdxaddalias lib "gdxdclib" alias "cgdxaddalias" (byval pgdx as intptr,byval id1 as string,byval id2 as string) as integer
public  declare function gdxaddsettext lib "gdxdclib" alias "cgdxaddsettext" (byval pgdx as intptr,byval txt as string,byref txtnr as integer) as integer
public  declare function gdxautoconvert lib "gdxdclib" (byval pgdx as intptr,byval nv as integer) as integer
public  declare function gdxclose lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxdataerrorcount lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxdataerrorrecord lib "gdxdclib" alias "gdxdataerrorrecord" (byval pgdx as intptr,byval recnr as integer,byref keyint as integer,byref values as double) as integer
public  declare function gdxdatareaddone lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxdatareadfilteredstart lib "gdxdclib" alias "gdxdatareadfilteredstart" (byval pgdx as intptr,byval synr as integer,byref filteraction as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatareadmap lib "gdxdclib" alias "gdxdatareadmap" (byval pgdx as intptr,byval recnr as integer,byref keyint as integer,byref values as double,byref dimfrst as integer) as integer
public  declare function gdxdatareadmapstart lib "gdxdclib" (byval pgdx as intptr,byval synr as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatareadraw lib "gdxdclib" alias "gdxdatareadraw" (byval pgdx as intptr,byref keyint as integer,byref values as double,byref dimfrst as integer) as integer
public  declare function gdxdatareadrawfast lib "gdxdclib" (byval pgdx as intptr,byval synr as integer,byval dp as tdatastoreproc,byref nrrecs as integer) as integer
public  declare function gdxdatareadrawstart lib "gdxdclib" (byval pgdx as intptr,byval synr as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatareadslice lib "gdxdclib" alias "cgdxdatareadslice" (byval pgdx as intptr,byval uelfilterstr() as string,byref dimen as integer,byval dp as tdatastoreproc) as integer
private declare function dll_gdxdatareadslicestart lib "gdxdclib" alias "gdxdatareadslicestart" (byval pgdx as intptr,byval synr as integer,byref elemcounts as integer) as integer
private declare function dll_gdxdatareadstr lib "gdxdclib" alias "bgdxdatareadstr" (byval pgdx as intptr,byref keystr as byte,byref values as double,byref dimfrst as integer) as integer
public  declare function gdxdatareadstrstart lib "gdxdclib" (byval pgdx as intptr,byval synr as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatasliceuels lib "gdxdclib" alias "bgdxdatasliceuels" (byval pgdx as intptr,byref slicekeyint as integer,byref keystr as byte) as integer
public  declare function gdxdatawritedone lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxdatawritemap lib "gdxdclib" alias "gdxdatawritemap" (byval pgdx as intptr,byref keyint as integer,byref values as double) as integer
public  declare function gdxdatawritemapstart lib "gdxdclib" alias "cgdxdatawritemapstart" (byval pgdx as intptr,byval syid as string,byval expltxt as string,byval dimen as integer,byval typ as integer,byval userinfo as integer) as integer
private declare function dll_gdxdatawriteraw lib "gdxdclib" alias "gdxdatawriteraw" (byval pgdx as intptr,byref keyint as integer,byref values as double) as integer
public  declare function gdxdatawriterawstart lib "gdxdclib" alias "cgdxdatawriterawstart" (byval pgdx as intptr,byval syid as string,byval expltxt as string,byval dimen as integer,byval typ as integer,byval userinfo as integer) as integer
private declare function dll_gdxdatawritestr lib "gdxdclib" alias "cgdxdatawritestr" (byval pgdx as intptr,byval keystr() as string,byref values as double) as integer
public  declare function gdxdatawritestrstart lib "gdxdclib" alias "cgdxdatawritestrstart" (byval pgdx as intptr,byval syid as string,byval expltxt as string,byval dimen as integer,byval typ as integer,byval userinfo as integer) as integer
private declare function dll_gdxgetdllversion lib "gdxdclib" alias "cgdxgetdllversion" (byval pgdx as intptr,byref v as byte) as integer
public  declare function gdxerrorcount lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxerrorstr lib "gdxdclib" alias "cgdxerrorstr" (byval pgdx as intptr,byval errnr as integer,byref errmsg as byte) as integer
public  declare function gdxfileinfo lib "gdxdclib" (byval pgdx as intptr,byref filever as integer,byref comprlev as integer) as integer
private declare function dll_gdxfileversion lib "gdxdclib" alias "cgdxfileversion" (byval pgdx as intptr,byref filestr as byte,byref producestr as byte) as integer
public  declare function gdxfilterexists lib "gdxdclib" (byval pgdx as intptr,byval filternr as integer) as integer
public  declare function gdxfilterregister lib "gdxdclib" (byval pgdx as intptr,byval uelmap as integer) as integer
public  declare function gdxfilterregisterdone lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxfilterregisterstart lib "gdxdclib" (byval pgdx as intptr,byval filternr as integer) as integer
public  declare function gdxfindsymbol lib "gdxdclib" alias "cgdxfindsymbol" (byval pgdx as intptr,byval syid as string,byref synr as integer) as integer
private declare function dll_gdxgetelemtext lib "gdxdclib" alias "cgdxgetelemtext" (byval pgdx as intptr,byval txtnr as integer,byref txt as byte,byref node as integer) as integer
public  declare function gdxgetlasterror lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxgetmemoryused lib "gdxdclib" (byval pgdx as intptr) as int64
private declare function dll_gdxgetspecialvalues lib "gdxdclib" alias "gdxgetspecialvalues" (byval pgdx as intptr,byref avals as double) as integer
private declare function dll_gdxgetuel lib "gdxdclib" alias "cgdxgetuel" (byval pgdx as intptr,byval uelnr as integer,byref uel as byte) as integer
public  declare function gdxmapvalue lib "gdxdclib" (byval pgdx as intptr,byval d as double,byref sv as integer) as integer
public  declare function gdxopenappend lib "gdxdclib" alias "cgdxopenappend" (byval pgdx as intptr,byval filename as string,byval producer as string,byref errnr as integer) as integer
public  declare function gdxopenread lib "gdxdclib" alias "cgdxopenread" (byval pgdx as intptr,byval filename as string,byref errnr as integer) as integer
public  declare function gdxopenwrite lib "gdxdclib" alias "cgdxopenwrite" (byval pgdx as intptr,byval filename as string,byval producer as string,byref errnr as integer) as integer
public  declare function gdxopenwriteex lib "gdxdclib" alias "cgdxopenwriteex" (byval pgdx as intptr,byval filename as string,byval producer as string,byval compr as integer,byref errnr as integer) as integer
public  declare function gdxresetspecialvalues lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxsethastext lib "gdxdclib" (byval pgdx as intptr,byval synr as integer) as integer
private declare function dll_gdxsetreadspecialvalues lib "gdxdclib" alias "gdxsetreadspecialvalues" (byval pgdx as intptr,byref avals as double) as integer
private declare function dll_gdxsetspecialvalues lib "gdxdclib" alias "gdxsetspecialvalues" (byval pgdx as intptr,byref avals as double) as integer
public  declare function gdxsettextnodenr lib "gdxdclib" (byval pgdx as intptr,byval txtnr as integer,byval node as integer) as integer
public  declare function gdxsettracelevel lib "gdxdclib" alias "cgdxsettracelevel" (byval pgdx as intptr,byval n as integer,byval s as string) as integer
private declare function dll_gdxsymbindxmaxlength lib "gdxdclib" alias "gdxsymbindxmaxlength" (byval pgdx as intptr,byval synr as integer,byref lengthinfo as integer) as integer
public  declare function gdxsymbmaxlength lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxsymboladdcomment lib "gdxdclib" alias "cgdxsymboladdcomment" (byval pgdx as intptr,byval synr as integer,byval txt as string) as integer
private declare function dll_gdxsymbolgetcomment lib "gdxdclib" alias "cgdxsymbolgetcomment" (byval pgdx as intptr,byval synr as integer,byval n as integer,byref txt as byte) as integer
private declare function dll_gdxsymbolgetdomain lib "gdxdclib" alias "gdxsymbolgetdomain" (byval pgdx as intptr,byval synr as integer,byref domainsynrs as integer) as integer
private declare function dll_gdxsymbolgetdomainx lib "gdxdclib" alias "bgdxsymbolgetdomainx" (byval pgdx as intptr,byval synr as integer,byref domainids as byte) as integer
public  declare function gdxsymboldim lib "gdxdclib" (byval pgdx as intptr,byval synr as integer) as integer
private declare function dll_gdxsymbolinfo lib "gdxdclib" alias "cgdxsymbolinfo" (byval pgdx as intptr,byval synr as integer,byref syid as byte,byref dimen as integer,byref typ as integer) as integer
private declare function dll_gdxsymbolinfox lib "gdxdclib" alias "cgdxsymbolinfox" (byval pgdx as intptr,byval synr as integer,byref reccnt as integer,byref userinfo as integer,byref expltxt as byte) as integer
private declare function dll_gdxsymbolsetdomain lib "gdxdclib" alias "cgdxsymbolsetdomain" (byval pgdx as intptr,byval domainids() as string) as integer
private declare function dll_gdxsymbolsetdomainx lib "gdxdclib" alias "cgdxsymbolsetdomainx" (byval pgdx as intptr,byval synr as integer,byval domainids() as string) as integer
public  declare function gdxsysteminfo lib "gdxdclib" (byval pgdx as intptr,byref sycnt as integer,byref uelcnt as integer) as integer
public  declare function gdxuelmaxlength lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregisterdone lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregistermap lib "gdxdclib" alias "cgdxuelregistermap" (byval pgdx as intptr,byval umap as integer,byval uel as string) as integer
public  declare function gdxuelregistermapstart lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregisterraw lib "gdxdclib" alias "cgdxuelregisterraw" (byval pgdx as intptr,byval uel as string) as integer
public  declare function gdxuelregisterrawstart lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregisterstr lib "gdxdclib" alias "cgdxuelregisterstr" (byval pgdx as intptr,byval uel as string,byref uelnr as integer) as integer
public  declare function gdxuelregisterstrstart lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxumfinduel lib "gdxdclib" alias "cgdxumfinduel" (byval pgdx as intptr,byval uel as string,byref uelnr as integer,byref uelmap as integer) as integer
private declare function dll_gdxumuelget lib "gdxdclib" alias "cgdxumuelget" (byval pgdx as intptr,byval uelnr as integer,byref uel as byte,byref uelmap as integer) as integer
public  declare function gdxumuelinfo lib "gdxdclib" (byval pgdx as intptr,byref uelcnt as integer,byref highmap as integer) as integer
public  declare function gdxcurrentdim lib "gdxdclib" (byval pgdx as intptr) as integer


private declare sub xcreate lib "gdxdclib" (byref pgdx as intptr)
private declare sub xfree   lib "gdxdclib" (byref pgdx as intptr)

public function gdxcreate(byref pgdx as intptr, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreate = true
    else
        gdxcreate = false
    end if
end function

public function gdxcreatex(byref pgdx as intptr, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreatex = true
    else
        gdxcreatex = false
    end if
end function

public function gdxcreated(byref pgdx as intptr, byval dirname as string, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreated = true
    else
        gdxcreated = false
    end if
end function

public function gdxcreatel(byref pgdx as intptr, byval libname as string, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreatel = true
    else
        gdxcreatel = false
    end if
end function

public function gdxfree(byref pgdx as intptr) as boolean
   xfree(pgdx)
   gdxfree = true
end function
private sub convertc2bas(byval b() as byte, byref s as string)
    dim i as integer
    s = ""
    i = 0
    while b(i) <> 0
        s = s & chr(b(i))
        i = i + 1
    end while
end sub

private sub convertarrayc2bas(byval b(,) as byte, byref s as string, byval k as integer)
    dim i as integer
    s = ""
    i = 0
    while b(k, i) <> 0
        s = s & chr(b(k, i))
        i = i + 1
    end while
end sub

public sub gdxgetloadpath (byref s as string)
   dim cpy_s(str_len) as byte
   dll_gdxgetloadpath(cpy_s(0))
   call convertc2bas(cpy_s,s)
end sub

public function gdxacronymgetinfo(byval pgdx as intptr,byval n as integer,byref aname as string,byref txt as string,byref aindx as integer) as integer
   dim cpy_aname(str_len) as byte
   dim cpy_txt(str_len) as byte
   gdxacronymgetinfo = dll_gdxacronymgetinfo(pgdx,n,cpy_aname(0),cpy_txt(0),aindx)
   call convertc2bas(cpy_aname,aname)
   call convertc2bas(cpy_txt,txt)
end function

public function gdxacronymname(byval pgdx as intptr,byval v as double,byref aname as string) as integer
   dim cpy_aname(str_len) as byte
   gdxacronymname = dll_gdxacronymname(pgdx,v,cpy_aname(0))
   call convertc2bas(cpy_aname,aname)
end function

public function gdxdataerrorrecord(byval pgdx as intptr,byval recnr as integer,byref keyint() as integer,byref values() as double) as integer
   gdxdataerrorrecord = dll_gdxdataerrorrecord(pgdx,recnr,keyint(0),values(0))
end function

public function gdxdatareadfilteredstart(byval pgdx as intptr,byval synr as integer,byref filteraction() as integer,byref nrrecs as integer) as integer
   gdxdatareadfilteredstart = dll_gdxdatareadfilteredstart(pgdx,synr,filteraction(0),nrrecs)
end function

public function gdxdatareadmap(byval pgdx as intptr,byval recnr as integer,byref keyint() as integer,byref values() as double,byref dimfrst as integer) as integer
   gdxdatareadmap = dll_gdxdatareadmap(pgdx,recnr,keyint(0),values(0),dimfrst)
end function

public function gdxdatareadraw(byval pgdx as intptr,byref keyint() as integer,byref values() as double,byref dimfrst as integer) as integer
   gdxdatareadraw = dll_gdxdatareadraw(pgdx,keyint(0),values(0),dimfrst)
end function

public function gdxdatareadslice(byval pgdx as intptr,byval uelfilterstr() as string,byref dimen as integer,byval dp as tdatastoreproc) as integer
   gdxdatareadslice = dll_gdxdatareadslice(pgdx,uelfilterstr,dimen,dp)
end function

public function gdxdatareadslicestart(byval pgdx as intptr,byval synr as integer,byref elemcounts() as integer) as integer
   gdxdatareadslicestart = dll_gdxdatareadslicestart(pgdx,synr,elemcounts(0))
end function

public function gdxdatareadstr(byval pgdx as intptr,byref keystr() as string,byref values() as double,byref dimfrst as integer) as integer
   dim cpy_keystr(maxdim,str_len) as byte
   dim i_keystr as integer
   dim sidim_keystr as integer
   gdxdatareadstr = dll_gdxdatareadstr(pgdx,cpy_keystr(0,0),values(0),dimfrst)
   sidim_keystr = gdxcurrentdim(pgdx)
   for i_keystr = 0 to sidim_keystr
      call convertarrayc2bas(cpy_keystr,keystr(i_keystr), i_keystr)
   next i_keystr
end function

public function gdxdatasliceuels(byval pgdx as intptr,byref slicekeyint() as integer,byref keystr() as string) as integer
   dim cpy_keystr(maxdim,str_len) as byte
   dim i_keystr as integer
   dim sidim_keystr as integer
   gdxdatasliceuels = dll_gdxdatasliceuels(pgdx,slicekeyint(0),cpy_keystr(0,0))
   sidim_keystr = gdxcurrentdim(pgdx)
   for i_keystr = 0 to sidim_keystr
      call convertarrayc2bas(cpy_keystr,keystr(i_keystr), i_keystr)
   next i_keystr
end function

public function gdxdatawritemap(byval pgdx as intptr,byref keyint() as integer,byref values() as double) as integer
   gdxdatawritemap = dll_gdxdatawritemap(pgdx,keyint(0),values(0))
end function

public function gdxdatawriteraw(byval pgdx as intptr,byref keyint() as integer,byref values() as double) as integer
   gdxdatawriteraw = dll_gdxdatawriteraw(pgdx,keyint(0),values(0))
end function

public function gdxdatawritestr(byval pgdx as intptr,byval keystr() as string,byref values() as double) as integer
   gdxdatawritestr = dll_gdxdatawritestr(pgdx,keystr,values(0))
end function

public function gdxgetdllversion(byval pgdx as intptr,byref v as string) as integer
   dim cpy_v(str_len) as byte
   gdxgetdllversion = dll_gdxgetdllversion(pgdx,cpy_v(0))
   call convertc2bas(cpy_v,v)
end function

public function gdxerrorstr(byval pgdx as intptr,byval errnr as integer,byref errmsg as string) as integer
   dim cpy_errmsg(str_len) as byte
   gdxerrorstr = dll_gdxerrorstr(pgdx,errnr,cpy_errmsg(0))
   call convertc2bas(cpy_errmsg,errmsg)
end function

public function gdxfileversion(byval pgdx as intptr,byref filestr as string,byref producestr as string) as integer
   dim cpy_filestr(str_len) as byte
   dim cpy_producestr(str_len) as byte
   gdxfileversion = dll_gdxfileversion(pgdx,cpy_filestr(0),cpy_producestr(0))
   call convertc2bas(cpy_filestr,filestr)
   call convertc2bas(cpy_producestr,producestr)
end function

public function gdxgetelemtext(byval pgdx as intptr,byval txtnr as integer,byref txt as string,byref node as integer) as integer
   dim cpy_txt(str_len) as byte
   gdxgetelemtext = dll_gdxgetelemtext(pgdx,txtnr,cpy_txt(0),node)
   call convertc2bas(cpy_txt,txt)
end function

public function gdxgetspecialvalues(byval pgdx as intptr,byref avals() as double) as integer
   gdxgetspecialvalues = dll_gdxgetspecialvalues(pgdx,avals(0))
end function

public function gdxgetuel(byval pgdx as intptr,byval uelnr as integer,byref uel as string) as integer
   dim cpy_uel(str_len) as byte
   gdxgetuel = dll_gdxgetuel(pgdx,uelnr,cpy_uel(0))
   call convertc2bas(cpy_uel,uel)
end function

public function gdxsetreadspecialvalues(byval pgdx as intptr,byref avals() as double) as integer
   gdxsetreadspecialvalues = dll_gdxsetreadspecialvalues(pgdx,avals(0))
end function

public function gdxsetspecialvalues(byval pgdx as intptr,byref avals() as double) as integer
   gdxsetspecialvalues = dll_gdxsetspecialvalues(pgdx,avals(0))
end function

public function gdxsymbindxmaxlength(byval pgdx as intptr,byval synr as integer,byref lengthinfo() as integer) as integer
   gdxsymbindxmaxlength = dll_gdxsymbindxmaxlength(pgdx,synr,lengthinfo(0))
end function

public function gdxsymbolgetcomment(byval pgdx as intptr,byval synr as integer,byval n as integer,byref txt as string) as integer
   dim cpy_txt(str_len) as byte
   gdxsymbolgetcomment = dll_gdxsymbolgetcomment(pgdx,synr,n,cpy_txt(0))
   call convertc2bas(cpy_txt,txt)
end function

public function gdxsymbolgetdomain(byval pgdx as intptr,byval synr as integer,byref domainsynrs() as integer) as integer
   gdxsymbolgetdomain = dll_gdxsymbolgetdomain(pgdx,synr,domainsynrs(0))
end function

public function gdxsymbolgetdomainx(byval pgdx as intptr,byval synr as integer,byref domainids() as string) as integer
   dim cpy_domainids(maxdim,str_len) as byte
   dim i_domainids as integer
   dim sidim_domainids as integer
   gdxsymbolgetdomainx = dll_gdxsymbolgetdomainx(pgdx,synr,cpy_domainids(0,0))
   sidim_domainids = gdxsymboldim(pgdx, synr)
   for i_domainids = 0 to sidim_domainids
      call convertarrayc2bas(cpy_domainids,domainids(i_domainids), i_domainids)
   next i_domainids
end function

public function gdxsymbolinfo(byval pgdx as intptr,byval synr as integer,byref syid as string,byref dimen as integer,byref typ as integer) as integer
   dim cpy_syid(str_len) as byte
   gdxsymbolinfo = dll_gdxsymbolinfo(pgdx,synr,cpy_syid(0),dimen,typ)
   call convertc2bas(cpy_syid,syid)
end function

public function gdxsymbolinfox(byval pgdx as intptr,byval synr as integer,byref reccnt as integer,byref userinfo as integer,byref expltxt as string) as integer
   dim cpy_expltxt(str_len) as byte
   gdxsymbolinfox = dll_gdxsymbolinfox(pgdx,synr,reccnt,userinfo,cpy_expltxt(0))
   call convertc2bas(cpy_expltxt,expltxt)
end function

public function gdxsymbolsetdomain(byval pgdx as intptr,byval domainids() as string) as integer
   gdxsymbolsetdomain = dll_gdxsymbolsetdomain(pgdx,domainids)
end function

public function gdxsymbolsetdomainx(byval pgdx as intptr,byval synr as integer,byval domainids() as string) as integer
   gdxsymbolsetdomainx = dll_gdxsymbolsetdomainx(pgdx,synr,domainids)
end function

public function gdxumuelget(byval pgdx as intptr,byval uelnr as integer,byref uel as string,byref uelmap as integer) as integer
   dim cpy_uel(str_len) as byte
   gdxumuelget = dll_gdxumuelget(pgdx,uelnr,cpy_uel(0),uelmap)
   call convertc2bas(cpy_uel,uel)
end function

end module
