' visual basic for applications procedure wrapper generated by generated by apiwrapper for gams version 24.0.2


#if win64 then
private declare ptrsafe function dll_gamsxrunexecdll lib "gamsxdclib64" alias "gamsxrunexecdll" (byval pgamsx as longptr,byval optptr as longptr,byref sysdir as byte,byval averbose as long,byref msg as byte) as long
private declare ptrsafe function dll_gamsxshowerror lib "gamsxdclib64" alias "gamsxshowerror" (byval pgamsx as longptr,byref fnamelog as byte,byref errorline as byte,byref errortyp as byte,byref gmsline as byte) as long
private declare ptrsafe sub dll_gamsxaddbreakpoint lib "gamsxdclib64" alias "gamsxaddbreakpoint" (byval pgamsx as longptr,byref fn as byte,byval linenr as long)
private declare ptrsafe sub dll_gamsxclearbreakpoints lib "gamsxdclib64" alias "gamsxclearbreakpoints" (byval pgamsx as longptr)
private declare ptrsafe function dll_gamsxsysteminfo lib "gamsxdclib64" alias "gamsxsysteminfo" (byval pgamsx as longptr,byref nrsy as long,byref nruel as long) as long
private declare ptrsafe function dll_gamsxsymbolinfo lib "gamsxdclib64" alias "gamsxsymbolinfo" (byval pgamsx as longptr,byval synr as long,byref syname as byte,byref syexpltxt as byte,byref sydim as long,byref sytyp as long,byref sycount as long,byref syuserinfo as long) as long
private declare ptrsafe sub dll_gamsxuelname lib "gamsxdclib64" alias "cgamsxuelname" (byval pgamsx as longptr,byval uel as long,byref sst_result as byte)
private declare ptrsafe function dll_gamsxfindsymbol lib "gamsxdclib64" alias "gamsxfindsymbol" (byval pgamsx as longptr,byref syname as byte) as long
private declare ptrsafe function dll_gamsxdatareadrawstart lib "gamsxdclib64" alias "gamsxdatareadrawstart" (byval pgamsx as longptr,byval synr as long,byref sycount as long) as long
private declare ptrsafe function dll_gamsxdatareadraw lib "gamsxdclib64" alias "gamsxdatareadraw" (byval pgamsx as longptr,byref elements as long,byref vals as double,byref fdim as long) as long
private declare ptrsafe function dll_gamsxdatareaddone lib "gamsxdclib64" alias "gamsxdatareaddone" (byval pgamsx as longptr) as long
private declare ptrsafe function dll_gamsxdatawriterawstart lib "gamsxdclib64" alias "gamsxdatawriterawstart" (byval pgamsx as longptr,byval synr as long,byval domerge as long) as long
private declare ptrsafe function dll_gamsxdatawriteraw lib "gamsxdclib64" alias "gamsxdatawriteraw" (byval pgamsx as longptr,byref elements as long,byref vals as double) as long
private declare ptrsafe function dll_gamsxdatawritedone lib "gamsxdclib64" alias "gamsxdatawritedone" (byval pgamsx as longptr) as long
' private declare ptrsafe sub dll_gamsxregistercb1 lib "gamsxdclib64" alias "gamsxregistercb1" (byval pgamsx as longptr,byval cb1  *** function pointer not supported *** ,byval usermem as longptr)
' private declare ptrsafe sub dll_gamsxregistercb2 lib "gamsxdclib64" alias "gamsxregistercb2" (byval pgamsx as longptr,byval cb2  *** function pointer not supported *** ,byval usermem1 as longptr,byval usermem2 as longptr)
' private declare ptrsafe function dll_gamsxgetcb1 lib "gamsxdclib64" alias "gamsxgetcb1" (byval pgamsx as longptr) *** function pointer not supported ***
' private declare ptrsafe function dll_gamsxgetcb2 lib "gamsxdclib64" alias "gamsxgetcb2" (byval pgamsx as longptr) *** function pointer not supported ***
private declare ptrsafe function dll_gamsxgetcb1um lib "gamsxdclib64" alias "gamsxgetcb1um" (byval pgamsx as longptr) as longptr
private declare ptrsafe function dll_gamsxgetcb2um1 lib "gamsxdclib64" alias "gamsxgetcb2um1" (byval pgamsx as longptr) as longptr
private declare ptrsafe function dll_gamsxgetcb2um2 lib "gamsxdclib64" alias "gamsxgetcb2um2" (byval pgamsx as longptr) as longptr

private declare ptrsafe sub dll_gamsxswset lib "gamsxdclib64" alias "gamsxswset" (byval pgamsx as longptr, byval  x as long)
private declare ptrsafe function dll_gamsxstepthrough lib "gamsxdclib64" alias "gamsxstepthrough" (byval pgamsx as longptr) as long
private declare ptrsafe sub dll_gamsxstepthroughset lib "gamsxdclib64" alias "gamsxstepthroughset" (byval pgamsx as longptr, byval x as long)
private declare ptrsafe function dll_gamsxruntoend lib "gamsxdclib64" alias "gamsxruntoend" (byval pgamsx as longptr) as long
private declare ptrsafe sub dll_gamsxruntoendset lib "gamsxdclib64" alias "gamsxruntoendset" (byval pgamsx as longptr, byval x as long)
private declare ptrsafe function dll_gamsxcb1defined lib "gamsxdclib64" alias "gamsxcb1defined" (byval pgamsx as longptr) as long
private declare ptrsafe function dll_gamsxcb2defined lib "gamsxdclib64" alias "gamsxcb2defined" (byval pgamsx as longptr) as long
#else
private declare function dll_gamsxrunexecdll lib "gamsxdclib" alias "gamsxrunexecdll" (byval pgamsx as long,byval optptr as long,byref sysdir as byte,byval averbose as long,byref msg as byte) as long
private declare function dll_gamsxshowerror lib "gamsxdclib" alias "gamsxshowerror" (byval pgamsx as long,byref fnamelog as byte,byref errorline as byte,byref errortyp as byte,byref gmsline as byte) as long
private declare sub dll_gamsxaddbreakpoint lib "gamsxdclib" alias "gamsxaddbreakpoint" (byval pgamsx as long,byref fn as byte,byval linenr as long)
private declare sub dll_gamsxclearbreakpoints lib "gamsxdclib" alias "gamsxclearbreakpoints" (byval pgamsx as long)
private declare function dll_gamsxsysteminfo lib "gamsxdclib" alias "gamsxsysteminfo" (byval pgamsx as long,byref nrsy as long,byref nruel as long) as long
private declare function dll_gamsxsymbolinfo lib "gamsxdclib" alias "gamsxsymbolinfo" (byval pgamsx as long,byval synr as long,byref syname as byte,byref syexpltxt as byte,byref sydim as long,byref sytyp as long,byref sycount as long,byref syuserinfo as long) as long
private declare sub dll_gamsxuelname lib "gamsxdclib" alias "cgamsxuelname" (byval pgamsx as long,byval uel as long,byref sst_result as byte)
private declare function dll_gamsxfindsymbol lib "gamsxdclib" alias "gamsxfindsymbol" (byval pgamsx as long,byref syname as byte) as long
private declare function dll_gamsxdatareadrawstart lib "gamsxdclib" alias "gamsxdatareadrawstart" (byval pgamsx as long,byval synr as long,byref sycount as long) as long
private declare function dll_gamsxdatareadraw lib "gamsxdclib" alias "gamsxdatareadraw" (byval pgamsx as long,byref elements as long,byref vals as double,byref fdim as long) as long
private declare function dll_gamsxdatareaddone lib "gamsxdclib" alias "gamsxdatareaddone" (byval pgamsx as long) as long
private declare function dll_gamsxdatawriterawstart lib "gamsxdclib" alias "gamsxdatawriterawstart" (byval pgamsx as long,byval synr as long,byval domerge as long) as long
private declare function dll_gamsxdatawriteraw lib "gamsxdclib" alias "gamsxdatawriteraw" (byval pgamsx as long,byref elements as long,byref vals as double) as long
private declare function dll_gamsxdatawritedone lib "gamsxdclib" alias "gamsxdatawritedone" (byval pgamsx as long) as long
' private declare sub dll_gamsxregistercb1 lib "gamsxdclib" alias "gamsxregistercb1" (byval pgamsx as long,byval cb1  *** function pointer not supported *** ,byval usermem as long)
' private declare sub dll_gamsxregistercb2 lib "gamsxdclib" alias "gamsxregistercb2" (byval pgamsx as long,byval cb2  *** function pointer not supported *** ,byval usermem1 as long,byval usermem2 as long)
' private declare function dll_gamsxgetcb1 lib "gamsxdclib" alias "gamsxgetcb1" (byval pgamsx as long) *** function pointer not supported ***
' private declare function dll_gamsxgetcb2 lib "gamsxdclib" alias "gamsxgetcb2" (byval pgamsx as long) *** function pointer not supported ***
private declare function dll_gamsxgetcb1um lib "gamsxdclib" alias "gamsxgetcb1um" (byval pgamsx as long) as long
private declare function dll_gamsxgetcb2um1 lib "gamsxdclib" alias "gamsxgetcb2um1" (byval pgamsx as long) as long
private declare function dll_gamsxgetcb2um2 lib "gamsxdclib" alias "gamsxgetcb2um2" (byval pgamsx as long) as long

private declare sub dll_gamsxswset lib "gamsxdclib" alias "gamsxswset" (byval pgamsx as long, byval  x as long)
private declare function dll_gamsxstepthrough lib "gamsxdclib" alias "gamsxstepthrough" (byval pgamsx as long) as long
private declare sub dll_gamsxstepthroughset lib "gamsxdclib" alias "gamsxstepthroughset" (byval pgamsx as long, byval x as long)
private declare function dll_gamsxruntoend lib "gamsxdclib" alias "gamsxruntoend" (byval pgamsx as long) as long
private declare sub dll_gamsxruntoendset lib "gamsxdclib" alias "gamsxruntoendset" (byval pgamsx as long, byval x as long)
private declare function dll_gamsxcb1defined lib "gamsxdclib" alias "gamsxcb1defined" (byval pgamsx as long) as long
private declare function dll_gamsxcb2defined lib "gamsxdclib" alias "gamsxcb2defined" (byval pgamsx as long) as long
#end if

#if win64 then
private declare ptrsafe sub xcreate lib "gamsxdclib64" (byref pgamsx as longptr)
private declare ptrsafe sub xfree   lib "gamsxdclib64" (byref pgamsx as longptr)
#else
private declare sub xcreate lib "gamsxdclib" (byref pgamsx as long)
private declare sub xfree   lib "gamsxdclib" (byref pgamsx as long)
#end if

public function gamsxcreate(byref pgamsx as vbaptr, byref msgbuf as string) as boolean
    call xcreate(pgamsx.p)
    if pgamsx.p <> 0 then
        gamsxcreate = true
    else
        gamsxcreate = false
    end if
end function

public function gamsxcreatex(byref pgamsx as vbaptr, byref msgbuf as string) as boolean
    call xcreate(pgamsx.p)
    if pgamsx.p <> 0 then
        gamsxcreatex = true
    else
        gamsxcreatex = false
    end if
end function

public function gamsxcreated(byref pgamsx as vbaptr, byval dirname as string, byref msgbuf as string) as boolean
    call xcreate(pgamsx.p)
    if pgamsx.p <> 0 then
        gamsxcreated = true
    else
        gamsxcreated = false
    end if
end function

public function gamsxcreatel(byref pgamsx as vbaptr, byval libname as string, byref msgbuf as string) as boolean
    call xcreate(pgamsx.p)
    if pgamsx.p <> 0 then
        gamsxcreatel = true
    else
        gamsxcreatel = false
    end if
end function

public function gamsxfree(byref pgamsx as vbaptr) as boolean
   call xfree(pgamsx.p)
   gamsxfree = true
end function

private sub convertbas2pas(s as string, b() as byte)
    dim i as integer
    dim slen as integer
    slen = len(s)
    if (slen > ubound(b)) then
        slen = ubound(b)
    end if
    b(0) = slen
    for i = 1 to slen
        b(i) = asc(mid(s, i, 1))
    next i
end sub

private sub convertpas2bas(b() as byte, s as string)
    dim i as integer
    dim slen as integer
    slen = b(0)
    s = ""
    for i = 1 to slen
        s = s & chr(b(i))
    next i
end sub

private sub convertc2bas(b() as byte, s as string)
    dim i as integer
    s = ""
    i = 0
    do while b(i) <> 0
        s = s & chr(b(i))
        i = i + 1
    loop
end sub

public function gamsxrunexecdll(pgamsx as vbaptr,optptr as vbaptr,sysdir as string,averbose as long,msg as string) as long
   dim cpy_sysdir as string255
   dim cpy_msg as string255
   call convertbas2pas(sysdir, cpy_sysdir.s)
   gamsxrunexecdll = dll_gamsxrunexecdll(pgamsx.p,optptr.p,cpy_sysdir.s(0),averbose,cpy_msg.s(0))
   call convertpas2bas(cpy_msg.s,msg)
end function

public function gamsxshowerror(pgamsx as vbaptr,fnamelog as string,errorline as string,errortyp as string,gmsline as string) as boolean
   dim cpy_fnamelog as string255
   dim cpy_errorline as string255
   dim cpy_errortyp as string255
   dim cpy_gmsline as string255
   call convertbas2pas(fnamelog, cpy_fnamelog.s)
   gamsxshowerror = dll_gamsxshowerror(pgamsx.p,cpy_fnamelog.s(0),cpy_errorline.s(0),cpy_errortyp.s(0),cpy_gmsline.s(0))
   call convertpas2bas(cpy_errorline.s,errorline)
   call convertpas2bas(cpy_errortyp.s,errortyp)
   call convertpas2bas(cpy_gmsline.s,gmsline)
end function

public sub gamsxaddbreakpoint(pgamsx as vbaptr,fn as string,linenr as long)
   dim cpy_fn as string255
   call convertbas2pas(fn, cpy_fn.s)
   call dll_gamsxaddbreakpoint(pgamsx.p,cpy_fn.s(0),linenr)
end sub

public sub gamsxclearbreakpoints(pgamsx as vbaptr)
   call dll_gamsxclearbreakpoints(pgamsx.p)
end sub

public function gamsxsysteminfo(pgamsx as vbaptr,nrsy as long,nruel as long) as long
   gamsxsysteminfo = dll_gamsxsysteminfo(pgamsx.p,nrsy,nruel)
end function

public function gamsxsymbolinfo(pgamsx as vbaptr,synr as long,syname as string,syexpltxt as string,sydim as long,sytyp as long,sycount as long,syuserinfo as long) as long
   dim cpy_syname as string255
   dim cpy_syexpltxt as string255
   gamsxsymbolinfo = dll_gamsxsymbolinfo(pgamsx.p,synr,cpy_syname.s(0),cpy_syexpltxt.s(0),sydim,sytyp,sycount,syuserinfo)
   call convertpas2bas(cpy_syname.s,syname)
   call convertpas2bas(cpy_syexpltxt.s,syexpltxt)
end function

public function gamsxuelname(pgamsx as vbaptr,uel as long) as string
   dim cpy_result(str_len) as byte
   call dll_gamsxuelname(pgamsx.p,uel,cpy_result(0))
   call convertc2bas(cpy_result, gamsxuelname)
end function

public function gamsxfindsymbol(pgamsx as vbaptr,syname as string) as long
   dim cpy_syname as string255
   call convertbas2pas(syname, cpy_syname.s)
   gamsxfindsymbol = dll_gamsxfindsymbol(pgamsx.p,cpy_syname.s(0))
end function

public function gamsxdatareadrawstart(pgamsx as vbaptr,synr as long,sycount as long) as long
   gamsxdatareadrawstart = dll_gamsxdatareadrawstart(pgamsx.p,synr,sycount)
end function

public function gamsxdatareadraw(pgamsx as vbaptr,elements() as long,vals() as double,fdim as long) as long
   gamsxdatareadraw = dll_gamsxdatareadraw(pgamsx.p,elements(0),vals(0),fdim)
end function

public function gamsxdatareaddone(pgamsx as vbaptr) as long
   gamsxdatareaddone = dll_gamsxdatareaddone(pgamsx.p)
end function

public function gamsxdatawriterawstart(pgamsx as vbaptr,synr as long,domerge as boolean) as long
   gamsxdatawriterawstart = dll_gamsxdatawriterawstart(pgamsx.p,synr,domerge)
end function

public function gamsxdatawriteraw(pgamsx as vbaptr,elements() as long,vals() as double) as long
   gamsxdatawriteraw = dll_gamsxdatawriteraw(pgamsx.p,elements(0),vals(0))
end function

public function gamsxdatawritedone(pgamsx as vbaptr) as long
   gamsxdatawritedone = dll_gamsxdatawritedone(pgamsx.p)
end function

public function gamsxgetcb1um(pgamsx as vbaptr) as vbaptr
   gamsxgetcb1um.p = dll_gamsxgetcb1um(pgamsx.p)
end function

public function gamsxgetcb2um1(pgamsx as vbaptr) as vbaptr
   gamsxgetcb2um1.p = dll_gamsxgetcb2um1(pgamsx.p)
end function

public function gamsxgetcb2um2(pgamsx as vbaptr) as vbaptr
   gamsxgetcb2um2.p = dll_gamsxgetcb2um2(pgamsx.p)
end function

public function gamsxstepthrough(pgamsx as vbaptr) as boolean
   gamsxstepthrough = dll_gamsxstepthrough(pgamsx.p)
end function

public function gamsxruntoend(pgamsx as vbaptr) as boolean
   gamsxruntoend = dll_gamsxruntoend(pgamsx.p)
end function

public function gamsxcb1defined(pgamsx as vbaptr) as boolean
   gamsxcb1defined = dll_gamsxcb1defined(pgamsx.p)
end function

public function gamsxcb2defined(pgamsx as vbaptr) as boolean
   gamsxcb2defined = dll_gamsxcb2defined(pgamsx.p)
end function

public sub gamsxstepthroughset(pgamsx as vbaptr, x as long)
   call dll_gamsxstepthroughset(pgamsx.p,x)
end sub

public sub gamsxruntoendset(pgamsx as vbaptr, x as long)
   call dll_gamsxruntoendset(pgamsx.p,x)
end sub

public sub gamsxswset(pgamsx as vbaptr, x as long)
   call dll_gamsxswset(pgamsx.p,x)
end sub
