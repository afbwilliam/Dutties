Version = 5
LibraryName = GAMS Data Utilities
Columns = 6
1 = SeqNr
2 = Name
3 = File type
4 = Tool
5 = Windows Only
6 = Description
InitialSort = 1
*$*$*$
Files = SingleAsk.gms
1 = 001
2 = SingleAsk
3 = gms
4 = ask
5 = yes
6 = Single ask popup for entering an integer value

*$*$*$
Files = MultipleAsk.gms
1 = 002
2 = MultipleAsk
3 = gms
4 = ask
5 = yes
6 = Multiple ask popups for entering various data types

*$*$*$
Files = RadioButton.gms
1 = 003
2 = RadioButton
3 = gms
4 = ask
5 = yes
6 = Multiple ask popups for entering values through radio buttons

*$*$*$
Files = CheckListbox.gms
1 = 004
2 = CheckListbox
3 = gms
4 = ask
5 = yes
6 = Multiple ask popups for entering values through listboxes or checklistboxes

*$*$*$
Files = Combobox.gms,CityListSmall.inc,CityListMedium.inc,CityListLarge.inc
1 = 005
2 = Combobox
3 = gms, inc
4 = ask
5 = yes
6 = Multiple ask popups for entering values through comboboxes

*$*$*$
Files = Fileopenbox.gms,TrnsportSetDec.inc,TrnsportSetData.gdx,Trnsport.inc
1 = 006
2 = Fileopenbox
3 = gms, gdx, inc
4 = ask
5 = yes
6 = Ask popup for opening a file

*$*$*$
Files = Filesavebox.gms
1 = 007
2 = Filesavebox
3 = gms
4 = ask
5 = yes
6 = Ask popup for saving a file

*$*$*$
Files = GDXINExample1.gms,DemandData.gdx
1 = 008
2 = GDXINExample1
3 = gms, gdx
4 =
5 =
6 = Illustrates use of demand data from an external source in compile phase

*$*$*$
Files = GDXINExample2.gms,DemandData.gdx
1 = 009
2 = GDXINExample2
3 = gms, gdx
4 =
5 =
6 = Illustrates use of demand and market data from an external source in compile phase

*$*$*$
Files = GDXINExample3.gms,Trnsport.gdx
1 = 010
2 = GDXINExample3
3 = gms, gdx
4 =
5 =
6 = Lists all the symbols in Trnsport.gdx in the listing file in compile phase

*$*$*$
Files = Savepoint.gms,trnsport.gms
1 = 011
2 = Savepoint
3 = gms
4 =
5 =
6 = Saves solution to a log or GDX file

*$*$*$
Files = Loadpoint.gms,trnsport.gms,Transport_p1.gdx
1 = 012
2 = Loadpoint
3 = gms, gdx
4 =
5 =
6 = Illustrates use of "execute_loadpoint" command

*$*$*$
Files = CompTimeWriteTrnsportGDX.gms
1 = 013
2 = CompTimeWriteTrnsportGDX
3 = gms
4 =
5 =
6 = Writes data to GDX file during compile time

*$*$*$
Files = ExecTimeReadTrnsportGDX.gms,Trnsport.gdx
1 = 014
2 = ExecTimeReadTrnsportGDX
3 = gms, gdx
4 =
5 =
6 = Reads data from a GDX file during execution time

*$*$*$
Files = GDXExecute_unloadExample4.gms
1 = 015
2 = GDXExecute_unloadExample4
3 = gms
4 =
5 =
6 = Writes data to GDX file during execution time

*$*$*$
Files = GDXXRWExample5.gms,Test1.xls
1 = 016
2 = GDXXRWExample5
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a two dimensional parameter from an MS Excel file and writes it to a GDX file

*$*$*$
Files = GDXXRWExample6.gms,Test1.xls
1 = 017
2 = GDXXRWExample6
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a two dimensional parameter from an MS Excel file and writes it to a GDX file

*$*$*$
Files = GDXXRWExample7.gms,Test1.xls
1 = 018
2 = GDXXRWExample7
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a four dimensional parameter from an MS Excel file and writes it to a GDX file

*$*$*$
Files = GDXXRWExample8.gms,Test1.xls
1 = 019
2 = GDXXRWExample8
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a parameter with special values from an MS Excel file and writes it to a GDX file

*$*$*$
Files = GDXXRWExample9.gms,Test1.xls
1 = 020
2 = GDXXRWExample9
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a set using 'values' option from an MS Excel file and writes it to a GDX file

*$*$*$
Files = GDXXRWExample10.gms,Test1.xls
1 = 021
2 = GDXXRWExample10
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a number of parameters and sets using the index option from an MS Excel file and writes it to a GDX file

*$*$*$
Files = GDXXRWExample11a.gms,Makedata.gms
1 = 022
2 = GDXXRWExample11a
3 = gms
4 = gdxxrw
5 = yes
6 = Generates a GDX file and writes it to an MS Excel file

*$*$*$
Files = GDXXRWExample11b.gms
1 = 023
2 = GDXXRWExample11b
3 = gms
4 = gdxxrw
5 = yes
6 = Reads a table from an MS Excel file and writes it to a GDX file

*$*$*$
Files = GDXXRWExample12.gms,Test2.xls,Test2.gdx
1 = 024
2 = GDXXRWExample12
3 = gms, xls, gdx
4 = gdxxrw
5 = yes
6 = Illustrates the use of merge and clear option

*$*$*$
Files = GDXXRWExample13.gms,Test1.xls
1 = 025
2 = GDXXRWExample13
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Reads a table from an MS Excel file, manipulates data and writes it to first a GDX file and then to the MS Excel file

*$*$*$
Files = GDXXRWExample14.gms,TrnsportData.xls
1 = 026
2 = GDXXRWExample14
3 = gms, xls
4 = gdxxrw
5 = yes
6 = This example illustrates reading from and writing to an MS Excel file using a modified version of trnsport.gms

*$*$*$
Files = GDXDUMPExample15.gms,trnsport.gms
1 = 027
2 = GDXDUMPExample15
3 = gms
4 = gdxdump
5 =
6 = Generates first a GDX file and then lists symbols in the GDX file

*$*$*$
Files = GDXDIFFExample16.gms,trnsport.gms
1 = 028
2 = GDXDIFFExample16
3 = gms
4 = gdxdiff
5 =
6 = Compares two GDX files and writes the difference to a third GDX file

*$*$*$
Files = GDXMERGEExample17.gms
1 = 029
2 = GDXMERGEExample17
3 = gms
4 = gdxmerge
5 =
6 = Merges a number of GDX files into one

*$*$*$
Files = GDXRANKExample18.gms
1 = 030
2 = GDXRANKExample18
3 = gms
4 = gdxrank
5 =
6 = Sorts a parameter, creates a sorted version and verifies that the sort works correctly

*$*$*$
Files = GDXCOPYExample19.gms,UNStatistics.gdx
1 = 031
2 = GDXCOPYExample19
3 = gms, gdx
4 = gdxcopy
5 =
6 = Copies a GDX file to a compressed format for version 6
It creates a new directory called "newdir" in the project directory
   and places the new copy there.

*$*$*$
Files = Distances1.gms,Sample.mdb
1 = 032
2 = Distances1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Single-valued tables
The programs selects distances from database "sample.mdb"
  and writes them to "distances.inc" or "distances.gdx" or both.

*$*$*$
Files = SalesProfitDB1.gms,Sample.mdb
1 = 033
2 = SalesProfitDB1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Single-valued tables
The programs selects sales and profit information from database "sample.mdb"
  and writes them to "sales.inc" or "profit.inc" respectively.

*$*$*$
Files = SalesProfitDB2c.gms,Sample.mdb
1 = 034
2 = SalesProfitDB2c
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Use of UNION to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb"
  using 'UNION' and writes results to "salesprofit.inc". It also illustrates
  how to break a line in a query statement.

*$*$*$
Files = SalesProfitDB2m.gms,Sample.mdb
1 = 035
2 = SalesProfitDB2m
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Use of UNION to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb"
  using 'UNION' and writes results to "salesprofitm.inc". It also illustrates the
  use of 'M' (mute) option to remove extra information about the query from the
  standard output and generated include file.

*$*$*$
Files = SalesProfitDB3.gms,Sample.mdb
1 = 036
2 = SalesProfitDB3
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into several '.inc' files.

*$*$*$
Files = SalesProfitDB4.gms,Sample.mdb
1 = 037
2 = SalesProfitDB4
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into a single GDX file.

*$*$*$
Files = IndexMapping1.gms,Sample.mdb
1 = 038
2 = IndexMapping1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Index mapping in GAMS code
This example shows how to map index names if the names in the
   database are different from the ones in the GAMS model.

*$*$*$
Files = IndexMapping2.gms,Sample.mdb
1 = 039
2 = IndexMapping2
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Index mapping in MS Access
This example shows how to map index names if the names in the database
   are different from the ones in the GAMS model. In this case all
   mapping is handled inside the database.

*$*$*$
Files = MDB2GMS.gms
1 = 040
2 = MDB2GMS
3 = gms
4 = mdb2gms
5 = yes
6 = Runs MDB2GMS interactively
It offers the user first a menu of options, which
   includes "mdb2gms" help, "mdb2gms" PDF documentation
   and running "mdb2gms" interactively.

*$*$*$
Files = MDBSr5.gms,MDBSr0.gms,Sr1.gms,Sr2.gms,Sr3.gms,Sr4.gms,Transportation.mdb
1 = 041
2 = MDBSr5
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Sequence of GAMS models using save/restart facility
This program calls a number of GAMS programs. Each program performs one task in the given sequence:
   Data extraction --> Data manipulation --> Model definition --> Model solution --> Report writing
*$*$*$
Files = MDB2GDX1.gms,MDBSr0.gms,Transportation.mdb
1 = 042
2 = MDB2GDX1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Creates a GDX file in execution time and displays it in GDXVIEWER

*$*$*$
Files = MDB2GDX2.gms,Transportation.mdb
1 = 043
2 = MDB2GDX2
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Creates a GDX file in compile time

*$*$*$
Files = DBTimestamp1.gms,MDBSr0.gms,Transportation.mdb
1 = 044
2 = DBTimestamp1
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Retrieve data from database once each day
Day of month in "dbtimestamp.inc" is compared with current day and if they are
   different, data are selected and "dbtimestamp.inc" is updated with current date.
   Note that if "dbtimestamp.inc" does not exist, it is created with day of month
   equaling to "0" to ensure data selection.

*$*$*$
Files = Wiring.gms,Sample.mdb
1 = 045
2 = Wiring
3 = gms, mdb
4 = mdb2gms
5 = yes
6 = Use of wiring option to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb"
  using wiring option and writes results to "x.inc".

*$*$*$
Files = PopulateV.gms
1 = 046
2 = PopulateV
3 = gms
4 = mdb2gms
5 = yes
6 = Creates MS Access database

*$*$*$
Files = Distances2.gms,Sample.mdb
1 = 047
2 = Distances2
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Single-valued tables
The programs selects distances from database "sample.mdb"
  and writes them to "distances.inc" or "distances.gdx" or both.

*$*$*$
Files = SalesProfitDB5.gms,Sample.mdb
1 = 048
2 = SalesProfitDB5
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Use of UNION to read multi-data column tables
The programs selects sales and profit information from database "sample.mdb" using
   'UNION' and writes results to "salesprofit.inc". Alternative connection strings
   are also provided as comment.

*$*$*$
Files = SalesProfitDB6.gms,Sample.mdb
1 = 049
2 = SalesProfitDB6
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into several ".inc" files. Alternative connection strings
   are also provided as comment.

*$*$*$
Files = SalesProfitDB7.gms,Sample.mdb
1 = 050
2 = SalesProfitDB7
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Multiple queries in one call
Selected data are stored into a single GDX file. Alternative connection strings
   are also provided as comment.

*$*$*$
Files = IndexMapping3.gms,Sample.mdb
1 = 051
2 = IndexMapping3
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Index mapping in GAMS code
This example shows how to map index names if the names in the
   database are different from the ones in the GAMS model.

*$*$*$
Files = IndexMapping4.gms,Sample.mdb
1 = 052
2 = IndexMapping4
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Index mapping in MS Access
This example shows how to map index names if the names in the database
   are different from the ones in the GAMS model. In this case all
   mapping is handled inside the database.

*$*$*$
Files = SQL2GMS.gms
1 = 053
2 = SQL2GMS
3 = gms
4 = sql2gms
5 = yes
6 = Runs SQL2GMS interactively
It offers the user first a menu of options, which
   includes "sql2gms" help, "sql2gms" PDF documentation
   and running "sql2gms" interactively.

*$*$*$
Files = SQLSr5.gms,SQLSr0.gms,Sr1.gms,Sr2.gms,Sr3.gms,Sr4.gms,Transportation.mdb
1 = 054
2 = SQLSr5
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Sequence of GAMS models using save/restart facility
This program calls a number of GAMS programs. Each program performs one task in the given sequence:
   Data extraction --> Data manipulation --> Model definition --> Model solution --> Report writing
*$*$*$
Files = SQL2GDX1.gms,SQLSr0.gms,Transportation.mdb
1 = 055
2 = SQL2GDX1
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Creates a GDX file in execution time and displays it in GDXVIEWER

*$*$*$
Files = SQL2GDX2.gms,Transportation.mdb
1 = 056
2 = SQL2GDX2
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Creates a GDX file in compile time

*$*$*$
Files = DBTimestamp2.gms,SQLSr0.gms,Transportation.mdb
1 = 057
2 = DBTimestamp2
3 = gms, mdb
4 = sql2gms
5 = yes
6 = Retrieves data from database once each day
Day of month in "dbtimestamp.inc" is compared with current day and if they are
   different, data are selected and "dbtimestamp.inc" is updated with current date.
   Note that if "dbtimestamp.inc" does not exist, it is created with day of month
   equaling to "0" to ensure data selection.

*$*$*$
Files = Excel.gms,Profit.xls
1 = 058
2 = Excel
3 = gms, xls
4 = sql2gms
5 = yes
6 = Reads data from Excel through ODBC
The spreadsheet is accessed via ODBC (DSN-less connection).

*$*$*$
Files = Text.gms,ODBCData.txt,ODBCData2.txt,Schema.ini
1 = 059
2 = Text
3 = gms, txt, ini
4 = sql2gms
5 = yes
6 = Reads table from a text file using the ODBC Text Driver

*$*$*$
Files = dBASE.gms,Table02.dbf
1 = 060
2 = dBASE
3 = gms, dbf
4 = sql2gms
5 = yes
6 = Reads a dBASE table from United Nations Statistics Division

*$*$*$
Files = SQLServer.gms
1 = 061
2 = SQLServer
3 = gms
4 = sql2gms
5 = yes
6 = Test timeouts against SQL Server
This model artificially delays a query against SQL Server.
   It will only work if the command time out is set to a number
   exceeding 10 minutes.

*$*$*$
Files = ReadSet.gms,Test3.xls
1 = 062
2 = ReadSet
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads set data

*$*$*$
Files = ReadTrnsportData1.gms,Test3.xls
1 = 063
2 = ReadTrnsportData1
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads set data and the table of the transportation model in several calls

*$*$*$
Files = ReadTrnsportData2.gms,Test3.xls
1 = 064
2 = ReadTrnsportData2
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads set data and the table of the transportation model in one call

*$*$*$
Files = ReadMultiDimPar.gms,Yield.xls
1 = 065
2 = ReadMultiDimPar
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads a multidimensional parameter

*$*$*$
Files = ReadMultiRange.gms,UNESCO.xls
1 = 066
2 = ReadMultiRange
3 = gms, xls
4 = xls2gms
5 = yes
6 = Reads a multi-area range and does post processing to eliminate invalid entries

*$*$*$
Files = GDXViewerExample.gms,Trnsport.gdx
1 = 067
2 = GDXViewerExample
3 = gms, gdx
4 = GDXViewer
5 = yes
6 = Illustrates conversion of GDX data into different formats
GDXViewer allows the user to convert GDX data into several formats:
   MS Excel, CSV, ASCII text, GAMS Include, HTML, XML, MS Access and
   other database formats. In the interactive mode, it can also generate
   SQL insert and update scripts.

*$*$*$
Files = Portfolio.gms,..\apifiles\VBA\portfolio.xls
1 = 068
2 = Portfolio
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Determines an efficient frontier in Excel, using the GDX DLL (vba API) and the GAMS executable
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. To solve
   the model we call the GAMS executable with a CreateProcess call out of vba.

*$*$*$
Files = Sudoku.gms,..\apifiles\VBA\sudoku.xls
1 = 069
2 = Sudoku
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve a Sudoku in Excel, using the GDX DLL (vba API) and the GAMS executable
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. To solve
   the model we call the GAMS executable with a CreateProcess call out of vba.

*$*$*$
Files = Samurai.gms,..\apifiles\VBA\samurai.xls
1 = 070
2 = Samurai
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve a Samurai Sudoku in Excel, using the GDX DLL (vba API) and the GAMS executable
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. To solve
   the model we call the GAMS executable with a CreateProcess call out of vba.

*$*$*$
Files = Samurai2.gms,..\apifiles\VBA\samurai2.xls
1 = 071
2 = Samurai2
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve a Samurai Sudoku in Excel, using the GDX and GAMSX DLL (vba API)
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. With the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba.

*$*$*$
Files = CHP.gms,..\apifiles\VBA\chp.xls
1 = 072
2 = CHP
3 = gms, xls
4 = gdxxrw, Excel, vba API
5 = yes
6 = Optimize combined heat and power generation in Excel, using vba API (gamsx and opt) and GDXXRW
In this example GAMS runs only in the background. We use gdxxrw to write a GDX
   file from data defined in the spreadsheet. With the vba version of the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba. At the end the solution is written into a
   user defined workbook using gdxxrw again.

*$*$*$
Files = CHP2.gms,..\apifiles\VBA\chp2.xls
1 = 073
2 = CHP2
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Optimize combined heat and power generation in Excel, using vba API (gamsx, opt and gdx)
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. With the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba. At the end the solution is written into the
   workbook using the GDX vba API again.

*$*$*$
Files = transxls.gms,..\apifiles\VBA\transport.xls
1 = 074
2 = transxls
3 = gms, xls
4 = Excel, vba API
5 = yes
6 = Solve classical transportation problem in Excel, using vba API (gamsx, opt and gdx)
In this example GAMS runs only in the background. We use the vba version of the
   GDX API to write a GDX file from data defined in the spreadsheet. With the
   option object API we set several GAMS options from vba and solve the model
   using the gamsx API out of vba. At the end the solution is written into the
   workbook using the GDX vba API again.

*$*$*$
Files = tsvngdx.gms
1 = 075
2 = tsvngdx
3 = gms
4 = TortoiseSVN, GDX
5 = yes
6 = Integrate gdxdiff with TortoiseSVN
This gams program helps to integrate gdxdiff with TortoiseSVN. Two modes are implemented.

--mode=bin (default)
 Calls gdxdiff and shows resulting difffile as well as the log in the GAMS IDE

--mode=text
 Uses gdxdump to write out the correspoding text files and uses the diff utility
 specified by the user. In this case it is WinMerge

In order to integrate this with TortoiseSVN do the following
- open TortoiseSVN's Settings
- go to DiffViewer
- choose Advanced
- choose Add
- Enter extension .gdx
- Enter external program (replace with your GAMS System Directory):
"C:\Program Files\GAMS23.4\gams" "C:\Program Files\GAMS23.4\gamslib_ml\tsvngdx.351" --mine=%mine --base=%base --mode=bin

NOTE: So far this only works on Windows since it depends upon Windows programs.

Contributor: Jan-H. Jagla, February 2010

*$*$*$
Files = GDXXRWExample15.gms
1 = 076
2 = GDXXRWExample15
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Write spreadsheet using a filter
The following example creates a small gdx file; the gdx file is used to write
the symbol A to a spreadsheet with the filter enabled

*$*$*$
Files = GDXXRWExample16.gms
1 = 077
2 = GDXXRWExample16
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Write spreadsheet using text and hyperlinks
The following example illustrates the use of the Text directive.

First we write some data to a gdx file and we use text directive to write
text to various cells; some of the cells are hyperlinks to other locations.

*$*$*$
Files = tompivot.gms
1 = 078
2 = tompivot
3 = gms, xls
4 = gdxxrw
5 = yes
6 = Little GAMS Program from Tom Rutherford that Illustrates Report Generation with Excel
Tom Rutherford supplied a little GAMS program that facilitates movement of data to EXCEL Pivot Tables

There are a few GAMS programming "tricks" which facilitate the transformation of
GAMS model outputs into Excel pivot tables.

These include:
- The $echov statement as a means of generating "batinclude subroutines".
- The $macro statement as a means of improving compactness and precision
  of GAMS code for computing model reports.
- The DOS FOR statement with command extensions for transferring model
  output to all Excel files in a folder.

*$*$*$
Files = readdata.gms,stocks.inc,stocks.xls,stocks.mdb,stocks.csv
1 = 079
2 = readdata
3 = gms, inc, xls, mdb, csv
4 = gdxxrw, mdb2gms, csv2gms
5 = yes
6 = Read data from .inc, .xls, .mdb and .csv file
This model reads data from different sources. With...
--datainput=GAMS an GAMS include file is used
--datainput=EXCEL an Excel file is read using gdxxrw
--datainput=ACCESS an Access file is read using mdb2gms
--datainput=CSV an CSV file is read using csv2gms

Contributor: Michael Bussieck

*$*$*$
Files = datatest.gms,datamod.inc
1 = 080
2 = datatest
3 = gms
4 =
5 =
6 = Driver for datalib tests of all sorts

Contributor: Timo Lohmann

*$*$*$
Files = GDXMRWPlotting01.gms, do_plot.m, simple.gms, do_ehl.m, seepress.m, ehl_kost.gms
1 = 081
2 = GDXMRWPlotting01
3 = gms, m
4 = gdxmrw
5 =
6 = GDXMRW examples for plotting

Contributor: Steve Dirkse, Aug 2011

*$*$*$
Files = MakeQL.gms, extfwrapper.gms, tricclib.gms, tridclib.gms, triifort.gms
1 = 082
2 = MakeQL
3 = gms
4 =
5 =
6 = Create Querry Library routines for extrinsic functions
This model demonstrates how to generate include files automatically which are
needed for extrinsic function libraries. The files which are generated here are
used in the GAMS Test Library models TRILIB01, TRILIB02 and TRILIB03.

Contributor: Lutz Westermann, Dec 2011

*$*$*$
Files = TrnsxcllStarter.gms,Trnsxcll.xls,Trnsxcll.gms
1 = 083
2 = TrnsxcllStarter
3 = gms, xls
4 =
5 = yes
6 = Excel Spreadsheet in Charge of GAMS

The worksheet writes the files included below named:
            supply.set
            demand.set
            supply.dat
            demand.dat
            distance.dat
            tran.dat
This code sends back solution in output.csv

Contributor: Bruce McCarl, March 2012

*$*$*$

